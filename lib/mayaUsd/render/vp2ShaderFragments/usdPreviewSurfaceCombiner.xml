<!--
========================================================================
Copyright 2018 Pixar
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
========================================================================
-->
<fragment uiName="usdPreviewSurfaceCombiner" name="usdPreviewSurfaceCombiner" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0">
    <description>
        Combines material and lighting components.
    </description>
    <properties>
        <!-- Irradiance values accumulated from all lights. -->
        <float3 name="diffuseIrradianceIn" flags="constantParam"/>
        <float3 name="specularIrradianceIn" flags="constantParam"/>

        <!-- Ambient and environment lighting from Maya. -->
        <float3 name="ambientIn"/>
        <bool name="mayaAlphaCut" semantic="mayaAlphaCut" flags="isRequirementOnly"/>
        <float3 name="IrradianceEnv"/>
        <float3 name="SpecularEnv"/>

        <!-- UsdPreviewSurface Material Properties. -->
        <float3 name="diffuseColor"/>
        <float3 name="specularColor"/>
        <float3 name="emissiveColor"/>
        <float name="metallic"/>
        <bool name="useSpecularWorkflow"/>
        <float name="ior"/>
        <!--  Note that VdotH is referred to as EdotH in the fragments below.
              This is intentional where V represents View and E represents Eye-->
        <float name="VdotH"/>
        <!-- The shader computes transparency from its "opacity" attribute. -->
        <float3 name="transparency"/>
    </properties>
    <values>
        <float3 name="diffuseIrradianceIn" value="0.0,0.0,0.0"/>
        <float3 name="specularIrradianceIn" value="0.0,0.0,0.0"/>

        <float3 name="ambientIn" value="0.0,0.0,0.0"/>
        <float3 name="IrradianceEnv" value="0.0,0.0,0.0"/>
        <float3 name="SpecularEnv" value="0.0,0.0,0.0"/>

        <!-- UsdPreviewSurface Default Values -->
        <float3 name="diffuseColor" value="0.18,0.18,0.18"/>
        <float3 name="specularColor" value="0.0,0.0,0.0"/>
        <float3 name="emissiveColor" value="0.0,0.0,0.0"/>
        <bool name="useSpecularWorkflow" value="true"/>
        <float name="metallic" value="0.0"/>
        <float name="ior" value="1.5"/>
        <float name="VdotH" value="0.0"/>
        <float3 name="transparency" value="0.0,0.0,0.0"/>
    </values>
    <outputs>
        <struct name="usdPreviewSurfaceCombiner" struct_name="mayaSurfaceShaderOutput"/>
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.1">
            <function_name val="usdPreviewSurfaceCombiner"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float3 vec3
#endif

mayaSurfaceShaderOutput
usdPreviewSurfaceCombiner(
        float3 diffuseIrradianceIn,
        float3 specularIrradianceIn,
        float3 ambientIn,
        float3 irradianceEnv,
        float3 specularEnv,
        float3 diffuseColor,
        float3 specularColor,
        float3 emissiveColor,
        float metallic,
        bool useSpecularWorkflow,
        float ior,
        float EdotH,
        float3 transparency)
{
    mayaSurfaceShaderOutput result;

    // Ambient
    result.outColor = ambientIn * diffuseColor;

    // Diffuse
    if (useSpecularWorkflow) {
        result.outColor += diffuseIrradianceIn;
        result.outColor += diffuseColor * irradianceEnv;
    } else {
        // For metallic workflows, pure metals have no diffuse
        result.outColor += diffuseIrradianceIn * (1.0 - metallic);
        result.outColor += diffuseColor * irradianceEnv * (1.0 - metallic);
    }

    if (!mayaAlphaCut) {
        result.outColor *= saturate(1.0 - transparency);
    }

    // Specular
    result.outColor += specularIrradianceIn;
    if (useSpecularWorkflow) {
        result.outColor += specularColor * specularEnv;
    } else {
        float R = (1.0 - ior) / (1.0 + ior);

        // Schlick Fresnel
        float fresnel = pow(max(0.0, 1.0 - EdotH), 5.0);

        // Per https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html
        //   If metallic is 1, then both F0 (reflectivity at 0 degree incidence) and edge F90 reflectivity will simply be the Albedo.
        //   If metallic is 0, then Albedo is ignored in the calculation of F0 and F90; F0 is derived from ior via ( (1-ior)/(1+ior) )^2 and F90 is white. In between, we interpolate.

        vec3 specColor = mix(vec3(1.0), diffuseColor, metallic);
        float3 F0 = mix(R * R * specColor, specColor, metallic);
        float3 F90 = specColor;
        // // ... finally get the color based on the fresnel value
        result.outColor  += mix(F0, F90, fresnel)  * specularEnv * metallic;
    }

    // Emissive
    result.outColor += emissiveColor;

    // Transparency
    result.outTransparency = transparency;

    result.outGlowColor = float3(0.0, 0.0, 0.0);
    result.outMatteOpacity = (1.0 - transparency);

    return result;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="usdPreviewSurfaceCombiner"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float3 vec3
#endif



mayaSurfaceShaderOutput
usdPreviewSurfaceCombiner(
        float3 diffuseIrradianceIn,
        float3 specularIrradianceIn,
        float3 ambientIn,
        float3 irradianceEnv,
        float3 specularEnv,
        float3 diffuseColor,
        float3 specularColor,
        float3 emissiveColor,
        float metallic,
        bool useSpecularWorkflow,
        float ior,
        float EdotH,
        float3 transparency)
{
    mayaSurfaceShaderOutput result;

    // Ambient
    result.outColor = ambientIn * diffuseColor;

    // Diffuse
    if (useSpecularWorkflow) {
        result.outColor += diffuseIrradianceIn;
        result.outColor += diffuseColor * irradianceEnv;
    } else {
        // For metallic workflows, pure metals have no diffuse
        result.outColor += diffuseIrradianceIn * (1.0 - metallic);
        result.outColor += diffuseColor * irradianceEnv * (1.0 - metallic);
    }

    if (!mayaAlphaCut) {
        result.outColor *= saturate(1.0 - transparency);
    }

    // Specular
    result.outColor += specularIrradianceIn;
    if (useSpecularWorkflow) {
        result.outColor += specularColor * specularEnv;
    } else {
        float R = (1.0 - ior) / (1.0 + ior);

        // Schlick Fresnel
        float fresnel = pow(max(0.0, 1.0 - EdotH), 5.0);

        // Per https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html
        //   If metallic is 1, then both F0 (reflectivity at 0 degree incidence) and edge F90 reflectivity will simply be the Albedo.
        //   If metallic is 0, then Albedo is ignored in the calculation of F0 and F90; F0 is derived from ior via ( (1-ior)/(1+ior) )^2 and F90 is white. In between, we interpolate.

        vec3 specColor = mix(vec3(1.0), diffuseColor, metallic);
        float3 F0 = mix(R * R * specColor, specColor, metallic);
        float3 F90 = specColor;
        // // ... finally get the color based on the fresnel value
        result.outColor  += mix(F0, F90, fresnel)  * specularEnv * metallic;
    }

    // Emissive
    result.outColor += emissiveColor;

    // Transparency
    result.outTransparency = transparency;

    result.outGlowColor = float3(0.0, 0.0, 0.0);
    result.outMatteOpacity = (1.0 - transparency);

    return result;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="10.0">
            <function_name val="usdPreviewSurfaceCombiner"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float3 vec3
#endif

mayaSurfaceShaderOutput
usdPreviewSurfaceCombiner(
        float3 diffuseIrradianceIn,
        float3 specularIrradianceIn,
        float3 ambientIn,
        float3 irradianceEnv,
        float3 specularEnv,
        float3 diffuseColor,
        float3 specularColor,
        float3 emissiveColor,
        float metallic,
        bool useSpecularWorkflow,
        float ior,
        float EdotH,
        float3 transparency)
{
    mayaSurfaceShaderOutput result;

    // Ambient
    result.outColor = ambientIn * diffuseColor;

    // Diffuse
    if (useSpecularWorkflow) {
        result.outColor += diffuseIrradianceIn;
        result.outColor += diffuseColor * irradianceEnv;
    } else {
        // For metallic workflows, pure metals have no diffuse
        result.outColor += diffuseIrradianceIn * (1.0 - metallic);
        result.outColor += diffuseColor * irradianceEnv * (1.0 - metallic);
    }

    if (!mayaAlphaCut) {
        result.outColor *= saturate(1.0 - transparency);
    }

    // Specular
    result.outColor += specularIrradianceIn;
    if (useSpecularWorkflow) {
        result.outColor += specularColor * specularEnv;
    } else {
        float R = (1.0 - ior) / (1.0 + ior);

        // Schlick Fresnel
        float fresnel = pow(max(0.0, 1.0 - EdotH), 5.0);

        // Per https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html
        //   If metallic is 1, then both F0 (reflectivity at 0 degree incidence) and edge F90 reflectivity will simply be the Albedo.
        //   If metallic is 0, then Albedo is ignored in the calculation of F0 and F90; F0 is derived from ior via ( (1-ior)/(1+ior) )^2 and F90 is white. In between, we interpolate.

        vec3 specColor = lerp(vec3(1.0), diffuseColor, metallic);
        float3 F0 = lerp(R * R * specColor, specColor, metallic);
        float3 F90 = specColor;
        // // ... finally get the color based on the fresnel value
        result.outColor  += lerp(F0, F90, fresnel)  * specularEnv * metallic;
    }

    // Emissive
    result.outColor += emissiveColor;

    // Transparency
    result.outTransparency = transparency;

    result.outGlowColor = float3(0.0, 0.0, 0.0);
    result.outMatteOpacity = (1.0 - transparency);

    return result;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="usdPreviewSurfaceCombiner"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float3 vec3
#endif

mayaSurfaceShaderOutput
usdPreviewSurfaceCombiner(
        float3 diffuseIrradianceIn,
        float3 specularIrradianceIn,
        float3 ambientIn,
        float3 irradianceEnv,
        float3 specularEnv,
        float3 diffuseColor,
        float3 specularColor,
        float3 emissiveColor,
        float metallic,
        bool useSpecularWorkflow,
        float ior,
        float EdotH,
        float3 transparency)
{
    mayaSurfaceShaderOutput result;

    // Ambient
    result.outColor = ambientIn * diffuseColor;

    // Diffuse
    if (useSpecularWorkflow) {
        result.outColor += diffuseIrradianceIn;
        result.outColor += diffuseColor * irradianceEnv;
    } else {
        // For metallic workflows, pure metals have no diffuse
        result.outColor += diffuseIrradianceIn * (1.0 - metallic);
        result.outColor += diffuseColor * irradianceEnv * (1.0 - metallic);
    }

    if (!mayaAlphaCut) {
        result.outColor *= saturate(1.0 - transparency);
    }

    // Specular
    result.outColor += specularIrradianceIn;
    if (useSpecularWorkflow) {
        result.outColor += specularColor * specularEnv;
    } else {
        float R = (1.0 - ior) / (1.0 + ior);

        // Schlick Fresnel
        float fresnel = pow(max(0.0, 1.0 - EdotH), 5.0);

        // Per https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html
        //   If metallic is 1, then both F0 (reflectivity at 0 degree incidence) and edge F90 reflectivity will simply be the Albedo.
        //   If metallic is 0, then Albedo is ignored in the calculation of F0 and F90; F0 is derived from ior via ( (1-ior)/(1+ior) )^2 and F90 is white. In between, we interpolate.

        vec3 specColor = lerp(vec3(1.0), diffuseColor, metallic);
        float3 F0 = lerp(R * R * specColor, specColor, metallic);
        float3 F90 = specColor;
        // // ... finally get the color based on the fresnel value
        result.outColor  += lerp(F0, F90, fresnel)  * specularEnv * metallic;
    }

    // Emissive
    result.outColor += emissiveColor;

    // Transparency
    result.outTransparency = transparency;

    result.outGlowColor = float3(0.0, 0.0, 0.0);
    result.outMatteOpacity = (1.0 - transparency);

    return result;
}

]]>
            </source>
        </implementation>
    </implementation>
</fragment>