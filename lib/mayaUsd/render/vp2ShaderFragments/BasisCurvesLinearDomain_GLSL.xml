<!--
========================================================================
Copyright 2018 Pixar
Copyright 2020 Autodesk

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
========================================================================
-->
<fragment uiName="BasisCurvesLinearDomain" name="BasisCurvesLinearDomain" type="domainShader" class="ShadeFragment" version="1.0" feature_level="0">
    <description>
        <![CDATA[Domain shader for basisCurves]]>
    </description>
    <keyword value="tessellation" />
    <properties>
        <undefined  name="GPUStage" semantic="GPUStage" />
        <float4x4  name="worldView" semantic="worldview" flags="isRequirementOnly" />
        <float4x4  name="worldViewIT" semantic="worldviewinversetranspose" flags="isRequirementOnly" />
        <float4x4  name="worldViewI" semantic="worldviewinverse" flags="isRequirementOnly" />
        <float4x4  name="worldViewT" semantic="worldviewtranspose" flags="isRequirementOnly" />
        <float4  name="tessOuterLo" semantic="patchConstantParam" flags="isRequirementOnly,varyingInputParam" />
        <float4  name="tessOuterHi" semantic="patchConstantParam" flags="isRequirementOnly,varyingInputParam" />
        <struct  name="patch" size="2" struct_name="hullOutS" />
        <float3  name="Pm" semantic="POSITION" flags="isRequirementOnly,varyingInputParam" />
        <float3  name="Nm" semantic="NORMAL" flags="isRequirementOnly,varyingInputParam" />
        <float  name="U0_1" semantic="TEXCOORD0" flags="isRequirementOnly,varyingInputParam" />
        <int  name="outputpatchsize" semantic="controlParam" flags="isRequirementOnly" />
        <string  name="tessprimitives" semantic="controlParam" flags="isRequirementOnly" />
        <string  name="patchspacing" semantic="controlParam" flags="isRequirementOnly" />
        <int  name="barriers" semantic="controlParam" flags="isRequirementOnly" />
    </properties>
    <values>
        <int name="outputpatchsize" value="2"/>
        <string name="tessprimitives" value="quads"/>
        <string name="patchspacing" value="fractional_odd_spacing"/>
        <int name="barriers" value="0"/>
    </values>
    <outputs>
        <struct  name="structDomain" size="4" struct_name="structDomain" />
        <undefined  name="GPUStage" semantic="domainShader" />
        <float3  name="DS_Pm" semantic="POSITION" flags="isRequirementOnly,varyingInputParam" />
        <float3  name="DS_Nm" semantic="DS_Nm" flags="isRequirementOnly,varyingInputParam" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="BasisCurvesLinearDomain" />
            <source>
                <![CDATA[
struct Coeffs
{
    vec4 basis;
    vec4 tangent_basis;
};

// line 520 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

vec3 evaluateNormal(float u)
{
    vec4 n0 = worldViewIT * vec4(DS_IN[0].Nm, 1.0f);
    vec4 n1 = worldViewIT * vec4(DS_IN[1].Nm, 1.0f);

    // XXX: This clamp is a hack to mask some odd orientation flipping issues 
    u = clamp(u, 1e-3, 1.0 - 1e-3);
    vec3 normal = mix(n1.xyz, n1.xyz, u);

    // A zero vector is passed in to indicate requirement of camera-facing normal.
    if (length(normal) < 0.00001f)
    {
        normal = vec3(0.0f, 0.0f, 1.0f);
    }
    return normal;
}

// line 676 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

Coeffs evaluateBasis(float u, float u2, float u3)
{
    vec4 basis;
    basis[0] = u3;
    basis[1] = -3.0*u3 + 3.0*u2;
    basis[2] = 3.0*u3 - 6.0*u2 + 3.0*u;
    basis[3] = -1.0*u3 + 3.0*u2 - 3.0*u + 1.0;

    vec4 tangent_basis;
    tangent_basis[0] = 3.0*u2;
    tangent_basis[1] = -9.0*u2 + 6.0*u;
    tangent_basis[2] = 9.0*u2 - 12.0*u + 3.0;
    tangent_basis[3] = -3.0*u2 + 6.0*u - 3.0;

    return Coeffs(basis, tangent_basis);
}

void evaluate(float u, float v, out vec4 position, out vec4 tangent,
              out float width, out vec3 normal){
    vec4 p0 = worldView * vec4(DS_IN[0].Pm, 1.0f);
    vec4 p1 = worldView * vec4(DS_IN[1].Pm, 1.0f);

    float w0 = DS_IN[0].U0_1;
    float w1 = DS_IN[1].U0_1;

    position = mix(p1, p0, u);
    tangent = normalize(p1 - p0);
    width = mix(w1, w0, u);
    normal = normalize(evaluateNormal(u));
}

// it's the responsibility of orient to store Neye, usually with either
// the computed normal or the tangent (from which the normal will be computed
// in the fragment shader.)
vec3 orient(float v, vec4 position, vec4 tangent, vec3 normal)
{
    // NOTE: lava/lib/basisCurves currently uses tangent X position instead of
    // tangent X normal. We should do a more thorough evaluation to see which
    // is better but to minimize regressions, we're going to keep this as 
    // tangent X normal for now.
    return normalize(cross(tangent.xyz, normal)  * (v - 0.5));
}

structDomain BasisCurvesLinearDomain()
{
    float u = gl_TessCoord.y;
    float v = gl_TessCoord.x;

    Coeffs coeffs = evaluateBasis(u, u*u, u*u*u);
    vec4 basis = coeffs.basis;

    vec4 position;
    vec4 tangent;
    float width;
    vec3 normal;

    evaluate(u, v, position, tangent, width, normal);
    vec3 direction = orient(v, position, tangent, normal);

    vec4 scaledDirection = worldView * vec4(direction, 0.0f);
    vec3 offset = direction * length(scaledDirection.xyz) * width * 0.5f;
    position.xyz = position.xyz + offset;
    position.w = 1;

    vec4 Pm = worldViewI * position;
    vec4 Nm = worldViewT * vec4(normal, 1.0f);

    structDomain outputS;
    outputS.DS_Pm = Pm.xyz;
    outputS.DS_Nm = Nm.xyz;
    return outputS;
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>
