<!--
========================================================================
Copyright 2020 Autodesk
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
========================================================================
-->
<fragment uiName="BasisCurvesCubicHull" name="BasisCurvesCubicHull" type="hullShader" class="ShadeFragment" version="1.0" feature_level="0">
    <description>
        <![CDATA[Hull shader for basisCurves]]>
    </description>
    <keyword value="tessellation" />
    <properties>
        <float4x4  name="worldViewProj" semantic="worldviewprojection" flags="isRequirementOnly" />
        <float2  name="viewportPixelSize" semantic="ViewportPixelSize" flags="isRequirementOnly" />
        <float  name="tessLevel" semantic="TESSLEVEL" flags="isRequirementOnly" />
        <struct  name="inputs" semantic="SV_PATCH" size="4" struct_name="vertOutS" flags="varyingInputParam" />
        <int  name="primitiveID" semantic="SV_PrimitiveID" flags="varyingInputParam" />
        <int  name="patchID" semantic="SV_OutputControlPointID" flags="varyingInputParam" />
        <undefined name="GPUStage" semantic="GPUStage" />
        <float3  name="Pm" semantic="POSITION" flags="isRequirementOnly,varyingInputParam" />
        <float3  name="Nm" semantic="NORMAL" flags="isRequirementOnly,varyingInputParam" />
        <float  name="U0_1" semantic="TEXCOORD0" flags="isRequirementOnly,varyingInputParam" />
    </properties>
    <values>
    </values>
    <outputs>
        <struct  name="outS" size="4" struct_name="hullOutS" />
        <undefined name="GPUStage" semantic="hullShader" />
        <float4  name="tessOuterLo" semantic="patchConstantParam" flags="isRequirementOnly,varyingInputParam" />
        <float4  name="tessOuterHi" semantic="patchConstantParam" flags="isRequirementOnly,varyingInputParam" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="BasisCurvesCubicHull" />
            <source>
                <![CDATA[
float GetMaxTess()
{
    // Should be replaced with a uniform
    return 40;
}

float GetPixelToTessRatio()
{
    // Should be replaced with a uniform
    return 20.0;
}

vec2 projectToScreen(mat4 wvp, vec3 vertex, vec2 screen_size)
{
    vec4 res = wvp * vec4(vertex, 1.0f);
    res /= res.w;
    return (clamp(res.xy, -1.3, 1.3) + 1) * (screen_size * 0.5);
}

// line 185 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

// Use the length of the control points in screen space to determine how many
// times to subdivide the curve.
void determineLODSettings()
{
    vec2 v0 = projectToScreen(worldViewProj, HS_IN[0].Pm, viewportPixelSize);
    vec2 v1 = projectToScreen(worldViewProj, HS_IN[1].Pm, viewportPixelSize);
    vec2 v2 = projectToScreen(worldViewProj, HS_IN[2].Pm, viewportPixelSize);
    vec2 v3 = projectToScreen(worldViewProj, HS_IN[3].Pm, viewportPixelSize);

    float maxTess = GetMaxTess();

    // Need to handle off screen
    float dist = distance(v0, v1) + distance(v1, v2) + distance(v2, v3);
    float level = clamp(dist / GetPixelToTessRatio(), 0, maxTess);

    gl_TessLevelOuter[0] = level;
    gl_TessLevelOuter[1] = 1;
    gl_TessLevelOuter[2] = level;
    gl_TessLevelOuter[3] = 1;

    gl_TessLevelInner[0] = 1;
    gl_TessLevelInner[1] = level;
}

// line 154 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

void BasisCurvesCubicHull()
{
    if (gl_InvocationID == 0) {
        determineLODSettings();
    }

    // U0_1 being used as widths.
    HS_OUT[gl_InvocationID].U0_1 = HS_IN[gl_InvocationID].U0_1;
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="BasisCurvesCubicHull" />
            <declaration name="hullConstantsOutS" >
                <![CDATA[
struct hullConstantsOutS
{
    float tessLevelInner[2] : SV_InsideTessFactor;
    float tessLevelOuter[4] : SV_TessFactor;
};
                ]]>
            </declaration>
            <source>
                <![CDATA[
float GetMaxTess()
{
    // Should be replaced with a uniform
    return 40;
}

float GetPixelToTessRatio()
{
    // Should be replaced with a uniform
    return 20.0f;
}

float2 projectToScreen(float4x4 wvp, float3 vertex, float2 screen_size)
{
    float4 res = mul(float4(vertex, 1.0f), wvp);
    res /= res.w;
    return (clamp(res.xy, -1.3, 1.3) + 1) * (screen_size * 0.5);
}

// line 154 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

hullOutS BasisCurvesCubicHull(
    InputPatch<vertOutS, 4> inputs,
    uint primitiveID,
    uint patchID)
{
    hullOutS output;

    // U0_1 being used as widths.
    output.Pm   = inputs[patchID].Pm;
    output.Nm   = inputs[patchID].Nm;
    output.U0_1 = inputs[patchID].U0_1;

    return output;
}

// line 185 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

// Use the length of the control points in screen space to determine how many
// times to subdivide the curve.
hullConstantsOutS BasisCurvesCubicHullConstants(
    InputPatch<vertOutS, 4> inPatch,
    OutputPatch<hullOutS, 4> outPatch,
    uint primitiveID : SV_PrimitiveID)
{
    float2 v0 = projectToScreen(worldViewProj, inPatch[0].Pm, viewportPixelSize);
    float2 v1 = projectToScreen(worldViewProj, inPatch[1].Pm, viewportPixelSize);
    float2 v2 = projectToScreen(worldViewProj, inPatch[2].Pm, viewportPixelSize);
    float2 v3 = projectToScreen(worldViewProj, inPatch[3].Pm, viewportPixelSize);

    float maxTess = GetMaxTess();

    // Need to handle off screen
    float dist = distance(v0, v1) + distance(v1, v2) + distance(v2, v3);
    float level = clamp(dist / GetPixelToTessRatio(), 0, maxTess);

    hullConstantsOutS output;

    output.tessLevelOuter[0] = level;
    output.tessLevelOuter[1] = 1;
    output.tessLevelOuter[2] = level;
    output.tessLevelOuter[3] = 1;

    output.tessLevelInner[0] = 1;
    output.tessLevelInner[1] = level;
    
    return output;
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.1">
            <function_name val="NOTIMPLEMENTED" />
        </implementation>
    </implementation>
</fragment>
