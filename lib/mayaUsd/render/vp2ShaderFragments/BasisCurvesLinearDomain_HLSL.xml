<!--
========================================================================
Copyright 2018 Pixar
Copyright 2020 Autodesk

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
========================================================================
-->
<fragment uiName="BasisCurvesLinearDomain" name="BasisCurvesLinearDomain" type="domainShader" class="ShadeFragment" version="1.0" feature_level="0">
    <description>
        <![CDATA[Domain shader for basisCurves]]>
    </description>
    <keyword value="tessellation" />
    <properties>
        <undefined  name="GPUStage" semantic="GPUStage" />
        <float4x4  name="worldView" semantic="worldview" flags="isRequirementOnly" />
        <float4x4  name="worldViewIT" semantic="worldviewinversetranspose" flags="isRequirementOnly" />
        <float4x4  name="worldViewI" semantic="worldviewinverse" flags="isRequirementOnly" />
        <float4x4  name="worldViewT" semantic="worldviewtranspose" flags="isRequirementOnly" />
        <struct  name="patchConstants" struct_name="hullConstantsOutS" flags="varyingInputParam" />
        <struct  name="patch" size="2" struct_name="hullOutS" />
        <float2  name="domainCoord" semantic="SV_DomainLocation" flags="varyingInputParam" />
        <float3  name="Pm" semantic="POSITION" flags="isRequirementOnly,varyingInputParam" />
        <float3  name="Nm" semantic="NORMAL" flags="isRequirementOnly,varyingInputParam" />
        <float  name="U0_1" semantic="TEXCOORD0" flags="isRequirementOnly,varyingInputParam" />
        <int  name="outputpatchsize" semantic="controlParam" flags="isRequirementOnly" />
        <string  name="tessprimitives" semantic="controlParam" flags="isRequirementOnly" />
        <string  name="patchspacing" semantic="controlParam" flags="isRequirementOnly" />
        <int  name="barriers" semantic="controlParam" flags="isRequirementOnly" />
    </properties>
    <values>
        <int name="outputpatchsize" value="2"/>
        <string name="tessprimitives" value="quad"/>
        <string name="patchspacing" value="fractional_odd"/>
        <int name="barriers" value="0"/>
    </values>
    <outputs>
        <struct  name="structDomain" size="4" struct_name="structDomain" />
        <undefined  name="GPUStage" semantic="domainShader" />
        <float3  name="DS_Pm" semantic="POSITION" flags="isRequirementOnly,varyingInputParam" />
        <float3  name="DS_Nm" semantic="DS_Nm" flags="isRequirementOnly,varyingInputParam" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="BasisCurvesLinearDomain" />
            <source>
                <![CDATA[
// line 520 ".../lib/usd/hdSt/resources/shaders/basisCurves.glslfx"

float3 evaluateNormal(hullOutS patch[2], float u)
{
    float4 n0 = mul(float4(patch[0].Nm, 1.0f), worldViewIT);
    float4 n1 = mul(float4(patch[1].Nm, 1.0f), worldViewIT);

    // XXX: This clamp is a hack to mask some odd orientation flipping issues 
    u = clamp(u, 1e-3, 1.0 - 1e-3);
    float3 normal = lerp(n1.xyz, n0.xyz, u);

    // A zero vector is passed in to indicate requirement of camera-facing normal.
    if (length(normal) < 0.00001f)
    {
        normal = float3(0.0f, 0.0f, 1.0f);
    }

    return normal;
}

void evaluate(hullOutS patch[2],
    float u, float v, out float4 position, out float4 tangent,
    out float width, out float3 normal)
{
    float4 p0 = mul(float4(patch[0].Pm, 1.0f), worldView);
    float4 p1 = mul(float4(patch[1].Pm, 1.0f), worldView);

    float w0 = patch[0].U0_1;
    float w1 = patch[1].U0_1;

    position = lerp(p1, p0, u);
    tangent = normalize(p1 - p0);
    width = lerp(w1, w0, u);
    normal = normalize(evaluateNormal(patch, u));
}

// it's the responsibility of orient to store Neye, usually with either
// the computed normal or the tangent (from which the normal will be computed
// in the fragment shader.)
float3 orient(float v, float4 position, float4 tangent, float3 normal)
{
    // NOTE: lava/lib/basisCurves currently uses tangent X position instead of
    // tangent X normal. We should do a more thorough evaluation to see which
    // is better but to minimize regressions, we're going to keep this as 
    // tangent X normal for now.
    return normalize(cross(tangent.xyz, normal)  * (v - 0.5));
}

structDomain BasisCurvesLinearDomain(
    hullConstantsOutS patchConstants,
    hullOutS patch[2],
    float2 domainCoord)
{
    structDomain outputS;

    float u = domainCoord.y;
    float v = domainCoord.x;

    float4 position;
    float4 tangent;
    float width;
    float3 normal;

    evaluate(patch, u, v, position, tangent, width, normal);
    float3 direction = orient(v, position, tangent, normal);

    float4 scaledDirection = mul(float4(direction, 0.0f), worldView);
    float3 offset = direction * length(scaledDirection.xyz) * width * 0.5f;
    position.xyz = position.xyz + offset;
    position.w = 1;

    float4 Pm = mul(position, worldViewI);
    float4 Nm = mul(float4(normal, 1.0f), worldViewT);

    outputS.DS_Pm = Pm.xyz;
    outputS.DS_Nm = Nm.xyz;
    return outputS;
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>
