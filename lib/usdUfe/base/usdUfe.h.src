//
// Copyright 2023 Autodesk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef USDUFE_H
#define USDUFE_H

#define USDUFE_MAJOR_VERSION ${USDUFE_MAJOR_VERSION}
#define USDUFE_MINOR_VERSION ${USDUFE_MINOR_VERSION}
#define USDUFE_PATCH_LEVEL   ${USDUFE_PATCH_LEVEL}

// UsdUfe public namespace string will never change.
#define USDUFE_NS UsdUfe
// C preprocessor trickery to expand arguments.
#define USDUFE_CONCAT(A, B) USDUFE_CONCAT_IMPL(A, B)
#define USDUFE_CONCAT_IMPL(A, B) A##B
// Versioned namespace includes the major version number.
#define USDUFE_VERSIONED_NS USDUFE_CONCAT(USDUFE_NS, _v${USDUFE_MAJOR_VERSION})

namespace USDUFE_VERSIONED_NS {}

// With a using namespace declaration, pull in the versioned namespace into the
// UsdUfe public namespace, to allow client code to use the plain UsdUfe
// namespace, e.g. UsdUfe::Class.
namespace USDUFE_NS {
    using namespace USDUFE_VERSIONED_NS;
}

// Macro to place the UsdUfe symbols in the versioned namespace, which is how
// they will appear in the shared library, e.g. UsdUfe_v1::Class.
#ifdef DOXYGEN
#define USDUFE_NS_DEF USDUFE_NS
#else
#define USDUFE_NS_DEF USDUFE_VERSIONED_NS
#endif

// A macro to disallow the copy/move constructors and assignment operators.
#define USDUFE_DISALLOW_COPY_MOVE_AND_ASSIGNMENT(TypeName) \
    TypeName(const TypeName&) = delete;                    \
    TypeName& operator=(const TypeName&) = delete;         \
    TypeName(TypeName&&) = delete;                         \
    TypeName& operator=(TypeName&&) = delete;

// A macro to verify that a class is setup correctly using the macro above.
#define USDUFE_VERIFY_CLASS_SETUP(Base, TypeName)           \
static_assert(std::is_base_of<Base, TypeName>::value,       \
              "Class base not set correctly");              \
static_assert(std::has_virtual_destructor<TypeName>::value, \
              "Class should have a virtual destructor");    \
static_assert(!std::is_copy_constructible<TypeName>::value, \
              "Class should NOT be copy constructible");    \
static_assert(!std::is_copy_assignable<TypeName>::value,    \
              "Class should NOT be copy assignable");       \
static_assert(!std::is_move_constructible<TypeName>::value, \
              "Class should NOT be move constructible");    \
static_assert(!std::is_move_assignable<TypeName>::value,    \
              "Class should NOT be move assignable");

// A macro to verify that a class base is setup correctly.
#define USDUFE_VERIFY_CLASS_BASE(Base, TypeName)            \
static_assert(std::is_base_of<Base, TypeName>::value,       \
              "Class base not set correctly");

// A macro to verify that a class has a virtual destructor.
#define USDUFE_VERIFY_CLASS_VIRTUAL_DESTRUCTOR(TypeName)    \
static_assert(std::has_virtual_destructor<TypeName>::value, \
              "Class should have a virtual destructor");

// A macro to verify that a class is not copyable or movable.
#define USDUFE_VERIFY_CLASS_NOT_MOVE_OR_COPY(TypeName)      \
static_assert(!std::is_copy_constructible<TypeName>::value, \
              "Class should NOT be copy constructible");    \
static_assert(!std::is_copy_assignable<TypeName>::value,    \
              "Class should NOT be copy assignable");       \
static_assert(!std::is_move_constructible<TypeName>::value, \
              "Class should NOT be move constructible");    \
static_assert(!std::is_move_assignable<TypeName>::value,    \
              "Class should NOT be move assignable");

#endif // USDUFE_H
