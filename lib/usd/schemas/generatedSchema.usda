#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
)

class MayaReference "MayaReference" (
    doc = "Data used to import a maya reference."
)
{
    string mayaNamespace (
        doc = "Namespace which the maya reference will be imported under."
    )
    asset mayaReference (
        doc = "Path to the maya reference."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a\r
        prim whose purpose is "render" to its (single target)\r
        purpose="proxy" prim.  This is entirely optional, but can be\r
        useful in several scenarios:\r
        \r
        - In a pipeline that does pruning (for complexity management)\r
        by deactivating prims composed from asset references, when we\r
        deactivate a purpose="render" prim, we will be able to discover\r
        and additionally deactivate its associated purpose="proxy" prim,\r
        so that preview renders reflect the pruning accurately.\r
        \r
        - DCC importers may be able to make more aggressive optimizations\r
        for interactive processing and display if they can discover the proxy\r
        for a given render prim.\r
        \r
        - With a little more work, a Hydra-based application will be able\r
        to map a picked proxy prim back to its render geometry for selection.\r
\r
        \\note It is only valid to author the proxyPrim relationship on\r
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for \r
        classifying geometry into categories that can each be independently\r
        included or excluded from traversals of prims on a stage, such as\r
        rendering or bounding-box computation traversals.  The fallback\r
        purpose, default indicates that a prim has "no special purpose"\r
        and should generally be included in all traversals.  Subtrees rooted\r
        at a prim with purpose render should generally only be included\r
        when performing a "final quality" render.  Subtrees rooted at a prim\r
        with purpose proxy should generally only be included when \r
        performing a lightweight proxy render (such as openGL).  Finally,\r
        subtrees rooted at a prim with purpose guide should generally\r
        only be included when an interactive application has been explicitly\r
        asked to "show guides". \r
        \r
        In the previous paragraph, when we say "subtrees rooted at a prim",\r
        we mean the most ancestral or tallest subtree that has an authored,\r
        non-default opinion.  If the purpose of </RootPrim> is set to \r
        "render", then the effective purpose of </RootPrim/ChildPrim> will\r
        be "render" even if that prim has a different authored value for\r
        purpose.  <b>See ComputePurpose() for details of how purpose \r
        inherits down namespace</b>.\r
        \r
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to \r
        accept combinations of included purposes as an input.\r
        \r
        Purpose render can be useful in creating "light blocker"\r
        geometry for raytracing interior scenes.  Purposes render and\r
        proxy can be used together to partition a complicated model\r
        into a lightweight proxy representation for interactive use, and a\r
        fully realized, potentially quite heavy, representation for rendering.\r
        One can use UsdVariantSets to create proxy representations, but doing\r
        so requires that we recompose parts of the UsdStage in order to change\r
        to a different runtime level of detail, and that does not interact\r
        well with the needs of multithreaded rendering. Purpose provides us with\r
        a better tool for dynamic, interactive complexity management.'''
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" \r
        visibility that is supported by most DCC apps.  Visibility is \r
        animatable, allowing a sub-tree of geometry to be present for some \r
        segment of a shot, and absent from others; unlike the action of \r
        deactivating geometry prims, invisible geometry is still \r
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the\r
        order in which they should be pushed onto a transform stack while\r
        visiting a UsdStage's prims in a graph traversal that will effect\r
        the desired positioning for this prim and its descendant prims.\r
        \r
        You should rarely, if ever, need to manipulate this attribute directly.\r
        It is managed by the AddXformOp(), SetResetXformStack(), and\r
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and\r
        GetLocalTransformation()."""
    )
}

