// Copyright 2020 Autodesk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

proc setOptionVars(int $forceFactorySettings)
{
    if ($forceFactorySettings || !`optionVar -exists stageFromFile_primPath`) {
        optionVar -stringValue stageFromFile_primPath "";
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_excludePrimPath`) {
        optionVar -stringValue stageFromFile_excludePrimPath "";
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_loadAllPayloads`) {
        optionVar -intValue stageFromFile_loadAllPayloads 1;
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_convertUpAxis`) {
        optionVar -intValue stageFromFile_convertUpAxis 1;
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_convertUnit`) {
        optionVar -intValue stageFromFile_convertUnit 1;
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_conversionMethod`) {
        optionVar -intValue stageFromFile_conversionMethod 1;
    }
}

global proc setLatestLoadStageFolder( string $sceneFolder )
{
    optionVar -stringValue mayaUsd_LatestLoadStageFolder $sceneFolder;
}

global proc string getLatestLoadStageFolder()
{
    string $sceneFolder;

    // First check if we've saved a location in the option var
    if (`optionVar -exists mayaUsd_LatestLoadStageFolder`)
    {
        $sceneFolder = `optionVar -q mayaUsd_LatestLoadStageFolder`;
    }

    // Then check if there is a current Maya scene, if so choose that as
    // a starting point.
    if ("" == $sceneFolder)
    {
        $sceneFolder = dirname(`file -q -sceneName`);
    }

    // If we are really starting from scratch then just go with the 
    // current workspace location for scenes.
    if ("" == $sceneFolder)
    {
        string $workspaceLocation = `workspace -q -fn`;
        string $scenesFolder = `workspace -q -fileRuleEntry "scene"`;
        $sceneFolder = $workspaceLocation + "/" + $scenesFolder;
    }

    return $sceneFolder;
}

// Call when the up-axis or unit checkbox are modified bythe user.
global proc stageFromFile_upAxisUnitCB()
{
    int $upAxisEnabled = `checkBoxGrp -q -value1 upAxisCheckBox`;
    int $unitEnabled = `checkBoxGrp -q -value1 unitCheckBox`;
    optionMenuGrp -e -en ($unitEnabled + $upAxisEnabled) axisAndUnitMethodMenu;
}

// stageFromFile_UISetup
// creates the options of the stageFromFile dialog
global proc string stageFromFile_UISetup(string $parent)
{
    // First create the scroll layout here and then call the python
    // helper to add the rest of the UI.
    setParent $parent;
    string $layout = `scrollLayout -childResizable true`;

    // Add the USD root file relative section.
    python("import mayaUsd_USDRootFileRelative as murel\nmurel.usdRootFileRelative.uiCreate('" + $layout + "')");

    // Then add the stage from file specific section.
    setParent $layout;
    $title = `getMayaUsdString("kLabelStage")`;
    $frame = `frameLayout -label $title -collapsable false`;
    checkBoxGrp -l `getMayaUsdString("kLoadPayloads")` 
        -ann `getMayaUsdString("kLoadPayloadsAnn")`
        -sbm `getMayaUsdString("kLoadPayloadsSbm")`
        loadAllPayloadsCheckBox;

    frameLayout -label `getMayaUsdString("kLabelStageDisplay")` -parent $frame -collapsable true -collapse false;
    textFieldGrp -l `getMayaUsdString("kPrimPath")` 
        -ann `getMayaUsdString("kPrimPathAnn")`
        -sbm `getMayaUsdString("kPrimPathSbm")`
        primPathField;
    textFieldGrp -l `getMayaUsdString("kExcludePrimPaths")` 
        -ann `getMayaUsdString("kExcludePrimPathsAnn")`
        -sbm `getMayaUsdString("kExcludePrimPathsSbm")`
        excludePrimPathField;

    frameLayout -label `getMayaUsdString("kStageAdvancedLabel")` -parent $frame -collapsable true -collapse true advancedSection;
        columnLayout -columnOffset "left" 2 -parent advancedSection advancedSectionOffset;
        frameLayout -label `getMayaUsdString("kStageAxisUnitConversionLabel")` -parent advancedSectionOffset -collapsable true -collapse false;
            checkBoxGrp -l `getMayaUsdString("kStageUpAxisLabel")` 
                -ann `getMayaUsdString("kStageUpAxisAnn")`
                -value1 1
                -cc ("stageFromFile_upAxisUnitCB")
                upAxisCheckBox;
            checkBoxGrp -l `getMayaUsdString("kStageUnitLabel")` 
                -ann `getMayaUsdString("kStageUnitAnn")`
                -value1 1
                -cc ("stageFromFile_upAxisUnitCB")
                unitCheckBox;
            optionMenuGrp -l `getMayaUsdString("kStageAxisAndUnitMethod")` -ann `getMayaUsdString("kStageAxisAndUnitMethodAnn")` axisAndUnitMethodMenu;
                menuItem -l `getMayaUsdString("kStageAxisAndUnitRotateScale")` -ann "rotateScale";
                menuItem -l `getMayaUsdString("kStageAxisAndUnitOverwritePrefs")` -ann "overwritePrefs";
                // This default-select Rotate/Scale item
                optionMenuGrp -edit -select 1 axisAndUnitMethodMenu;

    return $layout;
}

// stageFromFile_UIInit
// init defaults values for the options of the stageFromFile dialog
global proc stageFromFile_UIInit(string $parent, string $filterType)
{
    setOptionVars(false);

    // Init the USD root file relative section.
    python("import mayaUsd_USDRootFileRelative as murel\nmurel.usdRootFileRelative.uiInit('" + $parent + "', '" + $filterType + "')");

    string $ppath = `optionVar -q stageFromFile_primPath`;
    string $exppath = `optionVar -q stageFromFile_excludePrimPath`;
    int $loadp = `optionVar -q stageFromFile_loadAllPayloads`;

    setParent $parent;
    textFieldGrp -e -text $ppath primPathField;
    textFieldGrp -e -text $exppath excludePrimPathField;
    checkBoxGrp -e -value1 $loadp loadAllPayloadsCheckBox;

    if (`optionVar -exists stageFromFile_convertUpAxis`) {
        int $convertUpAxis = `optionVar -q stageFromFile_convertUpAxis`;
        checkBoxGrp -e -value1 $convertUpAxis upAxisCheckBox;
    }

    if (`optionVar -exists stageFromFile_convertUnit`) {
        int $convertUnit = `optionVar -q stageFromFile_convertUnit`;
        checkBoxGrp -e -value1 $convertUnit unitCheckBox;
    }

    if (`optionVar -exists stageFromFile_conversionMethod`) {
        int $conversionMethod = `optionVar -q stageFromFile_conversionMethod`;
        optionMenuGrp -e -select $conversionMethod axisAndUnitMethodMenu;
    }

    stageFromFile_upAxisUnitCB();
}

global proc stageFromFile_UICommit(string $parent)
{
    setParent $parent;

    // Commit the USD root file relative section.
    python("import mayaUsd_USDRootFileRelative as murel\nmurel.usdRootFileRelative.uiCommit('" + $parent + "')");

    // fetch values
    optionVar -stringValue stageFromFile_primPath
        (`textFieldGrp -q -text  primPathField`);
    optionVar -stringValue stageFromFile_excludePrimPath
        (`textFieldGrp -q -text  excludePrimPathField`);
    optionVar -intValue stageFromFile_loadAllPayloads
        (`checkBoxGrp -q -value1 loadAllPayloadsCheckBox`);

    optionVar -intValue stageFromFile_convertUpAxis
        (`checkBoxGrp -q -value1 upAxisCheckBox`);
    optionVar -intValue stageFromFile_convertUnit
        (`checkBoxGrp -q -value1 unitCheckBox`);
    optionVar -intValue stageFromFile_conversionMethod
        (`optionMenuGrp -q -select axisAndUnitMethodMenu`);
}

proc convertUpAxisAndUnit(string $shapeNode)
{
    int $convertUpAxis = `optionVar -q stageFromFile_convertUpAxis`;
    int $convertUnit = `optionVar -q stageFromFile_convertUnit`;
    int $conversionMethod = `optionVar -q stageFromFile_conversionMethod`;
    string $conversionMethodStr = ($conversionMethod == 1) ? "rotateScale" : "overwritePrefs";

    python(
        "import mayaUsdStageConversion; " +
        "mayaUsdStageConversion.convertUpAxisAndUnit(" +
            "'''" + $shapeNode + "'''" + ", " +
            ($convertUpAxis ? "True" : "False") + ", " +
            ($convertUnit ? "True" : "False") + ", " +
            "'''" + $conversionMethodStr + "'''" +
            ")");
}

proc string doCreateStage(string $fileName)
{
    // actually load the file
    string $baseName = basenameEx($fileName);
    if( ! isValidObjectName($baseName) )
        $baseName = "UsdStage";

    string $ppath = `optionVar -q stageFromFile_primPath`;
    string $exppath = `optionVar -q stageFromFile_excludePrimPath`;
    int $loadp = `optionVar -q stageFromFile_loadAllPayloads`;
    string $loadpStr = "True";
    if ($loadp == 0) {
        $loadpStr = "False";
    }

    string $fileNameToSave = $fileName;
    int $requireRelative = (`optionVar -exists mayaUsd_MakePathRelativeToSceneFile` && `optionVar -query mayaUsd_MakePathRelativeToSceneFile`);
    if ($requireRelative) {
        $fileNameToSave = `python("import mayaUsd.lib as mayaUsdLib; mayaUsdLib.Util.getPathRelativeToMayaSceneFile('" + $fileName + "')")`;
    }

    string $shapeNode = `createNode "mayaUsdProxyShape" -skipSelect -name ($baseName+"Shape")`;
    // Note: load rules must be the first thing set so the stage gets loaded in the correct state right away.
    python("import mayaUsd.lib as mayaUsdLib; mayaUsdLib.setLoadRulesAttribute('" + $shapeNode + "', " + $loadpStr + ")");
    setAttr -type "string" ($shapeNode+".filePath") $fileNameToSave;
    setAttr ($shapeNode+".filePathRelative") $requireRelative;
    setAttr -type "string" ($shapeNode+".primPath") $ppath;
    setAttr -type "string" ($shapeNode+".excludePrimPaths") $exppath;
    connectAttr time1.outTime ($shapeNode+".time");
    convertUpAxisAndUnit($shapeNode);
    select -r $shapeNode;
    string $fullPath[] = `ls -l $shapeNode`;
    return $fullPath[0];
}

global proc createStageFromExistingCallback(string $parent, int $doIt)
{
    stageFromFile_UICommit($parent);

    if ($doIt) {
        mayaUsd_createStageFromFile; 
        addToRecentCommandQueue "mayaUsd_createStageFromFile" 
            "mayaUsdCreateStageFromFile";
    }
}

global proc createStageFromExistingSetup(string $parent, int $forceFactorySettings)
{
    setOptionVars($forceFactorySettings);

    stageFromFile_UIInit($parent, "");
}

global proc mayaUsd_showStageFromFileHelp(string $helpTag) {
	python("from mayaUsdUtils import showHelpMayaUSD; showHelpMayaUSD('" + $helpTag + "')");
}


global proc mayaUsd_createStageFromFileOptions()
{
    global int $gOptionBoxTemplateFrameSpacing;

    setOptionVars(false);

    string $commandName = "createStageFromExisting";
    string $callback = ($commandName + "Callback");
    string $setup = ($commandName + "Setup");

    string $layout = getOptionBox();
    setParent $layout;

    setOptionBoxCommandName($commandName);

    setUITemplate -pushTemplate DefaultTemplate;

    string $parent = `formLayout createStageFromExistingOptions`;

    string $settingsFrame = stageFromFile_UISetup($parent);

    formLayout -e
        -af $settingsFrame "top" $gOptionBoxTemplateFrameSpacing
        -af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
        -af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
        -af $settingsFrame "bottom"  $gOptionBoxTemplateFrameSpacing
        $parent;

    string $applyCloseBtn = getOptionBoxApplyAndCloseBtn();
    button -edit -label `getMayaUsdString("kCreateStageFromFile")`
        -command ($callback + " " + $parent + " " + 1 + "; hideOptionBox;")
        $applyCloseBtn;

    string $applyBtn = getOptionBoxApplyBtn();
    button -edit -label `getMayaUsdString("kSaveAndClose")`
        -command ($callback + " " + $parent + " " + 0 + "; hideOptionBox;")
        $applyBtn;

    string $cancelBtn = getOptionBoxCloseBtn();
    button -edit -label `getMayaUsdString("kCancel")`
        -command ("hideOptionBox;")
        $cancelBtn;

    string $resetBtn = getOptionBoxResetBtn();
    button -edit 
        -command ($setup + " " + $parent + " " + 1)
        $resetBtn;

    string $saveBtn = getOptionBoxSaveBtn();
    button -edit 
        -command ($callback + " " + $parent + " " + 0)
        $saveBtn;

    setOptionBoxTitle(getMayaUsdString("kCreateUsdStageFromFileOptions"));

    // Note: we use setOptionBoxHelpTag so that the help menu item
    //       will be localize by Maya.
    string $helpTag = "CreateStageFromFile";
    setOptionBoxHelpTag($helpTag);
    string $helpItem = getOptionBoxHelpItem();
    if ($helpItem != "") {
        menuItem -edit
            -command ("mayaUsd_showStageFromFileHelp" + " " + $helpTag)
            $helpItem;
        global string $gOptionBoxHelpTag;
        $gOptionBoxHelpTag = $helpTag;
    }			

    eval (($setup + " " + $parent + " " + 0));	

    showOptionBox();
}

global proc mayaUsd_createStageFromFile()
{
    setOptionVars(false);
    
    $caption = getMayaUsdString("kCreateUsdStageFromFile");
    $fileFilter = python("from mayaUsdUtils import getUSDDialogFileFilters; getUSDDialogFileFilters()");
    $okCaption = getMayaUsdString("kCreateStage");
    
    string $startFolder = getLatestLoadStageFolder();

    string $result[] = `fileDialog2 
        -fileMode 1
        -caption $caption
        -fileFilter $fileFilter 
        -okCaption $okCaption
        -dir $startFolder
        -optionsUICreate "stageFromFile_UISetup"
        -optionsUIInit "stageFromFile_UIInit"
        -optionsUICommit "stageFromFile_UICommit"`;

    if (size($result) > 0) {
        setLatestLoadStageFolder( dirname($result[0]) );
        doCreateStage($result[0]);
    }
}

global proc string mayaUsd_createStageFromFilePath(string $usdFile)
{
    // This proc is used by the unit tests (which run in standalone mode).
    // In that case we need to make sure the optionVars are initialized as
    // they are queried in doCreateStage().
    setOptionVars(false);
    return doCreateStage($usdFile);
}
