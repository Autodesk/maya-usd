// Copyright 2019 Autodesk
//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


proc mayaUsdTranslatorImport_hideInfo()
{
    if (`rowLayout -exists mayaUsd_NBPrimsInScopeRL`) 
    {
        rowLayout -edit -visible false mayaUsd_NBPrimsInScopeRL;
        rowLayout -edit -visible false mayaUsd_NBSwitchedVariantsRL;

        text -edit -label "---" mayaUsd_NBPrimsInScopeLabel;
        text -edit -label "---" mayaUsd_NBSwitchedVariantsLabel;
    }
}

proc mayaUsdTranslatorImport_showInfo()
{
    if (`rowLayout -exists mayaUsd_NBPrimsInScopeRL`) 
    {
        int $pc = `usdImportDialog -q -primCount`;
        int $swc = `usdImportDialog -q -switchedVariantCount`;

        text -edit -label $pc mayaUsd_NBPrimsInScopeLabel;
        text -edit -label $swc mayaUsd_NBSwitchedVariantsLabel;

        rowLayout -edit -visible true mayaUsd_NBPrimsInScopeRL;
        rowLayout -edit -visible true mayaUsd_NBSwitchedVariantsRL;
    }
}

proc mayaUsdTranslatorImport_SetJobContextDropdown(string $arg) {
    if (startsWith($arg, "[") && endsWith($arg, "]")) {
        if (size($arg) > 2) {
            $arg = substring($arg, 2, size($arg) - 1);
        } else {
            $arg = "";
        }
    }
    string $enabledContexts[] = stringToStringArray($arg, ",");
    if (size($enabledContexts) > 0) {
        // Pick first element (in case we find many...)
        string $enabledContext = $enabledContexts[0];
        string $niceNames[] = `mayaUSDListJobContexts -import`;
        for ($niceName in $niceNames) {
            string $jobContext = `mayaUSDListJobContexts -jc $niceName`;
            if ($jobContext == $enabledContext) {
                optionMenuGrp -e -value $niceName mayaUsdTranslator_jobContextPopup;
                return;
            }
        }
    }

    // None is the default.
    optionMenuGrp -e -select 1 mayaUsdTranslator_jobContextPopup;
}

global proc mayaUsdTranslatorImport_EnableAllControls() {
    // Restore all controls to fully interactive:
    checkBoxGrp -e -en 1 mayaUsdTranslator_MaterialsCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_ImportInstancesCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_AnimDataCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_CustomFrameRangeCheckBox;

    optionMenuGrp -e -en 1 mayaUsdTranslator_jobContextPopup;
    optionMenuGrp -e -en 1 mayaUsdTranslator_MaterialsConversionMenu;

    intFieldGrp -e -en1 1 -en2 1 mayaUsdTranslator_CustomFrameRange;
}

global proc mayaUsdTranslatorImport_SetFromOptions(string $currentOptions, int $enable, int $processJobContext) {
    string $optionList[];
    string $optionBreakDown[];
    string $jobContext = "";
    int $index;

    if (size($currentOptions) > 0) {
        tokenize($currentOptions, ";", $optionList);
        for ($index = 0; $index < size($optionList); $index++) {
            tokenize($optionList[$index], "=", $optionBreakDown);
            if ($optionBreakDown[0] == "shadingMode") {
                mayaUsdTranslatorImport_SetMaterialsCheckBox($optionBreakDown[1], $enable, "mayaUsdTranslator_MaterialsCheckBox");
            } else if ($optionBreakDown[0] == "jobContext" && $processJobContext == 1) {
                // Must be kept last, and only done on main options:
                $jobContext = $optionBreakDown[1];
            } else if ($optionBreakDown[0] == "preferredMaterial") {
                mayaUsdTranslatorImport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "mayaUsdTranslator_MaterialsConversionMenu");
            } else if ($optionBreakDown[0] == "readAnimData") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_AnimDataCheckBox");
                mayaUsdTranslatorImport_AnimationCB();
            } else if ($optionBreakDown[0] == "startTime") {
                int $startTime = $optionBreakDown[1];
                intFieldGrp -e -value1 $startTime -en1 $enable mayaUsdTranslator_CustomFrameRange;
            } else if ($optionBreakDown[0] == "endTime") {
                int $endTime = $optionBreakDown[1];
                intFieldGrp -e -value2 $endTime -en2 $enable mayaUsdTranslator_CustomFrameRange;
            } else if ($optionBreakDown[0] == "useCustomFrameRange") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_CustomFrameRangeCheckBox");
                mayaUsdTranslatorImport_AnimationCB();
            } else if ($optionBreakDown[0] == "importInstances") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_ImportInstancesCheckBox");
            } else if ($optionBreakDown[0] == "importUSDZTextures") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_ImportUSDZTexturesCheckBox");
            }
        }
        if ($jobContext != "" && $processJobContext == 1) {
            mayaUsdTranslatorImport_SetJobContextDropdown($jobContext);
            mayaUsdTranslatorImport_JobContextCB();
        }
    }
}

global proc mayaUsdTranslatorImport_JobContextCB() {
    mayaUsdTranslatorImport_EnableAllControls();

    string $niceName = `optionMenuGrp -q -value mayaUsdTranslator_jobContextPopup`;
    if ($niceName != `getMayaUsdString("kImportJobContextNoneLbl")`) {
        string $affectedOptions = `mayaUSDListJobContexts -ig $niceName`;
        if ($affectedOptions != "") {
            mayaUsdTranslatorImport_SetFromOptions($affectedOptions, 0, 0);
        }
    }
}

global proc int mayaUsdTranslatorImport (string $parent,
                                 string $action,
                                 string $initialSettings,
                                 string $resultCallback )
//
//  Description:
//    This script posts the mayaUsd import file translator options.
//    The optionsString is of the form:
//    varName1=value1;varName2=value2;...
//
//  Parameters:
//    $parent - the elf parent layout for this options layout. It is
//            always a scrollLayout.
//    $action - the action that is to be performed with this invocation of this proc.
//        Valid options are:
//        "query" - construct the options string and pass it to the resultCallback.
//        "post" - post all the elf controls.
//        "fileselected" - a file was selected in the import dialog.
//    $initialSettings - the current options string in effect at the time this script is invoked.
//    $resultCallback - This is the proc to be called with the result string.
//            resultCallback ( string $optionsString )
//
//    Returns:
//        1 if successful.
//        0 otherwise.
//
{
    int $bResult = 0;
    int $cw1 = 180;
    int $cw2 = 300;
    int $bw = 125;

    if ($action == "post") {
        setParent $parent;

        columnLayout -adj true -rs 5 mayaUsdTranslator_OptsCol;

        optionMenuGrp -l  `getMayaUsdString("kImportJobContextLbl")` -cw 1 $cw1 -annotation `getMayaUsdString("kImportJobContextAnn")` -cc ("mayaUsdTranslatorImport_JobContextCB") mayaUsdTranslator_jobContextPopup;
            menuItem -l `getMayaUsdString("kImportJobContextNoneLbl")` -ann "None";
            string $contexts[] = `mayaUSDListJobContexts -import`;
            for ($context in $contexts) {
                string $ann = `mayaUSDListJobContexts -ia $context`;
                menuItem -l $context -ann $ann;
            }
            if (size($contexts) == 0)
            {
                optionMenuGrp -e -vis 0 mayaUsdTranslator_jobContextPopup;
            }


        if (`exists usdImportDialog`)
        {
            rowLayout -numberOfColumns 4 -cw 1 $cw1 -cat 1 "right" 0;
                text -label `getMayaUsdString("kImportScopeVariantsLbl")`
                    -al "right"
                    -sbm `getMayaUsdString("kImportScopeVariantsSbm")`
                    -ann `getMayaUsdString("kImportScopeVariantsAnn")`
                ;
                textField -ed false -nbg true -text `getMayaUsdString("kImportSelectFileTxt")` -w $cw2 mayaUsdTranslator_SelectFileField;
                button -label `getMayaUsdString("kImportHierarchyViewLbl")` -c "mayaUsdTranslatorImport_ViewHierCB" mayaUsdTranslator_ViewHierBtn;
                iconTextButton -w 32 -h 32 -command ("mayaUsdTranslatorImport_ClearImportData;") 
                    -style "iconAndTextVertical" -image1 "refresh.png" -label "" mayaUsdTranslator_ResetBtn;

                // Hide the button by default.
                button -e -visible false -w 1 mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible false mayaUsdTranslator_ResetBtn;
            setParent ..;

            rowLayout -numberOfColumns 3 -cw 1 $cw1 -cat 1 "right" 0 -cal 1 "right" mayaUsd_NBPrimsInScopeRL;
                text -label "";
                text -label `getMayaUsdString("kImportPrimsInScopeNumLbl")`;
                text -label "---" mayaUsd_NBPrimsInScopeLabel;
            setParent ..;
            rowLayout -numberOfColumns 3 -cw 1 $cw1 -cat 1 "right" 0 -cal 1 "right" mayaUsd_NBSwitchedVariantsRL;
                text -label "";
                text -label `getMayaUsdString("kImportVariantsInScopeNumLbl")`;
                text -label "---" mayaUsd_NBSwitchedVariantsLabel;
            setParent ..;
            // We'll start off with the info UI hidden and only make it visible when we come out of 
            // the Hierarchy View the first time.
            mayaUsdTranslatorImport_hideInfo();
        }
//        checkBoxGrp -label "Load Payloads: " -cw 1 $cw1 mayaUsdTranslator_LoadPayloadsCheckBox;
//
//        optionMenuGrp -label "Coordinate System: " -cw 1 $cw1 mayaUsdTranslator_CoordSystemOptionMenu;
//            menuItem -label "Local space";
//            menuItem -label "Object space";
//            menuItem -label "World space";
//        optionMenuGrp -e -sl 1 mayaUsdTranslator_CoordSystemOptionMenu;

        checkBoxGrp -label `getMayaUsdString("kImportMaterialsLbl")` -cw 1 $cw1 -value1 1 -ann `getMayaUsdString("kImportMaterialsAnn")` -cc ("mayaUsdTranslatorImport_MaterialsCB") mayaUsdTranslator_MaterialsCheckBox;

        string $apiString = `about -q -apiVersion`;
        $apiString = `substring $apiString 1 4`;
        optionMenuGrp -l `getMayaUsdString("kImportMaterialConvLbl")` -cw 1 $cw2 -ann `getMayaUsdString("kImportMaterialConvAnn")` mayaUsdTranslator_MaterialsConversionMenu;
        menuItem -l `getMayaUsdString("kImportMaterialConvNoneLbl")` -ann "none";
        if ((int)$apiString >= 2020) {
            menuItem -l `getMayaUsdString("kImportMaterialConvSSLbl")` -ann "standardSurface";
        }
        menuItem -l `getMayaUsdString("kImportMaterialConvLamLbl")` -ann "lambert";
        menuItem -l `getMayaUsdString("kImportMaterialConvPSLbl")` -ann "usdPreviewSurface";
        menuItem -l `getMayaUsdString("kImportMaterialConvBlnLbl")` -ann "blinn";
        menuItem -l `getMayaUsdString("kImportMaterialConvPhgLbl")` -ann "phong";

        checkBoxGrp -label `getMayaUsdString("kImportUSDZTxtLbl")` -cw 1 $cw2 -ann `getMayaUsdString("kImportUSDZTxtAnn")` mayaUsdTranslator_ImportUSDZTexturesCheckBox;

        checkBoxGrp -label `getMayaUsdString("kImportToInstanceLbl")` -label1 `getMayaUsdString("kImportToInstanceOpt")` -cw 1 $cw1 -value1 1 -ann `getMayaUsdString("kImportToInstanceAnn")` mayaUsdTranslator_ImportInstancesCheckBox;

//        optionMenuGrp -label "Include Metadata: " -cw 1 $cw1 mayaUsdTranslator_IncludeMetadataOptionMenu;
//            menuItem "All";
//            menuItem "None";
//            menuItem "Custom";
//        optionMenuGrp -e -sl 3 mayaUsdTranslator_IncludeMetadataOptionMenu;
//
//        textFieldGrp -label "Specify Fields: " -cw 1 $cw2 -cw 2 150 mayaUsdTranslator_SpecifyFields;
//
//        textFieldGrp -label "Prefix Name: " -cw 1 $cw2 -cw 2 50 mayaUsdTranslator_PrefixName;
//
//        optionMenuGrp -label "Include Custom Attributes: " -cw 1 $cw1 mayaUsdTranslator_IncludeCustomAttribOptionMenu;
//            menuItem "All";
//            menuItem "None";
//            menuItem "Custom";
//        optionMenuGrp -e -sl 2 mayaUsdTranslator_IncludeCustomAttribOptionMenu;

        checkBoxGrp -label `getMayaUsdString("kImportAnimationDataLbl")` -cw 1 $cw1 -cc ("mayaUsdTranslatorImport_AnimationCB") mayaUsdTranslator_AnimDataCheckBox;

        checkBoxGrp -label `getMayaUsdString("kImportCustomFrameRangeLbl")` -cw 1 $cw2 -cc ("mayaUsdTranslatorImport_AnimationCB") mayaUsdTranslator_CustomFrameRangeCheckBox;

        intFieldGrp -label `getMayaUsdString("kImportFrameRangeLbl")` -nf 2 -cw 1 $cw2 mayaUsdTranslator_CustomFrameRange;

        // Now set to current settings.
        string $currentOptions = $initialSettings;

        mayaUsdTranslatorImport_EnableAllControls();
        mayaUsdTranslatorImport_SetFromOptions($currentOptions, 1, 1);

        $bResult = 1;

    } else if ($action == "query") {
        string $currentOptions = "";
        $currentOptions = mayaUsdTranslatorImport_AppendMaterialsFromCheckBoxGrp($currentOptions, "shadingMode", "mayaUsdTranslator_MaterialsCheckBox");
        $currentOptions = mayaUsdTranslatorImport_AppendFromPopup($currentOptions, "preferredMaterial", "mayaUsdTranslator_MaterialsConversionMenu");
        $currentOptions = mayaUsdTranslatorImport_AppendFromDialog($currentOptions, "primPath", "-primPath");
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "readAnimData", "mayaUsdTranslator_AnimDataCheckBox");
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "useCustomFrameRange", "mayaUsdTranslator_CustomFrameRangeCheckBox");
        $currentOptions = mayaUsdTranslatorImport_AppendFromIntFieldGrp($currentOptions, "startTime", 1, "mayaUsdTranslator_CustomFrameRange");
        $currentOptions = mayaUsdTranslatorImport_AppendFromIntFieldGrp($currentOptions, "endTime", 2, "mayaUsdTranslator_CustomFrameRange");
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "importUSDZTextures", "mayaUsdTranslator_ImportUSDZTexturesCheckBox");
        $currentOptions = mayaUsdTranslatorImport_AppendJobContexts($currentOptions, "jobContext");

        eval($resultCallback+" \""+$currentOptions+"\"");
        $bResult = 1;

    } else if ($action == "fileselected") {
        if (`exists usdImportDialog`)
        {
            // Clear out the import data since we have a new selection.
            mayaUsdTranslatorImport_ClearImportData;
        }

        // Test the currently selected file in the import dialog to see if it is
        // a USD file.
        string $filters = `translator -q -f "USD Import"`;
        string $currSel = currentFileDialogSelection();
        int $showBtn = false;
        if (! `filetest -d $currSel`)
        {
            string $ext = `fileExtension $currSel`;
            if (`match $ext $filters` == $ext)
            {
                $showBtn = true;
            }
        }

        if (`textField -exists mayaUsdTranslator_SelectFileField`)
        {
            if ($showBtn)
            {
                // Hide the field (and shrink it) and show the button (which will align with label).
                textField -e -vis false -w 1 mayaUsdTranslator_SelectFileField;
                button -e -visible true -w $bw mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible true -w 32 mayaUsdTranslator_ResetBtn;
            }
            else
            {
                // Show the field and hide the button.
                textField -e -vis true -w $cw2 mayaUsdTranslator_SelectFileField;
                button -e -visible false -w 1 mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible false -w 1 mayaUsdTranslator_ResetBtn;
            }
        }

        $bResult = 1;

    } else {
        $bResult = 0;
    }

    mayaUsdTranslatorImport_AnimationCB();
    return $bResult;
}

global proc mayaUsdTranslatorImport_SetOptionMenuByAnnotation(
        string $ann, int $enable, string $widget) {
    int $index = 1; // 1-based indexing.
    for ($i in `optionMenuGrp -q -itemListLong $widget`) {
        if (`menuItem -q -ann $i` == $ann) {
            optionMenuGrp -e -select $index -en $enable $widget;
            return;
        }

        $index++;
    }
}

global proc mayaUsdTranslatorImport_SetCheckBoxGrp(string $arg, int $enable, string $widget)
{
    checkBoxGrp -e -value1 ($arg != "0") -en $enable $widget;
}

global proc mayaUsdTranslatorImport_SetMaterialsCheckBox(string $arg, int $enable, string $widget)
{
    checkBoxGrp -e -value1 ($arg != "[[none,default]]") -en $enable $widget;
    mayaUsdTranslatorImport_MaterialsCB();
}

global proc mayaUsdTranslatorImport_AnimationCB()
{
    if (`checkBoxGrp -q -value1 mayaUsdTranslator_AnimDataCheckBox` == 1) {
        checkBoxGrp -e -vis true mayaUsdTranslator_CustomFrameRangeCheckBox;
        int $vis = (`checkBoxGrp -q -value1 mayaUsdTranslator_CustomFrameRangeCheckBox` == 1);
        intFieldGrp -e -vis $vis mayaUsdTranslator_CustomFrameRange;
    } else {
        checkBoxGrp -e -vis false mayaUsdTranslator_CustomFrameRangeCheckBox;
        intFieldGrp -e -vis false mayaUsdTranslator_CustomFrameRange;
    }
}

global proc mayaUsdTranslatorImport_MaterialsCB()
{
    if (`checkBoxGrp -q -value1 mayaUsdTranslator_MaterialsCheckBox` == 1) {
        optionMenuGrp -e -vis true mayaUsdTranslator_MaterialsConversionMenu;
        checkBoxGrp -e -vis true mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    } else {
        optionMenuGrp -e -vis false mayaUsdTranslator_MaterialsConversionMenu;
        checkBoxGrp -e -vis false mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    }
}

global proc string mayaUsdTranslatorImport_AppendFromCheckBoxGrp(string $currentOptions, string $arg, string $widget)
{
    if (`checkBoxGrp -q -value1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=1";
    } else {
        return $currentOptions + ";" + $arg + "=0";
    }
}

global proc string mayaUsdTranslatorImport_AppendMaterialsFromCheckBoxGrp(string $currentOptions, string $arg, string $widget)
{
    if (`checkBoxGrp -q -value1 $widget` == 1) {
        // Here we will return ALL supported import modes. Finer grained control
        // can be found at the script-level:
        string $importers[] = `mayaUSDListShadingModes -import`;
        string $options[];
        for ($importer in $importers) {
            string $option[] = `mayaUSDListShadingModes -io $importer`;
            stringArrayInsertAtIndex(255, $options, "[" + stringArrayToString($option, ",") + "]");
        }
        return $currentOptions + ";" + $arg + "=[" + stringArrayToString($options, ",") + "]";
    } else {
        return $currentOptions + ";" + $arg + "=[[none,default]]";
    }
}

global proc string mayaUsdTranslatorImport_AppendJobContexts(string $currentOptions, string $arg) {
    string $niceName = `optionMenuGrp -q -value mayaUsdTranslator_jobContextPopup`;
    if ($niceName != `getMayaUsdString("kImportJobContextNoneLbl")`) {
        string $jobContext = `mayaUSDListJobContexts -jc $niceName`;
        if ($jobContext != "") {
            return $currentOptions + ";" + $arg + "=[" + $jobContext + "]";
        }
    }
    return $currentOptions;
}

global proc string mayaUsdTranslatorImport_AppendFromPopup(string $currentOptions, string $arg, string $widget) {
    int $index = `optionMenuGrp -q -select $widget` - 1;
    string $allItems[] = `optionMenuGrp -q -itemListLong $widget`;
    string $item = $allItems[$index];
    string $annotation = `menuItem -q -ann $item`;
    return $currentOptions + ";" + $arg + "=" + $annotation;
}

global proc string mayaUsdTranslatorImport_AppendFromIntFieldGrp(string $currentOptions, string $arg, int $index, string $widget)
{
    string $si = ("-value" + $index);
    string $value = `intFieldGrp -q $si $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc string mayaUsdTranslatorImport_AppendFromDialog(string $currentOptions, string $arg, string $flag)
{
    if (`exists usdImportDialog`)
    {
        string $value = `usdImportDialog -q $flag`;
        if (size($value) > 0)
        {
            return $currentOptions + ";" + $arg + "=" + $value;
        }
    }
    return $currentOptions;
}

global proc mayaUsdTranslatorImport_ViewHierCB()
{
    string $usdFile = currentFileDialogSelection(); 
    string $result = `usdImportDialog $usdFile`;
    if ("" != $result)
    {
        mayaUsdTranslatorImport_showInfo();
    }

    // If the dialog was cancelled then we will not get a result, but
    // don't clear out the info since nothing should be changed.
}

global proc mayaUsdTranslatorImport_ClearImportData()
{
    usdImportDialog -clearData "";
    mayaUsdTranslatorImport_hideInfo();
}
