// Copyright 2019 Autodesk
//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


////////////////////////////////////////////////////////////////////////////
//
// Import context UI

proc string mayaUsdTranslatorImport_getContextOptionsCheckBoxName(string $jobContext)
{
    // Build the name of the checkbox used for a given plugin context configuration
    return $jobContext + "ContextOptionsCheckBox";
}

proc int mayaUsdTranslatorImport_isContextOptionsEnabledByUser(string $jobContext)
{
    string $cbName = mayaUsdTranslatorImport_getContextOptionsCheckBoxName($jobContext);
    string $currentToggle = `iconTextButton -query -image1 $cbName`;
    return ($currentToggle == "toggle_on");
}

proc int mayaUsdTranslatorImport_isContextOptionsUISupported(string $contextLabel)
{
    return `mayaUSDListJobContexts -hasImportUI $contextLabel`;
}

proc string mayaUsdTranslatorImport_getContextOptionsButtonName(string $jobContext)
{
    // Build the name of the button used for a given plugin context configuration
    return $jobContext + "ContextOptionsButton";
}

proc mayaUsdTranslatorImport_updateContextOptionButton(string $contextLabel, string $jobContext)
{
    string $buttonName = mayaUsdTranslatorImport_getContextOptionsButtonName($jobContext);
    iconTextButton -edit -visible `mayaUsdTranslatorImport_isContextOptionsUISupported($contextLabel)` $buttonName;
}

proc string[] mayaUsdTranslatorImport_getContextLabels()
{
    // Make sure they are in alphabetical order when creatign the UI,
    // otherwise they are in a semi-random order, probably based on plugin
    // load order or other internal details.
    string $contextLabels[] = `mayaUSDListJobContexts -import`;
    return `sort $contextLabels`;
}

global string $_mayaUsdTranslatorImport_contextLabel;
global string $_mayaUsdTranslatorImport_parent;

proc mayaUsdTranslatorImport_createContextOptions(string $parent, string $collapsedSections[])
{
    // Create the UI for each of the plugin context configuration.
    string $contextLabels[] = mayaUsdTranslatorImport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    // We need to cache the parent UI container and displayed section names
    // so that the job context options UI callback can call mayaUsdTranslatorImport
    // with the correct arguments.
    global string $_mayaUsdTranslatorImport_parent;
    $_mayaUsdTranslatorImport_parent = $parent;

    int $collapse = stringArrayContains("context", $collapsedSections) ? true : false;
    frameLayout
        -label `getMayaUsdString("kImportPluginConfigLbl")`
        -ann `getMayaUsdString("kImportPluginConfigAnn")`
        -collapsable true -collapse $collapse contextFrameLayout;
        separator -style "none";

        // The goal of the layout code below is to have each plugin listed
        // as if it were in a list view. That is we draw a darker background
        // layout within which each plugin is a separate layout separated by
        // a thin 1-pixel spacing.
        //
        // Note: setting the background color of a panel changes the color of
        //       text in the panel. So rather than set the background color of
        //       the columnLayout, we insert thin layouts around the plugin
        //       row. So we insert one on top and bottom and on each side, and
        //       these have a darker color to simulate a border.

        int $width = 400;
        int $rowHeight = 24;
        float $color[3] = { 0.21, 0.21, 0.21 };

        columnLayout
            -width $width -rowSpacing 1 contextCol;

            rowLayout -width $width -height 1 -backgroundColor $color[0] $color[1] $color[2];
            setParent ..;

            for ($contextLabel in $contextLabels) {
                string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
                string $cbName = mayaUsdTranslatorImport_getContextOptionsCheckBoxName($jobContext);
                string $buttonName = mayaUsdTranslatorImport_getContextOptionsButtonName($jobContext);
                string $tooltip = `mayaUSDListJobContexts -importAnnotation $contextLabel`;

                rowLayout
                    -width $width -height $rowHeight
                    -numberOfColumns 5 -adjustableColumn 3
                    -columnAttach 2 "left" 4
                    -columnAttach 3 "left" 4
                    -columnAttach 4 "right" 4
                    -columnAlign5 "left" "left" "left" "right" "right";

                    rowLayout -width 1 -height $rowHeight -backgroundColor $color[0] $color[1] $color[2];
                    setParent ..;

                    // Note: the button must be 2 pixels larger than the image.
                    iconTextButton
                        -image1 "toggle_off"
                        -w 22 -h 16
                        -style "iconOnly"
                        -ann $tooltip -align "left"
                        -labelOffset 2
                        -command ("mayaUsdTranslatorImport_contextOptionsCheckBoxCB(\"" + $jobContext + "\")") $cbName;
                    text -label $contextLabel -ann $tooltip -align "left";
                    iconTextButton
                        -w 16 -h 16 -style "iconAndTextVertical"
                        -image1 "menu_options" -label "" -ann `getMayaUsdString("kImportPluginConfigButtonAnn")`
                        -command ("mayaUsdTranslatorImport_contextOptionsButtonCB(\"" + $contextLabel + "\")") $buttonName;

                    rowLayout -width 2 -height $rowHeight -backgroundColor $color[0] $color[1] $color[2];
                    setParent ..;
                    
                setParent ..;

                rowLayout -width $width -height 1 -backgroundColor $color[0] $color[1] $color[2];
                setParent ..;
            }
        setParent ..; // columnLayout

        // This is to provide some spacing below the last plugin row.
        rowLayout -width $width -height 6;
        setParent ..;

    setParent ..; // frameLayout
}

proc mayaUsdTranslatorImport_enableContextOptions()
{
    // Enable all the UI for each of the plugin context configuration.
    // They will be disabled if necessary by the fill-UI function below.
    
    string $contextLabels[] = mayaUsdTranslatorImport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        string $cbName = mayaUsdTranslatorImport_getContextOptionsCheckBoxName($jobContext);
        string $buttonName = mayaUsdTranslatorImport_getContextOptionsButtonName($jobContext);
        iconTextButton -edit -enable 1 $cbName;
        iconTextButton -edit -enable 1 $buttonName;
    }
}

proc mayaUsdTranslatorImport_fillOptionsUIForcedByContextOptions()
{
    // Fill all the UI for all options based on the choices forced
    // by each of the plugin context configuration.
    //
    // Forced options have their corresponding UI disabled since the import
    // plugin now is in control of that option.
    //
    // Note: currently, we have no way to control the order of the import
    //       plugins. If they have conflicting requirements, the conflicting
    //       options will be set to the value set by the last import plugin
    //       that sets those particular options.

    string $contextLabels[] = mayaUsdTranslatorImport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    mayaUsdTranslatorImport_EnableAllControls();

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        mayaUsdTranslatorImport_updateContextOptionButton($contextLabel, $jobContext);
        if (mayaUsdTranslatorImport_isContextOptionsEnabledByUser($jobContext) == 0) {
            //print("Import plugin " + $contextLabel + "(" + $jobContext + ") is off\n");
            continue;
        }

        string $affectedOptions = `mayaUSDListJobContexts -importArguments $contextLabel`;
        if ($affectedOptions != "") {
            // Print affected options to help the user figure out what the import plugin is doing.
            print("Options affected by " + $contextLabel + "(" + $jobContext + "): " + $affectedOptions + "\n");
            mayaUsdTranslatorImport_SetFromOptions($affectedOptions, 0, 0);
        }
    }
}

proc mayaUsdTranslatorImport_fillContextOptionsUI(string $listOfJobContexts)
{
    // Fill the UI for each of the plugin context configuration with the data.

    if (startsWith($listOfJobContexts, "[") && endsWith($listOfJobContexts, "]")) {
        if (size($listOfJobContexts) > 2) {
            $listOfJobContexts = substring($listOfJobContexts, 2, size($listOfJobContexts) - 1);
        } else {
            $listOfJobContexts = "";
        }
    }

    // Note: we verify that the enabled context actually exists. Might be redundant, but
    //       initially the list of enabled context comes from the saved ones from a previous
    //       Maya session and the list of loaded plugins might have changed.
    string $contextLabels[] = mayaUsdTranslatorImport_getContextLabels();
    string $jobContexts[];
    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        if ($jobContext == "")
            continue;
        stringArrayInsertAtIndex(255, $jobContexts, $jobContext);
        mayaUsdTranslatorImport_updateContextOptionButton($contextLabel, $jobContext);
    }

    string $enabledJobContexts[] = stringToStringArray($listOfJobContexts, ",");
    for ($enabledJobContext in $enabledJobContexts) {
        for ($jobContext in $jobContexts) {
            if ($enabledJobContext == $jobContext) {
                string $cbName = mayaUsdTranslatorImport_getContextOptionsCheckBoxName($jobContext);
                iconTextButton -edit -image1 "toggle_on" $cbName;
            }
        }
    }

    mayaUsdTranslatorImport_fillOptionsUIForcedByContextOptions();
}

proc string mayaUsdTranslatorImport_queryContextOptionsUI(string $currentOptions, string $jobContextOptionName)
{
    // Query the UI for each of the plugin context configuration to extract the data.

    string $contextLabels[] = mayaUsdTranslatorImport_getContextLabels();
    if (size($contextLabels) == 0)
        return $currentOptions;

    string $enabledJobContexts[];

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        if ($jobContext == "")
            continue;
        if (mayaUsdTranslatorImport_isContextOptionsEnabledByUser($jobContext) == 0)
            continue;
        stringArrayInsertAtIndex(255, $enabledJobContexts, $jobContext);
    }

    if (size($enabledJobContexts) > 0) {
        $currentOptions = $currentOptions + ";" + $jobContextOptionName + "=[" + stringArrayToString($enabledJobContexts, ",") + "]";
    }

    return $currentOptions;
}

global proc mayaUsdTranslatorImport_contextOptionsCheckBoxCB(string $jobContext)
{
    // Callback for the checkbox of each of the plugin context configuration.

    // Note: for now, the design requires that the associated button be enabled.

    string $cbName = mayaUsdTranslatorImport_getContextOptionsCheckBoxName($jobContext);
    string $currentToggle = `iconTextButton -query -image1 $cbName`;
    if ($currentToggle == "toggle_on")
        $currentToggle = "toggle_off";
    else
        $currentToggle = "toggle_on";
    iconTextButton -edit -image1 $currentToggle $cbName;

    mayaUsdTranslatorImport_fillOptionsUIForcedByContextOptions();
}

global proc mayaUsdTranslatorImport_contextOptionsShowImportUI(string $optionsString)
{
    global string $_mayaUsdTranslatorImport_parent;
    global string $_mayaUsdTranslatorImport_contextLabel;

    string $newSettings = `mayaUSDListJobContexts -showImportUI
        $_mayaUsdTranslatorImport_contextLabel $_mayaUsdTranslatorImport_parent $optionsString`;

    string $jobContext = `mayaUSDListJobContexts -jobContext $_mayaUsdTranslatorImport_contextLabel`;
    if ($jobContext == "")
        return;

    if (!mayaUsdTranslatorImport_isContextOptionsEnabledByUser($jobContext))
        return;

    // Fill the settings UI with the options from the import options UI.
    mayaUsdTranslatorImport(
        $_mayaUsdTranslatorImport_parent,
        "fill",
        $newSettings,
        "mayaUsdTranslatorImport_contextOptionsShowImportUI");
}

global proc mayaUsdTranslatorImport_contextOptionsButtonCB(string $contextLabel)
{
    // Callback for the "options" button of each of the plugin context configuration.
    // Show the options dialog for the import plugin.
    global string $_mayaUsdTranslatorImport_parent;
    global string $_mayaUsdTranslatorImport_contextLabel;

    $_mayaUsdTranslatorImport_contextLabel = $contextLabel;

    // To show the opitons UI, we need to pass it the current set of options,
    // so we call the main entry-point in "query" mode with a callback that
    // will receive the settings and will show the UI.
    mayaUsdTranslatorImport(
        $_mayaUsdTranslatorImport_parent,
        "query",
        "",
        "mayaUsdTranslatorImport_contextOptionsShowImportUI");
}


proc mayaUsdTranslatorImport_hideInfo()
{
    if (`rowLayout -exists mayaUsd_NBPrimsInScopeRL`) 
    {
        rowLayout -edit -visible false mayaUsd_NBPrimsInScopeRL;
        rowLayout -edit -visible false mayaUsd_NBSwitchedVariantsRL;

        text -edit -label "---" mayaUsd_NBPrimsInScopeLabel;
        text -edit -label "---" mayaUsd_NBSwitchedVariantsLabel;
    }
}

proc mayaUsdTranslatorImport_showInfo()
{
    if (`rowLayout -exists mayaUsd_NBPrimsInScopeRL`) 
    {
        int $pc = `usdImportDialog -q -primCount`;
        int $swc = `usdImportDialog -q -switchedVariantCount`;

        text -edit -label $pc mayaUsd_NBPrimsInScopeLabel;
        text -edit -label $swc mayaUsd_NBSwitchedVariantsLabel;

        rowLayout -edit -visible true mayaUsd_NBPrimsInScopeRL;
        rowLayout -edit -visible true mayaUsd_NBSwitchedVariantsRL;
    }
}

global proc mayaUsdTranslatorImport_EnableAllControls() {
    // Restore all controls to fully interactive:
    checkBoxGrp -e -en 1 mayaUsdTranslator_MaterialsCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_ImportInstancesCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_AnimDataCheckBox;
    checkBoxGrp -e -en 1 mayaUsdTranslator_CustomFrameRangeCheckBox;

    optionMenuGrp -e -en 1 mayaUsdTranslator_MaterialsConversionMenu;
    optionMenuGrp -e -en 1 mayaUsdTranslator_RelativeTexturesMenu;

    intFieldGrp -e -en1 1 -en2 1 mayaUsdTranslator_CustomFrameRange;

    mayaUsdTranslatorImport_enableContextOptions();
}

global proc mayaUsdTranslatorImport_SetFromOptions(string $currentOptions, int $enable, int $processJobContext) {
    string $optionList[];
    string $optionBreakDown[];
    string $jobContext = "";
    int $index;

    if (size($currentOptions) > 0) {
        tokenize($currentOptions, ";", $optionList);
        for ($index = 0; $index < size($optionList); $index++) {
            tokenize($optionList[$index], "=", $optionBreakDown);
            if ($optionBreakDown[0] == "shadingMode") {
                mayaUsdTranslatorImport_SetMaterialsCheckBox($optionBreakDown[1], $enable, "mayaUsdTranslator_MaterialsCheckBox");
            } else if ($optionBreakDown[0] == "jobContext" && $processJobContext == 1) {
                // Must be kept last, and only done on main options:
                $jobContext = $optionBreakDown[1];
            } else if ($optionBreakDown[0] == "preferredMaterial") {
                mayaUsdTranslatorImport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "mayaUsdTranslator_MaterialsConversionMenu");
            } else if ($optionBreakDown[0] == "importRelativeTextures") {
                mayaUsdTranslatorImport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "mayaUsdTranslator_RelativeTexturesMenu");
            } else if ($optionBreakDown[0] == "readAnimData") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_AnimDataCheckBox");
                mayaUsdTranslatorImport_AnimationCB();
            } else if ($optionBreakDown[0] == "startTime") {
                int $startTime = $optionBreakDown[1];
                intFieldGrp -e -value1 $startTime -en1 $enable mayaUsdTranslator_CustomFrameRange;
            } else if ($optionBreakDown[0] == "endTime") {
                int $endTime = $optionBreakDown[1];
                intFieldGrp -e -value2 $endTime -en2 $enable mayaUsdTranslator_CustomFrameRange;
            } else if ($optionBreakDown[0] == "useCustomFrameRange") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_CustomFrameRangeCheckBox");
                mayaUsdTranslatorImport_AnimationCB();
            } else if ($optionBreakDown[0] == "importInstances") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_ImportInstancesCheckBox");
            } else if ($optionBreakDown[0] == "importUSDZTextures") {
                mayaUsdTranslatorImport_SetCheckBoxGrp($optionBreakDown[1], $enable, "mayaUsdTranslator_ImportUSDZTexturesCheckBox");
            }
        }
        if ($jobContext != "" && $processJobContext == 1) {
            mayaUsdTranslatorImport_fillContextOptionsUI($jobContext);
        }
    }
}


////////////////////////////////////////////////////////////////////////////
//
// Import UI entry point

global proc int mayaUsdTranslatorImport (string $parent,
                                 string $action,
                                 string $initialSettings,
                                 string $resultCallback )
//
//  Description:
//    This script posts the mayaUsd import file translator options.
//    The optionsString is of the form:
//    varName1=value1;varName2=value2;...
//
//  Parameters:
//    $parent - the elf parent layout for this options layout. It is
//            always a scrollLayout.
//    $action - the action that is to be performed with this invocation of this proc.
//        Valid options are:
//        "query" - construct the options string and pass it to the resultCallback.
//        "post" - post all the elf controls and fill the UI with the given settings.
//        "fill" - fill the UI with the given settings.
//        "fileselected" - a file was selected in the import dialog.
//    $initialSettings - the current options string in effect at the time this script is invoked.
//    $resultCallback - This is the proc to be called with the result string.
//            resultCallback ( string $optionsString )
//
//    Returns:
//        1 if successful.
//        0 otherwise.
//
{
    int $bResult = 0;
    int $cw1 = 180;
    int $cw2 = 300;
    int $bw = 125;
    int $forEditAsMaya = ($resultCallback == "mayaUsdMenu_EditAsMayaDataOptionsCallback") ? 1 : 0;

    if ($action == "post") {
        setParent $parent;

        int $columnSpacing = ($forEditAsMaya ? 12 : 5);
        string $menuAnnotation = ($forEditAsMaya ? "EditAsMayaOptions" : "ImportOptions");
        columnLayout -adj true -rs $columnSpacing -ann $menuAnnotation  mayaUsdTranslator_OptsCol;

        if (`exists usdImportDialog` && !$forEditAsMaya)
        {
            rowLayout -numberOfColumns 4 -cw 1 $cw1 -cat 1 "right" 0;
                text -label `getMayaUsdString("kImportScopeVariantsLbl")`
                    -al "right"
                    -sbm `getMayaUsdString("kImportScopeVariantsSbm")`
                    -ann `getMayaUsdString("kImportScopeVariantsAnn")`
                ;
                textField -ed false -nbg true -text `getMayaUsdString("kImportSelectFileTxt")` -w $cw2 mayaUsdTranslator_SelectFileField;
                button -label `getMayaUsdString("kImportHierarchyViewLbl")` -c ("mayaUsdTranslatorImport_ViewHierCB\"" + $parent + "\"") mayaUsdTranslator_ViewHierBtn;
                iconTextButton -w 32 -h 32 -command ("mayaUsdTranslatorImport_ClearImportData;") 
                    -style "iconAndTextVertical" -image1 "refresh.png" -label "" mayaUsdTranslator_ResetBtn;

                // Hide the button by default.
                button -e -visible false -w 1 mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible false mayaUsdTranslator_ResetBtn;
            setParent ..;

            rowLayout -numberOfColumns 3 -cw 1 $cw1 -cat 1 "right" 0 -cal 1 "right" mayaUsd_NBPrimsInScopeRL;
                text -label "";
                text -label `getMayaUsdString("kImportPrimsInScopeNumLbl")`;
                text -label "---" mayaUsd_NBPrimsInScopeLabel;
            setParent ..;
            rowLayout -numberOfColumns 3 -cw 1 $cw1 -cat 1 "right" 0 -cal 1 "right" mayaUsd_NBSwitchedVariantsRL;
                text -label "";
                text -label `getMayaUsdString("kImportVariantsInScopeNumLbl")`;
                text -label "---" mayaUsd_NBSwitchedVariantsLabel;
            setParent ..;
            // We'll start off with the info UI hidden and only make it visible when we come out of 
            // the Hierarchy View the first time.
            mayaUsdTranslatorImport_hideInfo();
        }

        mayaUsdTranslatorImport_createContextOptions($parent, {});

//        checkBoxGrp -label "Load Payloads: " -cw 1 $cw1 mayaUsdTranslator_LoadPayloadsCheckBox;
//
//        optionMenuGrp -label "Coordinate System: " -cw 1 $cw1 mayaUsdTranslator_CoordSystemOptionMenu;
//            menuItem -label "Local space";
//            menuItem -label "Object space";
//            menuItem -label "World space";
//        optionMenuGrp -e -sl 1 mayaUsdTranslator_CoordSystemOptionMenu;
        frameLayout -label `getMayaUsdString("kImportMaterialsLbl")` materialsFrameLayout;
            separator -style "none";
            checkBoxGrp -label "" -label1 `getMayaUsdString("kImportMaterialsLbl")` -cw 1 $cw1 -value1 1 -ann `getMayaUsdString("kImportMaterialsAnn")` -cc ("mayaUsdTranslatorImport_MaterialsCB") mayaUsdTranslator_MaterialsCheckBox;

            string $apiString = `about -q -apiVersion`;
            $apiString = `substring $apiString 1 4`;
            optionMenuGrp -l `getMayaUsdString("kImportMaterialConvLbl")` -cw 1 $cw1 -ann `getMayaUsdString("kImportMaterialConvAnn")` mayaUsdTranslator_MaterialsConversionMenu;
            menuItem -l `getMayaUsdString("kImportMaterialConvNoneLbl")` -ann "none";
            if ((int)$apiString >= 2020) {
                menuItem -l `getMayaUsdString("kImportMaterialConvSSLbl")` -ann "standardSurface";
            }
            menuItem -l `getMayaUsdString("kImportMaterialConvLamLbl")` -ann "lambert";
            menuItem -l `getMayaUsdString("kImportMaterialConvPSLbl")` -ann "usdPreviewSurface";
            menuItem -l `getMayaUsdString("kImportMaterialConvBlnLbl")` -ann "blinn";
            menuItem -l `getMayaUsdString("kImportMaterialConvPhgLbl")` -ann "phong";

            optionMenuGrp -l `getMayaUsdString("kImportRelativeTexturesLbl")` -cw 1 $cw1 -ann `getMayaUsdString("kImportRelativeTexturesAnn")` mayaUsdTranslator_RelativeTexturesMenu;
            string $lbl;
            $lbl = getMayaUsdString("kImportRelativeTexturesAutomaticLbl");
            menuItem -l $lbl -ann $lbl;
            $lbl = getMayaUsdString("kImportRelativeTexturesAbsoluteLbl");
            menuItem -l $lbl -ann $lbl;
            $lbl = getMayaUsdString("kImportRelativeTexturesRelativeLbl");
            menuItem -l $lbl -ann $lbl;

            checkBoxGrp -label "" -label1 `getMayaUsdString("kImportUSDZTxtLbl")` -cw 1 $cw1 -ann `getMayaUsdString("kImportUSDZTxtAnn")` mayaUsdTranslator_ImportUSDZTexturesCheckBox;

            separator -style "none";
        setParent ..;

//        optionMenuGrp -label "Include Metadata: " -cw 1 $cw1 mayaUsdTranslator_IncludeMetadataOptionMenu;
//            menuItem "All";
//            menuItem "None";
//            menuItem "Custom";
//        optionMenuGrp -e -sl 3 mayaUsdTranslator_IncludeMetadataOptionMenu;
//
//        textFieldGrp -label "Specify Fields: " -cw 1 $cw2 -cw 2 150 mayaUsdTranslator_SpecifyFields;
//
//        textFieldGrp -label "Prefix Name: " -cw 1 $cw2 -cw 2 50 mayaUsdTranslator_PrefixName;
//
//        optionMenuGrp -label "Include Custom Attributes: " -cw 1 $cw1 mayaUsdTranslator_IncludeCustomAttribOptionMenu;
//            menuItem "All";
//            menuItem "None";
//            menuItem "Custom";
//        optionMenuGrp -e -sl 2 mayaUsdTranslator_IncludeCustomAttribOptionMenu;

        frameLayout -label "Animation" animationFrameLayout;
            separator -style "none";
            checkBoxGrp -label "" -label1 `getMayaUsdString("kImportAnimationDataLbl")` -cw 1 $cw1 -cc ("mayaUsdTranslatorImport_AnimationCB") mayaUsdTranslator_AnimDataCheckBox;

            checkBoxGrp -label "" -label1 `getMayaUsdString("kImportCustomFrameRangeLbl")` -cw 1 $cw1 -cc ("mayaUsdTranslatorImport_AnimationCB") mayaUsdTranslator_CustomFrameRangeCheckBox;

            intFieldGrp -label `getMayaUsdString("kImportFrameRangeLbl")` -nf 2 -cw 1 $cw1 mayaUsdTranslator_CustomFrameRange;

            if ($forEditAsMaya) {
                checkBoxGrp -edit -visible 0 mayaUsdTranslator_CustomFrameRangeCheckBox;
                intFieldGrp -edit -visible 0 mayaUsdTranslator_CustomFrameRange;
            }
            separator -style "none";
        setParent ..;

        frameLayout -label "Advanced" advancedFrameLayout;
            separator -style "none";
            checkBoxGrp -label "" -label1 `getMayaUsdString("kImportToInstanceOpt")` -cw 1 $cw1 -value1 1 -ann `getMayaUsdString("kImportToInstanceAnn")` mayaUsdTranslator_ImportInstancesCheckBox;
            separator -style "none";
        setParent ..;

        // Now set to current settings.
        mayaUsdTranslatorImport($parent, "fill", $initialSettings, $resultCallback);
        $bResult = 1;

    } else if ($action == "fill") {
        // Set to current settings.
        mayaUsdTranslatorImport_EnableAllControls();
        mayaUsdTranslatorImport_SetFromOptions($initialSettings, 1, 1);
        $bResult = 1;

    } else if ($action == "query") {
        string $currentOptions = "";
        $currentOptions = mayaUsdTranslatorImport_AppendMaterialsFromCheckBoxGrp($currentOptions, "shadingMode", "mayaUsdTranslator_MaterialsCheckBox");
        $currentOptions = mayaUsdTranslatorImport_AppendFromPopup($currentOptions, "preferredMaterial", "mayaUsdTranslator_MaterialsConversionMenu");
        $currentOptions = mayaUsdTranslatorImport_AppendFromPopup($currentOptions, "importRelativeTextures", "mayaUsdTranslator_RelativeTexturesMenu");
        if (!$forEditAsMaya) {
            $currentOptions = mayaUsdTranslatorImport_AppendFromDialog($currentOptions, "primPath", "-primPath");
        }
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "readAnimData", "mayaUsdTranslator_AnimDataCheckBox");
        if (!$forEditAsMaya) {
            $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "useCustomFrameRange", "mayaUsdTranslator_CustomFrameRangeCheckBox");
            $currentOptions = mayaUsdTranslatorImport_AppendFromIntFieldGrp($currentOptions, "startTime", 1, "mayaUsdTranslator_CustomFrameRange");
            $currentOptions = mayaUsdTranslatorImport_AppendFromIntFieldGrp($currentOptions, "endTime", 2, "mayaUsdTranslator_CustomFrameRange");
        }
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "importUSDZTextures", "mayaUsdTranslator_ImportUSDZTexturesCheckBox");
        $currentOptions = mayaUsdTranslatorImport_queryContextOptionsUI($currentOptions, "jobContext");
        $currentOptions = mayaUsdTranslatorImport_AppendFromCheckBoxGrp($currentOptions, "importInstances", "mayaUsdTranslator_ImportInstancesCheckBox");

        eval($resultCallback+" \""+$currentOptions+"\"");
        $bResult = 1;

    } else if ($action == "fileselected") {
        if (`exists usdImportDialog`)
        {
            // Clear out the import data since we have a new selection.
            mayaUsdTranslatorImport_ClearImportData;
        }

        // Test the currently selected file in the import dialog to see if it is
        // a USD file.
        string $filters = `translator -q -f "USD Import"`;
        string $currSel = currentFileDialogSelection();
        int $showBtn = false;
        if (! `filetest -d $currSel`)
        {
            string $ext = `fileExtension $currSel`;
            if (`match $ext $filters` == $ext)
            {
                $showBtn = true;
            }
        }

        if (`textField -exists mayaUsdTranslator_SelectFileField`)
        {
            if ($showBtn)
            {
                // Hide the field (and shrink it) and show the button (which will align with label).
                textField -e -vis false -w 1 mayaUsdTranslator_SelectFileField;
                button -e -visible true -w $bw mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible true -w 32 mayaUsdTranslator_ResetBtn;
            }
            else
            {
                // Show the field and hide the button.
                textField -e -vis true -w $cw2 mayaUsdTranslator_SelectFileField;
                button -e -visible false -w 1 mayaUsdTranslator_ViewHierBtn;
                iconTextButton -e -visible false -w 1 mayaUsdTranslator_ResetBtn;
            }
        }

        $bResult = 1;

    } else {
        $bResult = 0;
    }

    mayaUsdTranslatorImport_AnimationCB();
    return $bResult;
}

global proc mayaUsdTranslatorImport_SetOptionMenuByAnnotation(
        string $ann, int $enable, string $widget) {
    int $index = 1; // 1-based indexing.
    for ($i in `optionMenuGrp -q -itemListLong $widget`) {
        if (`menuItem -q -ann $i` == $ann) {
            optionMenuGrp -e -select $index -en $enable $widget;
            return;
        }

        $index++;
    }
}

global proc mayaUsdTranslatorImport_SetCheckBoxGrp(string $arg, int $enable, string $widget)
{
    checkBoxGrp -e -value1 ($arg != "0") -en $enable $widget;
}

global proc mayaUsdTranslatorImport_SetMaterialsCheckBox(string $arg, int $enable, string $widget)
{
    checkBoxGrp -e -value1 ($arg != "[[none,default]]") -en $enable $widget;
    mayaUsdTranslatorImport_MaterialsCB();
}

global proc mayaUsdTranslatorImport_AnimationCB()
{
    int $forEditAsMaya = (`columnLayout -q -ann mayaUsdTranslator_OptsCol` == "EditAsMayaOptions") ? 1 : 0;
    if ((`checkBoxGrp -q -value1 mayaUsdTranslator_AnimDataCheckBox` == 1) && !$forEditAsMaya) {
        checkBoxGrp -e -en true mayaUsdTranslator_CustomFrameRangeCheckBox;
        int $vis = (`checkBoxGrp -q -value1 mayaUsdTranslator_CustomFrameRangeCheckBox` == 1);
        intFieldGrp -e -en $vis mayaUsdTranslator_CustomFrameRange;
    } else {
        checkBoxGrp -e -en false mayaUsdTranslator_CustomFrameRangeCheckBox;
        intFieldGrp -e -en false mayaUsdTranslator_CustomFrameRange;
    }
}

global proc mayaUsdTranslatorImport_MaterialsCB()
{
    if (`checkBoxGrp -q -value1 mayaUsdTranslator_MaterialsCheckBox` == 1) {
        optionMenuGrp -e -en true mayaUsdTranslator_MaterialsConversionMenu;
        optionMenuGrp -e -en true mayaUsdTranslator_RelativeTexturesMenu;
        checkBoxGrp -e -en true mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    } else {
        optionMenuGrp -e -en false mayaUsdTranslator_MaterialsConversionMenu;
        optionMenuGrp -e -en false mayaUsdTranslator_RelativeTexturesMenu;
        checkBoxGrp -e -en false mayaUsdTranslator_ImportUSDZTexturesCheckBox;
    }
}

global proc string mayaUsdTranslatorImport_AppendFromCheckBoxGrp(string $currentOptions, string $arg, string $widget)
{
    if (`checkBoxGrp -q -value1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=1";
    } else {
        return $currentOptions + ";" + $arg + "=0";
    }
}

global proc string mayaUsdTranslatorImport_AppendMaterialsFromCheckBoxGrp(string $currentOptions, string $arg, string $widget)
{
    if (`checkBoxGrp -q -value1 $widget` == 1) {
        // Here we will return ALL supported import modes. Finer grained control
        // can be found at the script-level:
        string $importers[] = `mayaUSDListShadingModes -import`;
        string $options[];
        for ($importer in $importers) {
            string $option[] = `mayaUSDListShadingModes -io $importer`;
            stringArrayInsertAtIndex(255, $options, "[" + stringArrayToString($option, ",") + "]");
        }
        return $currentOptions + ";" + $arg + "=[" + stringArrayToString($options, ",") + "]";
    } else {
        return $currentOptions + ";" + $arg + "=[[none,default]]";
    }
}

global proc string mayaUsdTranslatorImport_AppendFromPopup(string $currentOptions, string $arg, string $widget) {
    int $index = `optionMenuGrp -q -select $widget` - 1;
    string $allItems[] = `optionMenuGrp -q -itemListLong $widget`;
    string $item = $allItems[$index];
    string $annotation = `menuItem -q -ann $item`;
    return $currentOptions + ";" + $arg + "=" + $annotation;
}

global proc string mayaUsdTranslatorImport_AppendFromIntFieldGrp(string $currentOptions, string $arg, int $index, string $widget)
{
    string $si = ("-value" + $index);
    string $value = `intFieldGrp -q $si $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc string mayaUsdTranslatorImport_AppendFromDialog(string $currentOptions, string $arg, string $flag)
{
    if (`exists usdImportDialog`)
    {
        string $value = `usdImportDialog -q $flag`;
        if (size($value) > 0)
        {
            return $currentOptions + ";" + $arg + "=" + $value;
        }
    }
    return $currentOptions;
}

global proc mayaUsdTranslatorImport_ViewHierCB(string $parent)
{
    string $usdFile = currentFileDialogSelection(); 
    string $result = `usdImportDialog -parentWindow $parent $usdFile`;
    if ("" != $result)
    {
        mayaUsdTranslatorImport_showInfo();
    }

    // If the dialog was cancelled then we will not get a result, but
    // don't clear out the info since nothing should be changed.
}

global proc mayaUsdTranslatorImport_ClearImportData()
{
    usdImportDialog -clearData "";
    mayaUsdTranslatorImport_hideInfo();
}
