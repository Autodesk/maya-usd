// Copyright 2022 Autodesk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

proc register(string $key, string $value) 
{
    registerPluginResource("mayaUsdPlugin", $key, $value);
}

global proc string getMayaUsdString(string $key)
{
    return getPluginResource("mayaUsdPlugin", $key);
}

global proc mayaUSDRegisterStrings()
{
    register("kButtonSave", "Save");
    register("kButtonCancel", "Cancel");
    register("kCreateUsdStageFromFile", "Create USD Stage from File");
    register("kCreateUsdStageFromFileOptions", "Create USD Stage from File Options");
    register("kCreateStageFromFile", "Create Stage from File");
    register("kCreateStage", "Create");
    register("kDefaultPrim", "Default Prim");
    register("kDefaultPrimAnn", "As part of its metadata, each stage can identify a default prim. This is the primitive that is referenced in if you reference in a file.");
    register("kExcludePrimPaths", "Exclude Prim Paths:");
    register("kExcludePrimPathsAnn", "Specify the path of a prim to exclude it from the viewport display. Multiple prim paths must be separated by a comma.");
    register("kExcludePrimPathsSbm", "Specify the path of a prim to exclude it from the viewport display.");
    register("kFileAnn", "Load in a file as the stage source.");
    register("kInvalidSelectionKind", "Invalid Maya Usd selection kind!");
    register("kKinds", "Kinds");
    register("kLabelStage", "Stage");
    register("kLabelStageSource", "Stage Source");
    register("kLabelStageDisplay", "Stage Display");
    register("kLoad", "Load");
    register("kLoadPayloads", "Load Payloads:");
    register("kLoadPayloadsAnn", "When on, loads all prims marked as payloads. When off, all prims marked as payloads and their children are not loaded.");
    register("kLoadPayloadsSbm", "Loads prims marked as payloads");
    register("kMenuAddSublayer", "Add Sublayer");
    register("kMenuAddParentLayer", "Add Parent Layer");
    register("kMenuClear", "Clear");
    register("kMenuRevertToFile", "Revert to File");
    register("kMenuLayerEditor", "USD Layer Editor");
    register("kContextMenuLayerEditor", "USD Layer Editor...");
    register("kMenuLayerEditorAnn", "Organize and edit USD data in layers");
    register("kMenuLoadSublayers", "Load Sublayers...");
    register("kMenuMute", "Mute");
    register("kMenuPrintToScriptEditor", "Print to Script Editor");
    register("kMenuRemove", "Remove");
    register("kMenuSelectPrimsWithSpec", "Select Prims With Spec");
    register("kMenuStageCreateMenuError", "Could not create mayaUSD create menu");
    register("kMenuStageWithNewLayer", "Stage with New Layer");
    register("kMenuStageWithNewLayerAnn", "Create a new, empty USD Stage");
    register("kMenuStageFromFile", "Stage From File...");
    register("kMenuStageFromFileAnn", "Create a USD Stage from an existing USD file");
    register("kMenuStageFromFileOptionsAnn", "Create a USD Stage from an existing USD file options");
    register("kMenuStageSubMenu", "Universal Scene Description (USD)");
    register("kMenuStageSubMenuAnn", "Create a USD stage");
    register("kMenuSaveAs", "Save As...");
    register("kMenuSaveEdits", "Save Edits");
    register("kMenuUnmute", "Unmute");
    register("kPointInstances", "Point Instances");
    register("kPurposeAnn", "Toggle purpose categories on and off to change their visibility in the viewport.");
    register("kPurposeLabel", "Purpose");
    register("kPurposeOption1", "Guide");
    register("kPurposeOption2", "Proxy");
    register("kPurposeOption3", "Render");
    register("kPrimPath", "Prim Path:");
    register("kPrimPathAnn", "Specify the path of a prim to display it alone in the viewport. If a prim path is not specified or a matching prim path is not found, all prims in the stage are displayed.");
    register("kPrimPathSbm", "Specify the path of a prim to display it alone in the viewport.");
    register("kRootLayer", "Root Layer");
    register("kRootLayerAnn", "Identifies the root layer of a stage. If a file path is shown in this field, the root layer is a file on disk. If a layerName is shown in this field, the root layer is an anonymous layer.");
    register("kSaveAndClose", "Save and Close");
    register("kSaveOption1", "Save the Maya scene file and USD files.");
    register("kSaveOption2", "Save all edits (including USD) to the Maya scene file.");
    register("kSaveOption3", "Save the Maya scene file only (USD edits will not be saved).");
    register("kSaveOptionAnn1", "Select this option to save your Maya scene file (.ma, .mb) and your USD files (.usd, .usda, .usdc) to disk respectively.");
    register("kSaveOptionAnn2", "Select this option to save your current Maya session with in-memory USD edits into a Maya scene file on disk (.ma, .mb). Important: any files exceeding the limit of 2 GB cannot be saved.");
    register("kSaveOptionAnn3", "Select this option to ignore all USD edits and save only your Maya scene file (.ma, .mb).");
    register("kSaveOptionAsk", "Ask me");
    register("kSaveOptionAskAnn", "If disabled, the selected USD save operation will always proceed.");
    register("kSaveOptionNoPrompt", "Don't ask me again");
    register("kSaveOptionNoPromptAnn", "You can re-enable this prompt under File|Save Scene Options.");
    register("kSaveOptionTitle", "Save USD Options");
    register("kSaveOptionUnsavedEdits", "You have unsaved USD edits. How would you like to proceed?");
    register("kShareStageShareable", "Shareable");
    register("kShareStageAnn", "Toggle sharable on and off to sandbox your changes and create a new stage");
    register("kShowArrayAttributes", "Show Array Attributes");
    register("kUSDPointInstancesPickMode_PointInstancer", "Point Instancer");
    register("kUSDPointInstancesPickMode_PointInstancerAnn", "Selection mode for all prims set as point instances.");
    register("kUSDPointInstancesPickMode_Instances", "Instances");
    register("kUSDPointInstancesPickMode_InstancesAnn", "Selection mode for prims set as instanceable only.");
    register("kUSDPointInstancesPickMode_Prototypes", "Prototypes");
    register("kUSDPointInstancesPickMode_PrototypesAnn", "Selection mode for prims set as prototypes only.");
    register("kUSDSelectionMode", "USD Selection Mode");
    register("kUSDSelectionModeAnn", "Choose a selection mode to reflect changes when you select prims in the Viewport and Outliner. Note: Default fallback selection mode is by prim.");
    register("kUSDSelectionModeAssemblyAnn", "Selection mode for prims set to assembly kind. Tip: Set assembly kind in the Attribute Editor > Metadata to prims that are part of an important group.");
    register("kUSDSelectionModeComponentAnn", "Selection mode for prims set to component kind. Tip: Set component kind in the Attribute Editor > Metadata to prims that are a collection of assets.");
    register("kUSDSelectionModeCustom", "Selection mode for prims set to ^1s kind.");
    register("kUSDSelectionModeGroupAnn", "Selection mode for prims set to group kind (including prims set to assembly kind). Tip: Set group kind in the Attribute Editor > Metadata to prims that are grouped.");
    register("kUSDSelectionModeModelAnn", "Selection mode for prims in the model hierarchy (including prims set to group, assembly and component kind).");
    register("kUSDSelectionModeNone", "(None)");
    register("kUSDSelectionModeNoneAnn", "Selection mode for prims that have no kind set.");
    register("kUSDSelectionModeSubComponentAnn", "Selection mode for prims set to subcomponent kind. Tip: Set subcomponent kind in the Attribute Editor > Metadata to prims that are an individual asset.");
    register("kTimeAnn", "Edits the current time value of a stage, which corresponds to the animation frame drawn in the viewport. By default, this value connects to Maya's global time node.");
    register("kTipYouCanChooseMultipleFiles", "<b>Tip:</b>  You can choose multiple files.");
    register("kUniversalSceneDescription", "Universal Scene Description");
    register("kUsdFileOptions", "USD File Options");
    register("kUsdOptionsFrameLabel", "Universal Scene Description (USD) Options");
    register("kSaveOption2GBWarning", "<b>Important</b>: per layer, any data exceeding the limit of 2GB will not be saved.");

    // All strings for export dialog:
    register("kExportAnimDataAnn", "Exports Maya animation data as USD time samples.");
    register("kExportAnimDataLbl", "Animation Data: ");
    register("kExportBlendShapesAnn", "Exports Maya Blend Shapes as USD blendshapes. Requires skeletons to be exported as well.");
    register("kExportBlendShapesLbl", "Blend Shapes:");
    register("kExportColorSetsAnn", "Exports Maya Color Sets as USD primvars.");
    register("kExportColorSetsLbl", "Color Sets:");
    register("kExportComponentTagsAnn", "If selected, component tags get exported as USDGeomSubsets. Note: Edges and vertices are unsupported in USD.");
    register("kExportComponentTagsLbl", "Component Tags:");
    register("kExportCurvesAnn", "If selected, curves get exported to USD primTypes NurbsCurves or BasisCurves.");
    register("kExportCurvesLbl", "NURBS Curves:");
    register("kExportDefaultFormatAnn", "Select whether the .usd file is written out in binary or ASCII");
    register("kExportDefaultFormatLbl", ".usd File Format:");
    register("kExportDefaultFormatBinLbl", "Binary");
    register("kExportDefaultFormatAscLbl", "ASCII");
    register("kExportDefaultFormatStatus", "Select whether the .usd file is written out in binary or ASCII. You can save a file in .usdc (binary), or .usda (ASCII) format. Manually entering a file name with an extension overrides the selection in this drop-down menu.");
    register("kExportDisplayColorAnn", "If selected, exports the diffuse color of the geometry's bound shader as a displayColor primvar on the USD mesh.");
    register("kExportDisplayColorLbl", "Display Colors:");
    register("kExportEulerFilterAnn", "Exports the euler angle filtering that was performed in Maya.");
    register("kExportEulerFilterLbl", "Euler Filter:");
    register("kExportFrameAdvancedLbl", "Advanced");
    register("kExportFrameAnimationLbl", "Animation");
    register("kExportFrameGeometryLbl", "Geometry");
    register("kExportFrameMaterialsLbl", "Materials");
    register("kExportFrameOutputLbl", "Output");
    register("kExportFrameRangeBtn", "Use Animation Range");
    register("kExportFrameRangeLbl", "Frame Range Start/End:");
    register("kExportFrameSamplesAnn", "Specifies the value(s) used to multi-sample time frames during animation export. Multiple values separated by a space (-0.1 0.2) are supported.");
    register("kExportFrameSamplesLbl", "Frame Sample:");
    register("kExportFrameStepAnn", "Specifies the increment between USD time sample frames during animation export");
    register("kExportFrameStepLbl", "Frame Step:");
    register("kExportInstancesAnn", "Exports Maya instances as USD instanceable references.");
    register("kExportInstancesLbl", "Instances:");
    register("kExportInstancesFlatLbl", "Flatten");
    register("kExportInstancesRefLbl", "Convert to USD Instanceable References");
    register("kExportJobContextAnn", "Select a loaded plug-in configuration to modify export options");
    register("kExportJobContextLbl", "Plug-in Configuration:");
    register("kExportJobContextNoneLbl", "None");
    register("kExportMaterialsAnn", "Select the material(s) to bind to prims for export. With USD, you can bind multiple materials to prims.");
    register("kExportMaterialsDefaultScopeName", "mtl");
    register("kExportMergeShapesAnn", "Merges Maya transform and shape nodes into a single USD prim.");
    register("kExportMergeShapesLbl", "Merge Transform and\nShape Nodes:");
    register("kExportNamespacesAnn", "By default, namespaces are exported to the USD file in the following format: nameSpaceExample_pPlatonic1");
    register("kExportNamespacesLbl", "Include Namespaces:");
    register("kExportWorldspaceAnn", "Exports the root prims with their worldspace transform instead of their local transform.");
    register("kExportWorldspaceLbl", "Worldspace Roots:");
    register("kExportParentScopeAnn", "Name of the USD scope that is the parent of the exported data.");
    register("kExportParentScopeLbl", "Create USD Parent Scope:");
    register("kExportParentScopePht", "USD Prim Name");
    register("kExportSkelsAnn", "Exports Maya joints as part of a USD skeleton.");
    register("kExportSkelsLbl", "Skeletons:");
    register("kExportSkelsNoneLbl", "None");
    register("kExportSkelsAllLbl", "All (Automatically Create SkelRoots)");
    register("kExportSkelsRootLbl", "Only under SkelRoots");
    register("kExportSkinClustersAnn", "Exports Maya skin clusters as part of a USD skeleton.");
    register("kExportSkinClustersLbl", "Skin Clusters");
    register("kExportStaticSingleSampleAnn", "Converts animated values with a single time sample to be static instead.");
    register("kExportStaticSingleSampleLbl", "Static Single Sample:");
    register("kExportSubdMethodAnn", "Exports the selected subdivision method as a USD uniform attribute.");
    register("kExportSubdMethodLbl", "Subdivision Method:");
    register("kExportSubdMethodCCLbl", "Catmull-Clark");
    register("kExportSubdMethodBiLbl", "Bilinear");
    register("kExportSubdMethodLoLbl", "Loop");
    register("kExportSubdMethodNoLbl", "None (Polygonal Mesh)");
    register("kExportUVSetsAnn", "Exports Maya UV Sets as USD primvars.");
    register("kExportUVSetsLbl", "UV Sets:");
    register("kExportVisibilityAnn", "Exports Maya visibility attributes as USD metadata.");
    register("kExportVisibilityLbl", "Visibility:");

    // All strings for import dialog:
    register("kImportAnimationDataLbl", "Animation Data: ");
    register("kImportCustomFrameRangeLbl", "Custom Frame Range: ");
    register("kImportFrameRangeLbl", "Frame Range Start/End: ");
    register("kImportHierarchyViewLbl", "Hierarchy View");
    register("kImportJobContextAnn", "Select a loaded plug-in configuration to modify import options");
    register("kImportJobContextLbl", "Plug-in Configuration:");
    register("kImportJobContextNoneLbl", "None");
    register("kImportMaterialConvAnn", "Select the preferred conversion method for inbound USD shading data to bind with Maya geometry");
    register("kImportMaterialConvLbl", "Convert to:");
    register("kImportMaterialConvNoneLbl", "No Conversion");
    register("kImportMaterialConvSSLbl","Standard Surface");
    register("kImportMaterialConvLamLbl", "Lambert");
    register("kImportMaterialConvPSLbl", "USD Preview Surface");
    register("kImportMaterialConvBlnLbl", "Blinn");
    register("kImportMaterialConvPhgLbl", "Phong");
    register("kImportMaterialsAnn", "If selected, shading data is extracted from the USD file for import");
    register("kImportMaterialsLbl", "Materials: ");
    register("kImportPrimsInScopeNumLbl", "Total Number of Prims in Scope:");
    register("kImportSelectFileTxt", "Please select a file to enable this option");
    register("kImportScopeVariantsAnn", "Select a USD file and click <strong>Hierarchy View</strong> to build the scope of your import and switch variants.<br><br><strong>Scope</strong>: A USD file consists of prims, the primary container object in USD. Prims can contain any scene element, like meshes, lights, cameras, etc. Use the checkboxes in the <strong>Hierarchy View</strong> to select and deselect prims to build the scope of your import.<br><br><strong>Variant</strong>: A variant is a single, named variation of a variant set. Each variant set is a package of alternatives that users can switch between non-destructively. A variant set has no limits to what it can store. Variants can be used to swap out a material or change the entire hierarchy of an asset. A single prim can have many variants and variant sets, but only one variant from each variant set can be selected for import into Maya.");
    register("kImportScopeVariantsLbl", "Scope and Variants: ");
    register("kImportScopeVariantsSbm", "Select a USD file and click Hierarchy View to open the Hierarchy View window. This window lets you toggle prim checkboxes and non-destructively switch between variants to build the scope of your import.");
    register("kImportToInstanceAnn", "Converts instanced prims to Maya instances. Instanced prims share parts of\nthe USD scenegraph through instancing. Each instanced prim is associated\nwith a master prim that serves as the root of the scenegraph. This hierarchy\nreduces the time needed to load the file. Instanced prims must be manually\ntagged.");
    register("kImportToInstanceLbl", "Instanced Prims: ");
    register("kImportToInstanceOpt", "Convert to Instances");
    register("kImportUSDZTxtAnn", "When a .usdz file is chosen and this is selected, .usdz texture files are imported and copied to new files on disk. To locate these files, navigate to the current Maya workspace /sourceimages directory.");
    register("kImportUSDZTxtLbl", "USDZ Texture Import: ");
    register("kImportVariantsInScopeNumLbl", "Variants Switched in Scope:");
    register("kMayaDiscardEdits", "Discard Maya Edits");
    register("kMayaRefDiscardEdits", "Cancel Editing as Maya Data");
    register("kMayaRefDuplicateAsUsdData", "Duplicate As USD Data");
    register("kMayaRefDuplicateAsUsdDataDiv", "Stages");
    register("kMayaRefDuplicateAsUsdDataOptions", "Options...");

    // Register the strings from the python equivalent register function.
    // Note: the strings from both the MEL and python register can be loaded
    //       by either MEL or python. They all get registered together under
    //       the 'mayaUsdPlugin' plugin.
    python("import mayaUSDRegisterStrings; mayaUSDRegisterStrings.mayaUSDRegisterStrings()");

    // Register the strings from the MayaUsd Lib.
    mayaUsdLibRegisterStrings();
    python("import mayaUsdLibRegisterStrings; mayaUsdLibRegisterStrings.mayaUsdLibRegisterStrings()");

    // load any localized resources
    loadPluginLanguageResources("mayaUsdPlugin", "mayaUsdPlugin.pres.mel");
}
