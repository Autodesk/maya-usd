// Copyright 2020 Autodesk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///////////////////////////////////////////////////////////////////////////////
// globals
// variable used to keep track of created menus
global string $gMayaUsdCreateSubMenu = "";
global string $gMayaUsdOpenUsdLayerEditorMenuItem = "";

///////////////////////////////////////////////////////////////////////////////
// findDividerByLabel
// search a menu for a divider by its (localized) label
proc string findDividerByLabel(string $menuName, string $label) {
    $allMenuItems = `menu -q -itemArray $menuName`;
    for ($menuItem in $allMenuItems) {
        if (`menuItem -q -divider $menuItem`) {
            if ($label == `menuItem -q -dividerLabel $menuItem`) {
                return $menuItem;
            }
        }
    }
    return "";
}

///////////////////////////////////////////////////////////////////////////////
// findMenuByName
// search for a menu item by its (localized) label
// see findMenuByName for dividers
proc string findMenuByName(string $menuName, string $label) {
    $allMenuItems = `menu -q -itemArray $menuName`;
    for ($menuItem in $allMenuItems) {
        if ($label == `menuItem -q -label $menuItem`) {
            return $menuItem;
        }
    }
    return "";
}

///////////////////////////////////////////////////////////////////////////////
// addMenuCallback
// safely add a post menu callback to a menu
proc addMenuCallback(string $menuName, string $cmd) {
    string $existingCallbacks = `menu -q -pmc $menuName`;
    // append the callback
    menu -e -pmc ($existingCallbacks + ";" + $cmd + ";") $menuName;
}

///////////////////////////////////////////////////////////////////////////////
// removeMenuCallback
// safely remove a post menu callback to a menu
proc removeMenuCallback(string $menuName, string $cmd) {
    string $existingCallbacks = `menu -q -pmc $menuName`;
    // remove our callback from the string of callbacks
    string $newCallbacks =
        `substitute (";"+$cmd+".*;") $existingCallbacks ""`;
    menu -e -pmc $newCallbacks $menuName;

}

///////////////////////////////////////////////////////////////////////////////
// initRuntimeCommands
// create all the runtime commands we'll use and the user can map to hotkeys
proc initRuntimeCommands() {
    if (!`runTimeCommand -exists mayaUsdCreateStageWithNewLayer`) {
        runTimeCommand -default true
            -label `getMayaUsdString("kMenuStageWithNewLayer")`
            -annotation `getMayaUsdString("kMenuStageWithNewLayerAnn")`
            -category "Menu items.Maya USD"
            -command "python(\"import mayaUsd_createStageWithNewLayer; mayaUsd_createStageWithNewLayer.createStageWithNewLayer()\")"
            -image "USD_stage.png"
            mayaUsdCreateStageWithNewLayer;
    }

    if (!`runTimeCommand -exists mayaUsdCreateStageFromFile`) {
        runTimeCommand -default true
            -label `getMayaUsdString("kMenuStageFromFile")`
            -annotation `getMayaUsdString("kMenuStageFromFileAnn")`
            -category   "Menu items.Maya USD"
            -command    "mayaUsd_createStageFromFile"
            -image      "USD_stage.png"
            mayaUsdCreateStageFromFile;
    }

    if (!`runTimeCommand -exists mayaUsdCreateStageFromFileOptions`) {
        runTimeCommand -default true
            -annotation `getMayaUsdString("kMenuStageFromFileOptionsAnn")`
            -category   "Menu items.Maya USD"
            -command    "mayaUsd_createStageFromFileOptions"
            mayaUsdCreateStageFromFileOptions;
    }    

    if (`exists mayaUsdLayerEditorWindow`) {
        if (!`runTimeCommand -exists mayaUsdOpenUsdLayerEditor`) {
            runTimeCommand -default true
                -label 		`getMayaUsdString("kMenuLayerEditor")`
                -annotation `getMayaUsdString("kMenuLayerEditorAnn")`
                -category   "Menu items.Common.Windows.General Editors"
                -command 	"mayaUsdLayerEditorWindow mayaUsdLayerEditor"
                -image		"USD_generic.png"
                mayaUsdOpenUsdLayerEditor;
        }
    }

    source "mayaUsd_createStageFromFile.mel";
    source "mayaUsd_layerEditorFileDialogs.mel";
}

///////////////////////////////////////////////////////////////////////////////
// getMayaMajorVersion
// this is used to get the "new feature" highlight 
proc string getMayaMajorVersion() {
    string $version = `about -apiVersion`;
    return `substring $version 1 4`;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_createMenuCallback
// setup the items in Maya's "Create" menu
global proc mayaUsdMenu_createMenuCallback() {
    global string $gMayaUsdCreateSubMenu;

    if ($gMayaUsdCreateSubMenu == "") {    
        global string $gMainCreateMenu; // maya's create menu

        string $mayaVersion = getMayaMajorVersion();
        // find the insertion point, after the Scene Management separator
        $sceneManagementDivider = findDividerByLabel($gMainCreateMenu, uiRes("m_ModCreateMenu.kCreateSceneMgt"));
        if ($sceneManagementDivider != "") {
            string $subMenuLabel = `getMayaUsdString("kMenuStageSubMenu")`;
            string $subMenuAnn   = `getMayaUsdString("kMenuStageSubMenuAnn")`;
            $gMayaUsdCreateSubMenu = `menuItem -subMenu true -insertAfter $sceneManagementDivider -tearOff true
                -label $subMenuLabel
                -annotation $subMenuAnn
                -image "USD_generic.png"
                -version $mayaVersion`;
            menuItem -runTimeCommand mayaUsdCreateStageWithNewLayer;
            menuItem -runTimeCommand mayaUsdCreateStageFromFile;
            menuItem -runTimeCommand mayaUsdCreateStageFromFileOptions -optionBox true;
        } else {
            error `getMayaUsdString("kMenuStageCreateMenuError")`;
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_windowMenuCallback
// setup the items in Maya's "Window" menu
global proc mayaUsdMenu_windowMenuCallback() {
    global string $gMainWindowMenu;
    string $GeneralEditorSubMenu = findMenuByName($gMainWindowMenu, uiRes("m_WindowMenu.kGeneralEditorsLabel"));
    addMenuCallback($GeneralEditorSubMenu, "mayaUsdMenu_generalEditorsMenuCallback");
    
    removeMenuCallback(`setParent -q -menu`, "mayaUsdMenu_windowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_windowMenuCallback
// setup the items in Maya's "Window->General Editors" menu
global proc mayaUsdMenu_generalEditorsMenuCallback() {
    if (`exists mayaUsdLayerEditorWindow` && !(`menuItem -query -exists wmUsdLayerEditorMenuitem`))
    {
        string $mayaVersion = getMayaMajorVersion();
        global string $gMayaUsdOpenUsdLayerEditorMenuItem;
        $gMayaUsdOpenUsdLayerEditorMenuItem = `menuItem
            -insertAfter wmNamespaceEditor 
            -enableCommandRepeat false
            -version $mayaVersion
            -runTimeCommand mayaUsdOpenUsdLayerEditor
            wmUsdLayerEditorMenuitem`;
    }
    removeMenuCallback(`setParent -q -menu`, "mayaUsdMenu_generalEditorsMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// initCreateMenu
// setup the items in Maya's "Create" menu
proc initCreateMenu() {
    global string $gMainCreateMenu; // maya's create menu
    addMenuCallback($gMainCreateMenu, "mayaUsdMenu_createMenuCallback()");
    global string $gMainWindowMenu;
    addMenuCallback($gMainWindowMenu, "mayaUsdMenu_windowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// termCreateMenu
// destroys the items in Maya's "Create" menu
proc termCreateMenu() {
    global string $gMainCreateMenu; // maya's create menu
    global string $gMayaUsdCreateSubMenu;
    if ($gMayaUsdCreateSubMenu != "") {
        deleteUI -mi $gMayaUsdCreateSubMenu;
        $gMayaUsdCreateSubMenu = "";
    }
    global string $gMayaUsdOpenUsdLayerEditorMenuItem;
    if ($gMayaUsdOpenUsdLayerEditorMenuItem != "") {
        deleteUI -mi $gMayaUsdOpenUsdLayerEditorMenuItem;
    }
}


///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_loadui
// main entry point on plugin load
global proc mayaUsdMenu_loadui() {
    
    initRuntimeCommands();
    initCreateMenu();
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_unloadui
// main entry point on plugin unload
global proc mayaUsdMenu_unloadui() {
    termCreateMenu();
}

///////////////////////////////////////////////////////////////////////////////
// menu for layer editor
// 
proc string makeCommand(string $panelName, string $command) {
    return "mayaUsdLayerEditorWindow -edit -" + $command + " " + $panelName + ";";
}

global proc mayaUsdMenu_layerEditorContextMenu(string $panelName) {

    if (!`exists mayaUsdLayerEditorWindow`) {
        return;
    }

    int $invalidLayer = `mayaUsdLayerEditorWindow -q -isInvalidLayer $panelName`;
    string $cmd;

    if ($invalidLayer) {
        $cmd = makeCommand($panelName, "removeSubLayer");
        menuItem -label `getMayaUsdString("kMenuRemove")` -c $cmd;
        return; // that's all we can support on invalid layers
    }

    int $isSessionLayer = `mayaUsdLayerEditorWindow -q -isSessionLayer $panelName`;
    int $isAnonymousLayer = `mayaUsdLayerEditorWindow -q -isAnonymousLayer $panelName`;
    int $needsSaving = `mayaUsdLayerEditorWindow -q -layerNeedsSaving $panelName`;
    int $singleSelect = `mayaUsdLayerEditorWindow -q -selectionLength $panelName` == 1;  
    int $appearsMuted = `mayaUsdLayerEditorWindow -q -layerAppearsMuted $panelName`;
    int $isSubLayer = `mayaUsdLayerEditorWindow -q -isSubLayer $panelName`;
    int $isMuted = `mayaUsdLayerEditorWindow -q -layerIsMuted $panelName`;
    
    string $label;
    int $enabled;

    if (!$isSessionLayer) {
        if ($isAnonymousLayer)
            $label = getMayaUsdString("kMenuSaveAs");
        else 
            $label = getMayaUsdString("kMenuSaveEdits");
        $enabled = $singleSelect && $needsSaving;
        $cmd = makeCommand($panelName, "saveEdits");
        menuItem -label $label -enable $enabled -c $cmd;
        

    }

    if (!$isAnonymousLayer) {
        $label = getMayaUsdString("kMenuRevertToFile");
        $cmd = makeCommand($panelName, "discardEdits");
        menuItem -label $label -c $cmd;
    }    

    menuItem -divider 1;

    $label = getMayaUsdString("kMenuAddSublayer");
    $cmd = makeCommand($panelName, "addAnonymousSublayer");
    $enabled = $appearsMuted == 0;
    menuItem -label $label -enable $enabled -c $cmd;

    $label = getMayaUsdString("kMenuAddParentLayer");
    $cmd = makeCommand($panelName, "addParentLayer");
    $enabled = $isSubLayer && $appearsMuted == 0;
    menuItem -label $label -enable $enabled -c $cmd;

    $label = getMayaUsdString("kMenuLoadSublayers");
    $cmd = makeCommand($panelName, "loadSubLayers");
    $enabled = $singleSelect && !$appearsMuted;
    menuItem -label $label -enable $enabled -c $cmd;

    menuItem -divider 1;
    
    if ($isSubLayer) {
        if ($isMuted) 
            $label = getMayaUsdString("kMenuUnmute");
        else
            $label = getMayaUsdString("kMenuMute");
        $cmd = makeCommand($panelName, "muteLayer");
        $enabled = 1;    	
        menuItem -label $label -enable $enabled -c $cmd;
    }

    $label = getMayaUsdString("kMenuPrintToScriptEditor");
    $cmd = makeCommand($panelName, "printLayer");
    $enabled = 1;
    menuItem -label $label -enable $enabled -c $cmd;

    menuItem -divider 1;

    $label = getMayaUsdString("kMenuSelectPrimsWithSpec");
    $cmd = makeCommand($panelName, "selectPrimsWithSpec");
    $enabled = 1;
    menuItem -label $label -enable $enabled -c $cmd;

    // if we add any more menus, add a divider
    if ($isSubLayer || !$isAnonymousLayer) 
        menuItem -divider 1;

    if ($isSubLayer) {
        $label = getMayaUsdString("kMenuRemove");
        $cmd = makeCommand($panelName, "removeSubLayer");
        $enabled = 1;
        menuItem -label $label -enable $enabled -c $cmd;
    }


    $label = getMayaUsdString("kMenuClear");
    $cmd = makeCommand($panelName, "clearLayer");
    $enabled = 1;
    menuItem -label $label -enable $enabled -c $cmd;
}

