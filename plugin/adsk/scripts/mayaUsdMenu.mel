// Copyright 2022 Autodesk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///////////////////////////////////////////////////////////////////////////////
// globals
// variable used to keep track of created menus
global string $gMayaUsdCreateSubMenu = "";
global string $gMayaUsdOpenUsdLayerEditorMenuItem = "";
global string $gMayaUsdSelectMenuDivider = "";
global string $gMayaUsdSelectModeSubMenu = "";

///////////////////////////////////////////////////////////////////////////////
// findDividerByLabel
// search a menu for a divider by its (localized) label
proc string findDividerByLabel(string $menuName, string $label) {
    $allMenuItems = `menu -q -itemArray $menuName`;
    for ($menuItem in $allMenuItems) {
        if (`menuItem -q -divider $menuItem`) {
            if ($label == `menuItem -q -dividerLabel $menuItem`) {
                return $menuItem;
            }
        }
    }
    return "";
}

///////////////////////////////////////////////////////////////////////////////
// findMenuByName
// search for a menu item by its (localized) label
// see findMenuByName for dividers
proc string findMenuByName(string $menuName, string $label) {
    $allMenuItems = `menu -q -itemArray $menuName`;
    for ($menuItem in $allMenuItems) {
        if ($label == `menuItem -q -label $menuItem`) {
            return $menuItem;
        }
    }
    return "";
}

///////////////////////////////////////////////////////////////////////////////
// addMenuCallback
// safely add a post menu callback to a menu
proc addMenuCallback(string $menuName, string $cmd) {
    string $existingCallbacks = `menu -q -pmc $menuName`;
    // append the callback
    menu -e -pmc ($existingCallbacks + ";" + $cmd + ";") $menuName;
}

///////////////////////////////////////////////////////////////////////////////
// removeMenuCallback
// safely remove a post menu callback to a menu
proc removeMenuCallback(string $menuName, string $cmd) {
    string $existingCallbacks = `menu -q -pmc $menuName`;
    // remove our callback from the string of callbacks
    string $newCallbacks =
        `substitute (";"+$cmd+".*;") $existingCallbacks ""`;
    menu -e -pmc $newCallbacks $menuName;

}

///////////////////////////////////////////////////////////////////////////////
// findAEMenu
// Helper function to find attribute editor menu.
proc string findAEMenu(string $menuLabel)
{
    global string $gAEMenuBarLayoutName;

    string $fp = `menuBarLayout -q -fullPathName $gAEMenuBarLayoutName`;
    string $kids[] = `menuBarLayout -q -ma $gAEMenuBarLayoutName`;
    for ($menu in $kids)
    {
        string $fpMenu = $fp + "|" + $menu;
        if ($menuLabel == `menu -q -label $fpMenu`) {
            string $existingCallbacks = `menu -q -pmc $fpMenu`;
            return $fpMenu;
        }
    }
    return "";
}

///////////////////////////////////////////////////////////////////////////////
// mayaUSD_setSelectionKind
// Helper function to set the selection kind mode
global proc mayaUSD_setSelectionKind(string $kind) {
    optionVar -stringValue "mayaUsd_SelectionKind" $kind;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUSD_getSelectionKind
// Helper function to get the selection kind mode
proc string mayaUSD_getSelectionKind() {
    string $selectionKind = "";
    if(`optionVar -exists "mayaUsd_SelectionKind"`) {
        $selectionKind = `optionVar -q "mayaUsd_SelectionKind"`;
    }
    return $selectionKind;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUSD_setPointInstancesPickMode
// Helper function to set the point instances pick mode.
global proc mayaUSD_setPointInstancesPickMode(string $mode) {
    optionVar -stringValue "mayaUsd_PointInstancesPickMode" $mode;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUSD_getPointInstancesPickMode
// Helper function to get the point instances pick mode.
proc string mayaUSD_getPointInstancesPickMode() {
    string $mode = "";
    if (`optionVar -exists "mayaUsd_PointInstancesPickMode"`) {
        $mode = `optionVar -q "mayaUsd_PointInstancesPickMode"`;
    }
    return $mode;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUSD_isSelectionKindValid
// return true if the current selection kind is valid
proc int mayaUSD_isSelectionKindValid() {
    string $allKinds[] = `python "from pxr import Kind; Kind.Registry.GetAllKinds()"`;

    string $currentKind = mayaUSD_getSelectionKind();
    if($currentKind != "") {
        $index = stringArrayFind($currentKind, 0, $allKinds);
        return $index != -1;
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////////
// initRuntimeCommands
// create all the runtime commands we'll use and the user can map to hotkeys
proc initRuntimeCommands() {
    if (!`runTimeCommand -exists mayaUsdCreateStageWithNewLayer`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label `getMayaUsdString("kMenuStageWithNewLayer")`
            -annotation `getMayaUsdString("kMenuStageWithNewLayerAnn")`
            -category "Menu items.Maya USD"
            -command "python(\"import mayaUsd_createStageWithNewLayer; mayaUsd_createStageWithNewLayer.createStageWithNewLayer()\")"
            -image "USD_stage.png"
            mayaUsdCreateStageWithNewLayer;
    }

    if (!`runTimeCommand -exists mayaUsdCreateStageFromFile`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label `getMayaUsdString("kMenuStageFromFile")`
            -annotation `getMayaUsdString("kMenuStageFromFileAnn")`
            -category   "Menu items.Maya USD"
            -command    "mayaUsd_createStageFromFile"
            -image      "USD_stage.png"
            mayaUsdCreateStageFromFile;
    }

    if (!`runTimeCommand -exists mayaUsdCreateStageFromFileOptions`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -annotation `getMayaUsdString("kMenuStageFromFileOptionsAnn")`
            -category   "Menu items.Maya USD"
            -command    "mayaUsd_createStageFromFileOptions"
            mayaUsdCreateStageFromFileOptions;
    }    

    if (`exists mayaUsdLayerEditorWindow`) {
        if (!`runTimeCommand -exists mayaUsdOpenUsdLayerEditor`) {
            runTimeCommand -default true -plugin "mayaUsdPlugin"
                -label 		`getMayaUsdString("kMenuLayerEditor")`
                -annotation `getMayaUsdString("kMenuLayerEditorAnn")`
                -category   "Menu items.Common.Windows.General Editors"
                -command 	"mayaUsdLayerEditorWindow mayaUsdLayerEditor"
                -image		"USD_generic.png"
                mayaUsdOpenUsdLayerEditor;
        }
    }

    //
    // runTimeCommand for selection kind mode
    //
    if (!`runTimeCommand -exists mayaUsdSelectKindNone`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      `getMayaUsdString("kUSDSelectionModeNone")`
            -annotation `getMayaUsdString("kUSDSelectionModeNoneAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"\")")
            mayaUsdSelectKindNone;
    }
    if (!`runTimeCommand -exists mayaUsdSelectKindModel`) {
        string $lbl = capitalizeString(`python "from pxr import Kind; Kind.Tokens.model"`);
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      $lbl
            -annotation `getMayaUsdString("kUSDSelectionModeModelAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"model\")")
            mayaUsdSelectKindModel; 
    }
    if (!`runTimeCommand -exists mayaUsdSelectKindGroup`) {
        string $lbl = capitalizeString(`python "from pxr import Kind; Kind.Tokens.group"`);
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      $lbl
            -annotation `getMayaUsdString("kUSDSelectionModeGroupAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"group\")")
            mayaUsdSelectKindGroup; 
    }
    if (!`runTimeCommand -exists mayaUsdSelectKindAssembly`) {
        string $lbl = capitalizeString(`python "from pxr import Kind; Kind.Tokens.assembly"`);
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      $lbl
            -annotation `getMayaUsdString("kUSDSelectionModeAssemblyAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"assembly\")")
            mayaUsdSelectKindAssembly;
    }
    if (!`runTimeCommand -exists mayaUsdSelectKindComponent`) {
        string $lbl = capitalizeString(`python "from pxr import Kind; Kind.Tokens.component"`);
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      $lbl
            -annotation `getMayaUsdString("kUSDSelectionModeComponentAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"component\")")
            mayaUsdSelectKindComponent; 
    }
    if (!`runTimeCommand -exists mayaUsdSelectKindSubComponent`) {
        string $lbl = capitalizeString(`python "from pxr import Kind; Kind.Tokens.subcomponent"`);
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      $lbl
            -annotation `getMayaUsdString("kUSDSelectionModeSubComponentAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setSelectionKind(\"subcomponent\")")
            mayaUsdSelectKindSubComponent; 
    }

    //
    // runTimeCommand for Point Instances Pick Mode
    //
    if (!`runTimeCommand -exists mayaUsdPointInstancesPickMode_PointInstancer`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      `getMayaUsdString("kUSDPointInstancesPickMode_PointInstancer")`
            -annotation `getMayaUsdString("kUSDPointInstancesPickMode_PointInstancerAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setPointInstancesPickMode(\"PointInstancer\")")
        mayaUsdPointInstancesPickMode_PointInstancer;
    }
    if (!`runTimeCommand -exists mayaUsdPointInstancesPickMode_Instances`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      `getMayaUsdString("kUSDPointInstancesPickMode_Instances")`
            -annotation `getMayaUsdString("kUSDPointInstancesPickMode_InstancesAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setPointInstancesPickMode(\"Instances\")")
        mayaUsdPointInstancesPickMode_Instances;
    }
    if (!`runTimeCommand -exists mayaUsdPointInstancesPickMode_Prototypes`) {
        runTimeCommand -default true -plugin "mayaUsdPlugin"
            -label      `getMayaUsdString("kUSDPointInstancesPickMode_Prototypes")`
            -annotation `getMayaUsdString("kUSDPointInstancesPickMode_PrototypesAnn")`
            -category   "Menu items.Maya USD"
            -command    ("mayaUSD_setPointInstancesPickMode(\"Prototypes\")")
        mayaUsdPointInstancesPickMode_Prototypes;
    }

    source "mayaUsd_createStageFromFile.mel";
    source "mayaUsd_layerEditorFileDialogs.mel";
}

///////////////////////////////////////////////////////////////////////////////
// getMayaMajorVersion
// this is used to get the "new feature" highlight 
proc string getMayaMajorVersion() {
    string $version = `about -apiVersion`;
    return `substring $version 1 4`;
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_createMenuCallback
// setup the items in Maya's "Create" menu
global proc mayaUsdMenu_createMenuCallback() {
    global string $gMayaUsdCreateSubMenu;

    if ($gMayaUsdCreateSubMenu == "") {    
        global string $gMainCreateMenu; // maya's create menu
        
        string $mayaVersion = getMayaMajorVersion();
        // find the insertion point, after the Scene Management separator
        $sceneManagementDivider = findDividerByLabel($gMainCreateMenu, uiRes("m_ModCreateMenu.kCreateSceneMgt"));
        if ($sceneManagementDivider != "") {
            string $subMenuLabel = `getMayaUsdString("kMenuStageSubMenu")`;
            string $subMenuAnn   = `getMayaUsdString("kMenuStageSubMenuAnn")`;
            $gMayaUsdCreateSubMenu = `menuItem -subMenu true -insertAfter $sceneManagementDivider -tearOff true
                -label $subMenuLabel
                -annotation $subMenuAnn
                -image "USD_generic.png"
                -version $mayaVersion`;
            menuItem -runTimeCommand mayaUsdCreateStageWithNewLayer;
            menuItem -runTimeCommand mayaUsdCreateStageFromFile;
            menuItem -runTimeCommand mayaUsdCreateStageFromFileOptions -optionBox true;

            // Important: don't forget to reset the menu parent back to the create menu otherwise
            //            another menu callback would add items to our menu.
            setParent -menu ..;
        } else {
            error `getMayaUsdString("kMenuStageCreateMenuError")`;
        }
    }

    removeMenuCallback(`setParent -q -menu`, "mayaUsdMenu_createMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsd_updateSelectionKindMenuItem
// Update the menuItem radio button in the Selection Mode menu
global proc mayaUsd_updateSelectionKindMenuItem() {
    // Note: we do all string compares as case-insenstive (lowercase)
    //       as the menu labels are capitalized.
    string $selectionKind = `tolower(mayaUSD_getSelectionKind())`;
    switch($selectionKind) {
        case "":
            menuItem -e -radioButton on selectKindNone;
            break;
        default:
            // enable the right menuItem based on it's label
            global string $gMayaUsdSelectModeSubMenu;
            $menuItems = `menu -q -itemArray $gMayaUsdSelectModeSubMenu`;
            for($i = 0; $i < size($menuItems); $i++) {
                string $label = `menuItem -q -label $menuItems[$i]`;
                if(`tolower($label)` == $selectionKind) {
                    menuItem -e -radioButton on $menuItems[$i];
                    break;
                }
            }
    }
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsd_updatePointInstancesPickModeMenuItem
// Update the menu item radio buttons in the Point Instances Pick Mode menu
global proc mayaUsd_updatePointInstancesPickModeMenuItem() {
    // Note: we do all string compares as case-insenstive (lowercase)
    //       as the menu labels are capitalized.
    string $pickMode = `tolower(mayaUSD_getPointInstancesPickMode())`;
    switch($pickMode) {
        case "":
            menuItem -e -radioButton on pointInstancesPickMode_PointInstancer;
            break;
        default:
            // Enable the menu item based on the label.
            global string $gMayaUsdSelectModeSubMenu;
            $menuItems = `menu -q -itemArray $gMayaUsdSelectModeSubMenu`;
            for($i = 0; $i < size($menuItems); $i++) {
                string $label = `menuItem -q -label $menuItems[$i]`;
                if(`tolower($label)` == $pickMode) {
                    menuItem -e -radioButton on $menuItems[$i];
                    break;
                }
            }
    }
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_selectMenuCallback
// setup the items in Maya's "Select" menu
global proc mayaUsdMenu_selectMenuCallback() {

    global string $gMayaUsdSelectMenuDivider;
    if(!`menuItem -q -exists $gMayaUsdSelectMenuDivider`) {
        string $label = `getMayaUsdString("kUniversalSceneDescription")`;
        $gMayaUsdSelectMenuDivider = `menuItem -divider true -dividerLabel $label`;
    }

    global string $gMayaUsdSelectModeSubMenu;
    if(!`menuItem -q -exists $gMayaUsdSelectModeSubMenu`) {
        string $mayaVersion = getMayaMajorVersion();
      
        string $label = `getMayaUsdString("kUSDSelectionMode")`;
        string $ann = `getMayaUsdString("kUSDSelectionModeAnn")`;
        $gMayaUsdSelectModeSubMenu = `menuItem -label $label -annotation $ann -subMenu true -tearOff true -version $mayaVersion`;

        $label = getMayaUsdString("kKinds");
        menuItem -divider true -dividerLabel $label;
        radioMenuItemCollection;

        // add the default (built-in) select kind menu items
        menuItem -radioButton on  -runTimeCommand ("mayaUsdSelectKindNone") selectKindNone;
        menuItem -radioButton off -runTimeCommand ("mayaUsdSelectKindModel") selectKindModel;
        menuItem -radioButton off -runTimeCommand ("mayaUsdSelectKindGroup") selectKindGroup;
        menuItem -radioButton off -runTimeCommand ("mayaUsdSelectKindAssembly") selectKindAssembly;
        menuItem -radioButton off -runTimeCommand ("mayaUsdSelectKindComponent") selectKindComponent;
        menuItem -radioButton off -runTimeCommand ("mayaUsdSelectKindSubComponent") selectKindSubcomponent;

        string $builtInKinds[] = `python "from pxr import Kind; [Kind.Tokens.model, Kind.Tokens.group, Kind.Tokens.assembly, Kind.Tokens.component, Kind.Tokens.subcomponent]"`;
        string $allKinds[] = `python "Kind.Registry.GetAllKinds()"`;

        // sort the kinds in alphabetic order
        $allKinds = `sort $allKinds`;
        string $strFormat = `getMayaUsdString("kUSDSelectionModeCustom")`;

        for($i = 0; $i < size($allKinds); $i++) {
            string $currentKind = $allKinds[$i];
            int $index = stringArrayFind($currentKind, 0, $builtInKinds);
            if($index == -1) {
                $ann = `format -stringArg $currentKind $strFormat`;
                menuItem
                    -label `capitalizeString($currentKind)`
                    -command ("mayaUSD_setSelectionKind " + $currentKind)
                    -annotation $ann
                    -radioButton off;
            }
        }

        $label = getMayaUsdString("kPointInstances");
        menuItem -divider true -dividerLabel $label;

        // Add the default (built-in) point instances pick mode
        radioMenuItemCollection;
        menuItem -radioButton on -runTimeCommand ("mayaUsdPointInstancesPickMode_PointInstancer") pointInstancesPickMode_PointInstancer;
        menuItem -radioButton off -runTimeCommand ("mayaUsdPointInstancesPickMode_Instances") pointInstancesPickMode_Instances;
        menuItem -radioButton off -runTimeCommand ("mayaUsdPointInstancesPickMode_Prototypes") pointInstancesPickMode_Prototypes;

        // make sure the radio button are sync with the option var.
        mayaUsd_updateSelectionKindMenuItem();
        mayaUsd_updatePointInstancesPickModeMenuItem();

        // Important: don't forget to reset the menu parent back to the select menu otherwise
        //            another menu hook would add items to our menu.
        setParent -menu ..;

        // Attach a script job to the optionVars to update the menu item menuItem radio button state.
        // This is required because the menu is tearable. So, if the user tear off the menu (menu always visible) we need to
        // update the menu item if the option var change for any reason.
        // The script job will be automatically deleted when the menu is deleted.
        scriptJob -parent $gMayaUsdSelectModeSubMenu
            -optionVarChanged "mayaUsd_PointInstancesPickMode" "mayaUsd_updatePointInstancesPickModeMenuItem";
        scriptJob -parent $gMayaUsdSelectModeSubMenu
            -optionVarChanged "mayaUsd_SelectionKind" "mayaUsd_updateSelectionKindMenuItem";
    }

    // Now that we have injected our custom menu item, we can
    // remove our callback from the select menu. The menu items
    // will stay in the menu until the plugin is unloaded.
    global string $gMainSelectMenu; // maya's select menu
    removeMenuCallback($gMainSelectMenu, "mayaUsdMenu_selectMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_windowMenuCallback
// setup the items in Maya's "Window" menu
global proc mayaUsdMenu_windowMenuCallback() {
    global string $gMainWindowMenu;
    string $GeneralEditorSubMenu = findMenuByName($gMainWindowMenu, uiRes("m_WindowMenu.kGeneralEditorsLabel"));
    addMenuCallback($GeneralEditorSubMenu, "mayaUsdMenu_generalEditorsMenuCallback");
    
    removeMenuCallback(`setParent -q -menu`, "mayaUsdMenu_windowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_windowMenuCallback
// setup the items in Maya's "Window->General Editors" menu
global proc mayaUsdMenu_generalEditorsMenuCallback() {
    if (`exists mayaUsdLayerEditorWindow` && !(`menuItem -query -exists wmUsdLayerEditorMenuitem`))
    {
        string $mayaVersion = getMayaMajorVersion();
        global string $gMayaUsdOpenUsdLayerEditorMenuItem;
        $gMayaUsdOpenUsdLayerEditorMenuItem = `menuItem
            -insertAfter wmNamespaceEditor 
            -enableCommandRepeat false
            -version $mayaVersion
            -runTimeCommand mayaUsdOpenUsdLayerEditor
            wmUsdLayerEditorMenuitem`;
    }
    removeMenuCallback(`setParent -q -menu`, "mayaUsdMenu_generalEditorsMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_aeShowMenuCallback
// Maya USD Attribute Editor Show menu callback.
// Note: Maya is using a post callback to build it's menu.
//       The maya's callback delete all menu item each time
//       the menu is display, so we also need to create all
//       our menu item each time.
global proc mayaUsdMenu_aeShowMenuCallback(string $aeShowMenu)
{
    string $mayaVersion = getMayaMajorVersion();
    int $isEnable = `optionVar -q "mayaUSD_AEShowArrayAttributes"`;

    setParent -menu $aeShowMenu;
    menuItem -divider true -dividerLabel `getMayaUsdString("kUniversalSceneDescription")`;
    menuItem -label `getMayaUsdString("kShowArrayAttributes")`
             -checkBox $isEnable
             -version $mayaVersion
             -command "optionVar -intValue \"mayaUSD_AEShowArrayAttributes\" #1; AEbuildControls;";
}

///////////////////////////////////////////////////////////////////////////////
// initCreateMenu
// setup the items in Maya's "Create" menu
proc initCreateMenu() {
    global string $gMainCreateMenu; // maya's create menu
    addMenuCallback($gMainCreateMenu, "mayaUsdMenu_createMenuCallback()");
    global string $gMainWindowMenu;
    addMenuCallback($gMainWindowMenu, "mayaUsdMenu_windowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// termCreateMenu
// destroys the items in Maya's "Create" menu
proc termCreateMenu() {
    global string $gMainCreateMenu; // maya's create menu
    global string $gMayaUsdCreateSubMenu;
    if ($gMayaUsdCreateSubMenu != "") {
        deleteUI -mi $gMayaUsdCreateSubMenu;
        $gMayaUsdCreateSubMenu = "";
    }
    removeMenuCallback($gMainCreateMenu, "mayaUsdMenu_createMenuCallback");
    global string $gMayaUsdOpenUsdLayerEditorMenuItem;
    if ($gMayaUsdOpenUsdLayerEditorMenuItem != "") {
        deleteUI -mi $gMayaUsdOpenUsdLayerEditorMenuItem;
    }
    removeMenuCallback($gMainCreateMenu, "mayaUsdMenu_windowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// initSelectMenu
// setup the items in Maya's "Select" menu
proc initSelectMenu() {
    global string $gMainSelectMenu; // maya's select menu
    addMenuCallback($gMainSelectMenu, "mayaUsdMenu_selectMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// termSelectMenu
// destroys the items in Maya's "Select" menu
proc termSelectMenu() {

    // remove our divider menu item
    global string $gMayaUsdSelectMenuDivider;
    if (`menuItem -q -exists $gMayaUsdSelectMenuDivider`) {
        deleteUI -mi $gMayaUsdSelectMenuDivider;
    }
    global string $gMainSelectMenu; // maya's select menu
    removeMenuCallback($gMainSelectMenu, "mayaUsdMenu_selectMenuCallback");

    // remove our selection mode sub menu
    global string $gMayaUsdSelectModeSubMenu;
    if (`menuItem -q -exists $gMayaUsdSelectModeSubMenu`) {
        deleteUI -mi $gMayaUsdSelectModeSubMenu;
    }
    removeMenuCallback($gMainSelectMenu, "mayaUsdMenu_selectMenuCallback");
}

proc initAEShowMenu()
{
    string $aeShowMenu = findAEMenu(uiRes("m_showEditor.kShow"));
    addMenuCallback($aeShowMenu, "mayaUsdMenu_aeShowMenuCallback " + $aeShowMenu);
}

proc termAEShowMenu()
{
    string $aeShowMenu = findAEMenu(uiRes("m_showEditor.kShow"));
    removeMenuCallback($aeShowMenu, "mayaUsdMenu_aeShowMenuCallback");
}

///////////////////////////////////////////////////////////////////////////////
// initPullMenu
// Marking menu with USD options for DAG objects

proc string getPulledUsdObject(string $dagObject) {
    string $root = "";
    string $pulledDagObject = "";
    
    if (`objExists $dagObject`) {
        // For some reason, outliner will provide a set instead of real
        // selection when populating the menu under set. We go back to read the
        // real selection
        if (size(`ls -set $dagObject`) > 0) {
            string $selection[] = `ls -sl`;
            $dagObject = $selection[0];
        }
        if (size(`ls -dagObjects $dagObject`) > 0) {
            for (;;) {
                string $parents[] = `listRelatives -parent -fullPath $dagObject`;
                if (size($parents) == 0) {
                    $root = longNameOf($dagObject);
                    break;
                }
                
                // Not root, then maybe it's pulled object. Look for "metadata" attribute
                if (`attributeExists "Pull_UfePath" $dagObject`) {
                    string $pullAttribute = ( $dagObject + ".Pull_UfePath" );
                    string $ufePath = `getAttr $pullAttribute`;
                    if ($ufePath != "") {
                        $pulledDagObject = $dagObject;
                    }
                }
                
                $dagObject = $parents[0];
            }
        }
    }
    
    if ($root == "|__mayaUsd__" && $pulledDagObject != "") {
        return $pulledDagObject;
    }
    
    return "";
}

proc int isObjectSelected(string $obj)
{
    if (size($obj)) {
        string $sel[] = `ls -sl`;
        return stringArrayContains($obj, $sel);
    }
    return 0;
}

global proc mayaUsdMenu_pushBackToUSD(string $obj)
{
    if (!hasPrimUpdater())
        return;

    if (size($obj) == 0) {
        string $sel[] = `ls -sl`;
        if (size($sel)) {
            $obj = $sel[0];
        }
    }
    if (size($obj)) {
        string $exportOptions = `python("import mayaUsdMergeToUSDOptions; import mayaUsdOptions; mayaUsdOptions.setAnimateOption('''" + $obj + "''', mayaUsdMergeToUSDOptions.getMergeToUSDOptionsText())")`;
        mayaUsdMergeToUsd -exportOptions $exportOptions $obj;
    }
}

global proc mayaUsdMenu_pushBackToUSDOptions(string $obj)
{
    if (!hasPrimUpdater())
        return;

    if (size($obj) == 0) {
        string $sel[] = `ls -sl`;
        if (size($sel)) {
            $obj = $sel[0];
        }
    }
    if (size($obj)) {
        python("import mayaUsdMergeToUSDOptions; mayaUsdMergeToUSDOptions.showMergeToUSDOptions('''" + $obj + "''')");
    }
}

global proc mayaUsdMenu_duplicateToUSD( string $proxy, string $obj )
{
    if (!hasPrimUpdater())
        return;

    if (size($obj) == 0) {
        string $sel[] = `ls -sl`;
        if (size($sel)) {
            $obj = $sel[0];
        }
    }
    string $objLong[] = `ls -l $obj`;
    string $proxyLong[] = `ls -l $proxy`;
    if (size($objLong) && size($proxyLong)) {
        string $exportOptions = `python("import mayaUsdDuplicateAsMayaDataOptions; import mayaUsdOptions; mayaUsdOptions.setAnimateOption('''" + $obj + "''', mayaUsdDuplicateAsMayaDataOptions.getDuplicateAsMayaDataOptionsText())")`;
        mayaUsdDuplicate -exportOptions $exportOptions $objLong[0] $proxyLong[0];
    }
}

global proc mayaUsdMenu_duplicateAsUsdDataOptions(string $obj)
{
    if (!hasPrimUpdater())
        return;

    python("import mayaUsdDuplicateAsMayaDataOptions; mayaUsdDuplicateAsMayaDataOptions.showDuplicateAsMayaDataOptions()");
}

global proc mayaUsdMenu_markingMenuCallback( string $obj )
{
    if (!hasPrimUpdater())
        return;
    
    string $pulledObject = getPulledUsdObject($obj);
    if ($pulledObject != "") {
        string $label = getMayaUsdString("kContextMenuLayerEditor");
        string $icon = "USD_generic.png";
        string $layerEditor = `menuItem -label $label -insertAfter "" -image $icon -command ("mayaUsdLayerEditorWindow -proxyShape " + $pulledObject + " mayaUsdLayerEditor")`;

        string $pushback = python("import mayaUsdMergeToUsd; mayaUsdMergeToUsd.createMenuItem('" + $pulledObject + "', '"+ $layerEditor +"')");
        
        int $isMayaRef = python("import mayaUsdUtils; mayaUsdUtils.isPulledMayaReference('''" + $pulledObject + "''')");

        if ($isMayaRef) {
            $label = getMayaUsdString("kMayaRefDiscardEdits");
            $icon = "discard_edits.png";
        } else {
            $label = getMayaUsdString("kMayaDiscardEdits");
            $icon = "discard_edits.png";
        }
        string $pushclear = `menuItem -label $label -insertAfter $pushback -image $icon -command ("mayaUsdDiscardEdits " + $pulledObject)`;
        
        menuItem -divider true -insertAfter $pushclear;
    }
    else {
        string $proxyShapes[] = `ls -type mayaUsdProxyShape`;
        if (size($proxyShapes) > 0) {
            menuItem -divider true -insertAfter "";
            menuItem -label `getMayaUsdString("kMayaRefDuplicateAsUsdData")` -subMenu true -insertAfter "";
            menuItem -divider true -dividerLabel `getMayaUsdString("kMayaRefDuplicateAsUsdDataDiv")`;
            for ($proxy in $proxyShapes) {
                menuItem -label $proxy -command ("mayaUsdMenu_duplicateToUSD " + $proxy + " " + $obj);
            }
            menuItem -divider true;
            menuItem -label `getMayaUsdString("kMayaRefDuplicateAsUsdDataOptions")` -command ("mayaUsdMenu_duplicateAsUsdDataOptions " + $obj);

            // Important: don't forget to reset the menu parent back to the context menu otherwise
            //            another menu hook would add items to our menu.
            setParent -menu ..;
        }
    }
}

proc initPullMenu()
{
    if (!hasPrimUpdater())
        return;

    callbacks -addCallback mayaUsdMenu_markingMenuCallback -hook addRMBBakingMenuItems -owner mayaUsdPlugin;
}

proc tearPullMenu()
{
    if (!hasPrimUpdater())
        return;

    callbacks -removeCallback mayaUsdMenu_markingMenuCallback -hook addRMBBakingMenuItems -owner mayaUsdPlugin;
}

///////////////////////////////////////////////////////////////////////////////
// Outliner Popup Menu
//
proc initOutlinerPopupMenu()
{
    callbacks -addCallback mayaUsdMenu_OutlinerPopupCallback -hook addItemsToOutlinerNodePopupMenu -owner mayaUsdPlugin;
}

proc termOutlinerPopupMenu()
{
    callbacks -removeCallback mayaUsdMenu_OutlinerPopupCallback -hook addItemsToOutlinerNodePopupMenu -owner mayaUsdPlugin;
}

proc int isMayaUsdProxyShape(string $nodeName)
{
    if (size($nodeName)) {
        // We use inherited here to find the proxy shape base so this will
        // work on other derived proxy shape types.
        string $inher[] = `nodeType -inherited $nodeName`;
        if (stringArrayContains("mayaUsdProxyShapeBase", $inher)) {
            return 1;
        }
    }
    return 0;
}

global proc mayaUsdMenu_OutlinerPopupCallback( string $nodeName )
{
    if ((size($nodeName) == 0) || !`objExists $nodeName`) {
        return;
    }

    int $isProxyNode = 0;
    if (`nodeType $nodeName` == "transform") {
        string $shapes[] = `listRelatives -shapes -fullPath $nodeName`;
        if (`size($shapes)` > 0) {
            string $shapeNode = $shapes[0];
            if (isMayaUsdProxyShape($shapeNode)) {
                $isProxyNode = 1;
                if (`exists mayaUsdLayerEditorWindow`) {
                    string $command = "mayaUsdLayerEditorWindow -proxyShape \"" + $shapeNode + "\" mayaUsdLayerEditor";
                    menuItem -divider true -insertAfter "";
                    menuItem -enableCommandRepeat false
                        -label `getMayaUsdString("kContextMenuLayerEditor")`
                        -insertAfter ""
                        -command $command openUsdLayerEditor;
                }
            }
        }
    }

    // Don't add the "Push..." menu items for the proxy node or the shape.
    if (!$isProxyNode && !isMayaUsdProxyShape($nodeName)) {
        mayaUsdMenu_markingMenuCallback($nodeName);
    }
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_loadui
// main entry point on plugin load
global proc mayaUsdMenu_loadui() {

    initRuntimeCommands();
    initCreateMenu();
    initSelectMenu();
    initAEShowMenu();

    // if the current selection kind is not valid,
    // reset the current selection kind to none.
    // This can happen if user previouly used plugin with
    // custom kind that does not exist anymore.
    if(!mayaUSD_isSelectionKindValid()) {
        mayaUsdSelectKindNone();
    }

    initPullMenu();
    initOutlinerPopupMenu();
}

///////////////////////////////////////////////////////////////////////////////
// mayaUsdMenu_unloadui
// main entry point on plugin unload
global proc mayaUsdMenu_unloadui() {
    termCreateMenu();
    termSelectMenu();
    termAEShowMenu();
    tearPullMenu();
    termOutlinerPopupMenu();
}

///////////////////////////////////////////////////////////////////////////////
// menu for layer editor
// 
proc string makeCommand(string $panelName, string $command) {
    return "mayaUsdLayerEditorWindow -edit -" + $command + " " + $panelName + ";";
}

global proc mayaUsdMenu_layerEditorContextMenu(string $panelName) {

    if (!`exists mayaUsdLayerEditorWindow`) {
        return;
    }

    int $invalidLayer = `mayaUsdLayerEditorWindow -q -isInvalidLayer $panelName`;
    string $cmd;

    if ($invalidLayer) {
        $cmd = makeCommand($panelName, "removeSubLayer");
        menuItem -label `getMayaUsdString("kMenuRemove")` -c $cmd;
        return; // that's all we can support on invalid layers
    }

    int $isSessionLayer = `mayaUsdLayerEditorWindow -q -isSessionLayer $panelName`;
    int $isAnonymousLayer = `mayaUsdLayerEditorWindow -q -isAnonymousLayer $panelName`;
    int $needsSaving = `mayaUsdLayerEditorWindow -q -layerNeedsSaving $panelName`;
    int $singleSelect = `mayaUsdLayerEditorWindow -q -selectionLength $panelName` == 1;
    int $appearsMuted = `mayaUsdLayerEditorWindow -q -layerAppearsMuted $panelName`;
    int $isSubLayer = `mayaUsdLayerEditorWindow -q -isSubLayer $panelName`;
    int $isMuted = `mayaUsdLayerEditorWindow -q -layerIsMuted $panelName`;
    int $isReadOnly = `mayaUsdLayerEditorWindow -q -layerIsReadOnly $panelName`;
    int $isIncoming = `mayaUsdLayerEditorWindow -q -isIncomingLayer $panelName`;
    string $proxyShape = `mayaUsdLayerEditorWindow -q -proxyShape $panelName`;

    string $label;
    int $enabled;

    if (!$isSessionLayer) {
        if ($isAnonymousLayer)
            $label = getMayaUsdString("kMenuSaveAs");
        else
            $label = getMayaUsdString("kMenuSaveEdits");
        $enabled = $singleSelect && $needsSaving;
        $cmd = makeCommand($panelName, "saveEdits");
        menuItem -label $label -enable $enabled -c $cmd;
    }

    if (!$isAnonymousLayer) {
        $label = getMayaUsdString("kMenuRevertToFile");
        $cmd = makeCommand($panelName, "discardEdits");
        $enabled = $needsSaving;
        menuItem -label $label -enable $enabled -c $cmd;
    }

    menuItem -divider 1;

    $label = getMayaUsdString("kMenuAddSublayer");
    $cmd = makeCommand($panelName, "addAnonymousSublayer");
    $enabled = $appearsMuted == 0 && !$isReadOnly;
    menuItem -label $label -enable $enabled -c $cmd;

    $label = getMayaUsdString("kMenuAddParentLayer");
    $cmd = makeCommand($panelName, "addParentLayer");
    $enabled = $isSubLayer && $appearsMuted == 0 && !$isReadOnly;
    menuItem -label $label -enable $enabled -c $cmd;

    $label = getMayaUsdString("kMenuLoadSublayers");
    $cmd = makeCommand($panelName, "loadSubLayers");
    $enabled = $singleSelect && !$appearsMuted && !$isReadOnly;
    menuItem -label $label -enable $enabled -c $cmd;

    menuItem -divider 1;

    if ($isSubLayer) {
        if ($isMuted)
            $label = getMayaUsdString("kMenuUnmute");
        else
            $label = getMayaUsdString("kMenuMute");
        $cmd = makeCommand($panelName, "muteLayer");
        $enabled = 1;
        menuItem -label $label -enable $enabled -c $cmd;
    }

    $label = getMayaUsdString("kMenuPrintToScriptEditor");
    $cmd = makeCommand($panelName, "printLayer");
    $enabled = 1;
    menuItem -label $label -enable $enabled -c $cmd;

    menuItem -divider 1;

    $label = getMayaUsdString("kMenuSelectPrimsWithSpec");
    $cmd = makeCommand($panelName, "selectPrimsWithSpec");
    $enabled = 1;
    menuItem -label $label -enable $enabled -c $cmd;

    if($isIncoming) {
        // Find the incoming node from the connections
        $incoming = `listConnections -s true -d false -c true $proxyShape`;
        string $incomingNode = "";
        for($i=0;$i<size($incoming);$i+=2) {
            $j = $i+1;
            // The instageData connection wins over StageCatchId so check that first
            if($incoming[$i] == $proxyShape+".inStageData") {
                $incomingNode = $incoming[$j];
            }
            else if($incomingNode == "" && $incoming[$i] ==  $proxyShape+".stageCacheId") {
                $incomingNode = $incoming[$j];
            }
        }
        // If we found an incoming node we set the label
        if($incomingNode != "") {
            $label = "Select Incoming Node "+$incomingNode;
            $cmd = "select "+$incomingNode;
            menuItem -label $label -enable 1 -c $cmd;
        }
    }

    // if we add any more menus, add a divider
    if ($isSubLayer || !$isAnonymousLayer)
        menuItem -divider 1;

    if ($isSubLayer) {
        $label = getMayaUsdString("kMenuRemove");
        $cmd = makeCommand($panelName, "removeSubLayer");
        $enabled = !$isReadOnly;
        menuItem -label $label -enable $enabled -c $cmd;
    }


    $label = getMayaUsdString("kMenuClear");
    $cmd = makeCommand($panelName, "clearLayer");
    $enabled = !$isReadOnly;
    menuItem -label $label -enable $enabled -c $cmd;
}
