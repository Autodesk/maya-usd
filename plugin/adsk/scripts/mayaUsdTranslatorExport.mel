// Copyright 2019 Autodesk
//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

global string $gMayaUsdTranslatorExport_SectionNames[];
global int $exportAll;

proc string stringRemoveSuffix(string $object, string $suffix)
{
    if (endsWith($object, $suffix)) {
        int $objectLen = size($object);
        int $suffixLen = size($suffix);
        string $newObject = substring($object, 1, ($objectLen - $suffixLen));
        return $newObject;
    }
    return $object;
}

proc mayaUsdTranslatorExport_SetCheckbox(string $arg, int $enable, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return;

    if ($arg == "0") {
        checkBoxGrp -e -v1 false -en $enable $widget;
    } else {
        checkBoxGrp -e -v1 true -en $enable $widget;
    }
}

proc mayaUsdTranslatorExport_SetOppositeCheckbox(string $arg, int $enable, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return;

    if ($arg == "0") {
        checkBoxGrp -e -v1 true -en $enable $widget;
    } else {
        checkBoxGrp -e -v1 false -en $enable $widget;
    }
}

proc mayaUsdTranslatorExport_SetTextField(string $arg, int $enable, string $widget) {
    if (`textFieldGrp -exists $widget` == 0)
        return;

    textFieldGrp -e -text $arg -en $enable $widget;
}

proc mayaUsdTranslatorExport_SetOptionMenuByAnnotation(
        string $ann, int $enable, string $widget) {

    if (`optionMenuGrp -exists $widget` == 0)
        return;

    int $index = 1; // 1-based indexing.
    for ($i in `optionMenuGrp -q -itemListLong $widget`) {
        if (`menuItem -q -ann $i` == $ann) {
            optionMenuGrp -e -select $index -en $enable $widget;
            return;
        }

        $index++;
    }
}

proc mayaUsdTranslatorExport_SetOptionMenuByBool (
        string $ann, int $enable, string $widget) {

    if (`optionMenuGrp -exists $widget` == 0)
        return;

    // Mapping between a boolean option and an option menu with two choices.
    // False maps to the first menu item, which is index 1.
    // True maps to the second menu item, which is index 2.
    int $optionAsBool = 1;
    if ("1" == $ann)
    {
        $optionAsBool = 2;
    }
    optionMenuGrp -e -select $optionAsBool -en $enable $widget;
}

proc string mayaUsdTranslatorExport_AppendOppositeFromCheckbox(string $currentOptions, string $arg, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=0";
    } else {
        return $currentOptions + ";" + $arg + "=1";
    }
}

proc string mayaUsdTranslatorExport_AppendFromCheckbox(string $currentOptions, string $arg, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=1";
    } else {
        return $currentOptions + ";" + $arg + "=0";
    }
}

proc string mayaUsdTranslatorExport_SetFromCheckbox(string $currentOptions, string $trueValue, string $falseValue, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $trueValue;
    } else {
        return $currentOptions + ";" + $falseValue;
    }
}

// For Suboptions we don't add semicolon
proc string mayaUsdTranslatorExport_SetSuboptionsFromCheckBox(string $currentOptions, string $trueValue, string $falseValue, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        if((size($currentOptions) > 0) && (size($trueValue) > 0)){
            return $currentOptions + "," + $trueValue;
        }
        else {
            return $currentOptions + $trueValue;
        }
    } else {
        if((size($currentOptions) > 0) && (size($falseValue) > 0)) {
            return $currentOptions + "," + $falseValue;
        }
        else {
            return $currentOptions + $falseValue;
        }
    }
}

proc string mayaUsdTranslatorExport_AppendDefaultPrim(string $currentOptions, string $arg) {
    if (`optionMenuGrp -exists exportDefaultPrim` == 0)
        return $currentOptions;
    
    string $defaultPrim = `optionMenuGrp -q -value exportDefaultPrim`;
    return $currentOptions + ";" + $arg + "=" + $defaultPrim;
}

proc string mayaUsdTranslatorExport_AppendFromPopup(string $currentOptions, string $arg, string $widget) {
    if (`optionMenuGrp -exists $widget` == 0)
        return $currentOptions;

    int $index = `optionMenuGrp -q -select $widget` - 1;
    string $allItems[] = `optionMenuGrp -q -itemListLong $widget`;
    string $item = $allItems[$index];
    string $annotation = `menuItem -q -ann $item`;
    return $currentOptions + ";" + $arg + "=" + $annotation;
}

proc string mayaUsdTranslatorExport_AppendFromBoolPopup(string $currentOptions, string $arg, string $widget) {
    if (`optionMenuGrp -exists $widget` == 0)
        return $currentOptions;

    int $index = `optionMenuGrp -q -select $widget` - 1;
    return $currentOptions + ";" + $arg + "=" + $index;
}

proc string mayaUsdTranslatorExport_AppendFrameRange(string $currentOptions) {
    if (`intFieldGrp -exists frameRangeFields` == 0)
        return $currentOptions;

    int $start = `intFieldGrp -q -value1 frameRangeFields`;
    int $end = `intFieldGrp -q -value2 frameRangeFields`;
    return $currentOptions + ";startTime=" + $start + ";endTime=" + $end;
}

proc string mayaUsdTranslatorExport_AppendFromIntField(string $currentOptions, string $arg, string $widget) {
    if (`intFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `intFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

proc string mayaUsdTranslatorExport_AppendFromFloatField(string $currentOptions, string $arg, string $widget) {
    if (`floatFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `floatFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

proc string mayaUsdTranslatorExport_AppendFromTextField(string $currentOptions, string $arg, string $widget) {
    if (`textFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `textFieldGrp -q -text $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc mayaUsdTranslatorExport_updateDefaultPrimList() {
    if (`optionMenuGrp -exists exportDefaultPrim` == 0){
        return;
    }

    if ((`checkBoxGrp -exists exportMeshesCheckBox` == 0)||(`checkBoxGrp -exists exportLightsCheckBox` == 0)||(`checkBoxGrp -exists exportCamerasCheckBox` == 0)){
        return;
    }
    int $excludeMesh = (`checkBoxGrp -q -v1 exportMeshesCheckBox` == 0);
    int $excludeLight = (`checkBoxGrp -q -v1 exportLightsCheckBox` == 0);
    int $excludeCamera = (`checkBoxGrp -q -v1 exportCamerasCheckBox` == 0);

    string $allItems[];
    global int $exportAll;
    if($exportAll){
        $allItems = `python("import mayaUsd_exportHelpers; mayaUsd_exportHelpers.updateDefaultPrimCandidates('" + $excludeMesh + "','" + $excludeLight + "', '" + $excludeCamera +"')")`;

    } else{
        $allItems = `python("import mayaUsd_exportHelpers; mayaUsd_exportHelpers.updateDefaultPrimCandidatesFromSelection('" + $excludeMesh + "','" + $excludeLight + "', '" + $excludeCamera +"')")`;
    }
    optionMenuGrp -edit -deleteAllItems exportDefaultPrim;
    string $menuName = `optionMenuGrp -q -fullPathName exportDefaultPrim`;
    menuItem -parent ($menuName + "|OptionMenu") -l `getMayaUsdString("kExportDefaultPrimNoneLbl")`;
    for($item in $allItems){
        menuItem -parent ($menuName + "|OptionMenu") -l $item;
    }

    // If there are default prim candidates, select the first prim
    // Use index 2 here because the first one will always be None
    if(size($allItems) > 0){
        optionMenuGrp -e -select 2 exportDefaultPrim;
    }

}

global proc mayaUsdTranslatorExport_RootPrimCB() {
    if (`optionMenuGrp -exists exportDefaultPrim` == 0){
        return;
    }
    string $rootPrim = `textFieldGrp -q -text rootPrimField`;
    optionMenuGrp -edit -deleteAllItems exportDefaultPrim;
    string $menuName = `optionMenuGrp -q -fullPathName exportDefaultPrim`;
    menuItem -parent ($menuName + "|OptionMenu") -l "None";
    menuItem -parent ($menuName + "|OptionMenu") -l $rootPrim;
    if(size($rootPrim) > 0){
        optionMenuGrp -e -select 2 exportDefaultPrim;
    } else {
        mayaUsdTranslatorExport_updateDefaultPrimList();
    }
}

global proc mayaUsdTranslatorExport_AnimationCB() {
    if (`checkBoxGrp -exists animationCheckBox` == 0)
        return;

    columnLayout -e -enable (`checkBoxGrp -q -v1 animationCheckBox`) animOptsCol;
}

global proc mayaUsdTranslatorExport_MeshCB() {
    if (`checkBoxGrp -exists exportMeshesCheckBox` == 0)
        return;
    
    mayaUsdTranslatorExport_updateDefaultPrimList();
    columnLayout -e -enable (`checkBoxGrp -q -v1 exportMeshesCheckBox` == 1) meshExportOptsCol;
    columnLayout -e -enable (`checkBoxGrp -q -v1 exportMeshesCheckBox` == 1) materialOptsCol;
}

proc string[] mayaUsdTranslatorExport_getContextLabels()
{
    // Make sure they are in alphabetical order when creatign the UI,
    // otherwise they are in a semi-random order, probably based on plugin
    // load order or other internal details.
    string $contextLabels[] = `mayaUSDListJobContexts -export`;
    return `sort $contextLabels`;
}

proc string mayaUsdTranslatorExport_getContextOptionsCheckBoxName(string $jobContext)
{
    // Build the name of the checkbox used for a given plugin context configuration
    return $jobContext + "ContextOptionsCheckBox";
}

proc int mayaUsdTranslatorExport_isContextOptionsEnabledByUser(string $jobContext)
{
    string $cbName = mayaUsdTranslatorExport_getContextOptionsCheckBoxName($jobContext);
    string $currentToggle = `iconTextButton -query -image1 $cbName`;
    return ($currentToggle == "toggle_on");
}

proc int mayaUsdTranslatorExport_isContextOptionsUISupported(string $contextLabel)
{
    return `mayaUSDListJobContexts -hasExportUI $contextLabel`;
}

proc string mayaUsdTranslatorExport_getContextOptionsButtonName(string $jobContext)
{
    // Build the name of the button used for a given plugin context configuration
    return $jobContext + "ContextOptionsButton";
}

proc mayaUsdTranslatorExport_updateContextOptionButton(string $contextLabel, string $jobContext)
{
    string $buttonName = mayaUsdTranslatorExport_getContextOptionsButtonName($jobContext);
    int $vis = `mayaUsdTranslatorExport_isContextOptionsUISupported($contextLabel)`;
    iconTextButton -edit -visible $vis $buttonName;
}

proc string[] mayaUsdTranslatorExport_updateAllContextOptionButtons()
{
    string $jobContexts[];

    string $contextLabels[] = mayaUsdTranslatorExport_getContextLabels();
    for ($contextLabel in $contextLabels) {
        // Note: we verify that the enabled context actually exists. Might be redundant, but
        //       initially the list of enabled context comes from the saved ones from a previous
        //       Maya session and the list of loaded plugins might have changed.
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        if ($jobContext == "")
            continue;
        stringArrayInsertAtIndex(255, $jobContexts, $jobContext);
        mayaUsdTranslatorExport_updateContextOptionButton($contextLabel, $jobContext);
    }

    return $jobContexts;
}

global string $_mayaUsdTranslatorExport_contextLabel;
global string $_mayaUsdTranslatorExport_parent;
global string $_mayaUsdTranslatorExport_sections;

proc mayaUsdTranslatorExport_createContextOptions(string $parent, string $sections, string $collapsedSections[])
{
    // Create the UI for each of the plugin context configuration.
    string $contextLabels[] = mayaUsdTranslatorExport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    // We need to cache the parent UI container and displayed section names
    // so that the job context options UI callback can call mayaUsdTranslatorExport
    // with the correct arguments.
    global string $_mayaUsdTranslatorExport_parent;
    global string $_mayaUsdTranslatorExport_sections;
    $_mayaUsdTranslatorExport_parent = $parent;
    $_mayaUsdTranslatorExport_sections = $sections;

    int $collapse = stringArrayContains("context", $collapsedSections) ? true : false;
    frameLayout
        -label `getMayaUsdString("kExportPluginConfigLbl")`
        -ann `getMayaUsdString("kExportPluginConfigAnn")`
        -collapsable true -collapse $collapse contextFrameLayout;
        separator -style "none";

        // The goal of the layout code below is to have each plugin listed
        // as if it were in a list view. That is we draw a darker background
        // layout within which each plugin is a separate layout separated by
        // a thin 1-pixel spacing.
        //
        // Note: setting the background color of a panel changes the color of
        //       text in the panel. So rather than set the background color of
        //       the columnLayout, we insert thin layouts around the plugin
        //       row. So we insert one on top and bottom and on each side, and
        //       these have a darker color to simulate a border.

        int $width = 400;
        int $rowHeight = 24;
        float $color[3] = { 0.21, 0.21, 0.21 };

        columnLayout
            -width $width -rowSpacing 1 contextCol;

            rowLayout -width $width -height 1 -backgroundColor $color[0] $color[1] $color[2];
            setParent ..;

            for ($contextLabel in $contextLabels) {
                string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
                string $cbName = mayaUsdTranslatorExport_getContextOptionsCheckBoxName($jobContext);
                string $buttonName = mayaUsdTranslatorExport_getContextOptionsButtonName($jobContext);
                string $tooltip = `mayaUSDListJobContexts -exportAnnotation $contextLabel`;

                rowLayout
                    -width $width -height $rowHeight
                    -numberOfColumns 5 -adjustableColumn 3
                    -columnAttach 2 "left" 4
                    -columnAttach 3 "left" 4
                    -columnAttach 4 "right" 4
                    -columnAlign5 "left" "left" "left" "right" "right";

                    rowLayout -width 1 -height $rowHeight -backgroundColor $color[0] $color[1] $color[2];
                    setParent ..;

                    // Note: the button must be 2 pixels larger than the image.
                    iconTextButton
                        -image1 "toggle_off"
                        -w 22 -h 16
                        -style "iconOnly"
                        -ann $tooltip -align "left"
                        -labelOffset 2
                        -command ("mayaUsdTranslatorExport_contextOptionsCheckBoxCB(\"" + $jobContext + "\")") $cbName;
                    text -label $contextLabel -ann $tooltip -align "left";
                    iconTextButton
                        -w 16 -h 16 -style "iconAndTextVertical"
                        -image1 "menu_options" -label "" -ann `getMayaUsdString("kExportPluginConfigButtonAnn")`
                        -command ("mayaUsdTranslatorExport_contextOptionsButtonCB(\"" + $contextLabel + "\")") $buttonName;

                    rowLayout -width 2 -height $rowHeight -backgroundColor $color[0] $color[1] $color[2];
                    setParent ..;
                    
                setParent ..;

                rowLayout -width $width -height 1 -backgroundColor $color[0] $color[1] $color[2];
                setParent ..;
            }
        setParent ..; // columnLayout

        // This is to provide some spacing below the last plugin row.
        rowLayout -width $width -height 6;
        setParent ..;

    setParent ..; // frameLayout
}

proc mayaUsdTranslatorExport_enableContextOptions()
{
    // Enable all the UI for each of the plugin context configuration.
    // They will be disabled if necessary by the fill-UI function below.
    
    string $contextLabels[] = mayaUsdTranslatorExport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        string $cbName = mayaUsdTranslatorExport_getContextOptionsCheckBoxName($jobContext);
        string $buttonName = mayaUsdTranslatorExport_getContextOptionsButtonName($jobContext);
        iconTextButton -edit -enable 1 $cbName;
        iconTextButton -edit -enable 1 $buttonName;
    }
}

proc mayaUsdTranslatorExport_fillOptionsUIForcedByContextOptions()
{
    // Fill all the UI for all options based on the choices forced
    // by each of the plugin context configuration.
    //
    // Forced options have their corresponding UI disabled since the export
    // plugin now is in control of that option.
    //
    // Note: currently, we have no way to control the order of the export
    //       plugins. If they have conflicting requirements, the conflicting
    //       options will be set to the value set by the last export plugin
    //       that sets those particular options.

    string $contextLabels[] = mayaUsdTranslatorExport_getContextLabels();
    if (size($contextLabels) == 0)
        return;

    mayaUsdTranslatorExport_EnableAllControls();

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        mayaUsdTranslatorExport_updateContextOptionButton($contextLabel, $jobContext);
        if (mayaUsdTranslatorExport_isContextOptionsEnabledByUser($jobContext) == 0) {
            //print("Export plugin " + $contextLabel + "(" + $jobContext + ") is off\n");
            continue;
        }

        string $affectedOptions = `mayaUSDListJobContexts -exportArguments $contextLabel`;
        if ($affectedOptions != "") {
            // Print affected options to help the user figure out what the export plugin is doing.
            print("Options affected by " + $contextLabel + "(" + $jobContext + "): " + $affectedOptions + "\n");
            mayaUsdTranslatorExport_SetFromOptions($affectedOptions, 0, 0);
        }
    }
}

proc mayaUsdTranslatorExport_fillContextOptionsUI(string $listOfJobContexts)
{
    // Fill the UI for each of the plugin context configuration with the data.

    if (startsWith($listOfJobContexts, "[") && endsWith($listOfJobContexts, "]")) {
        if (size($listOfJobContexts) > 2) {
            $listOfJobContexts = substring($listOfJobContexts, 2, size($listOfJobContexts) - 1);
        } else {
            $listOfJobContexts = "";
        }
    }

    // Note: we verify that the enabled context actually exists. Might be redundant, but
    //       initially the list of enabled context comes from the saved ones from a previous
    //       Maya session and the list of loaded plugins might have changed.
    string $jobContexts[] = mayaUsdTranslatorExport_updateAllContextOptionButtons();

    string $enabledJobContexts[] = stringToStringArray($listOfJobContexts, ",");
    for ($enabledJobContext in $enabledJobContexts) {
        for ($jobContext in $jobContexts) {
            if ($enabledJobContext == $jobContext) {
                string $cbName = mayaUsdTranslatorExport_getContextOptionsCheckBoxName($jobContext);
                iconTextButton -edit -image1 "toggle_on" $cbName;
            }
        }
    }

    mayaUsdTranslatorExport_fillOptionsUIForcedByContextOptions();
}

proc string mayaUsdTranslatorExport_queryContextOptionsUI(string $currentOptions, string $jobContextOptionName)
{
    // Query the UI for each of the plugin context configuration to extract the data.

    string $contextLabels[] = mayaUsdTranslatorExport_getContextLabels();
    if (size($contextLabels) == 0)
        return $currentOptions;

    string $enabledJobContexts[];

    for ($contextLabel in $contextLabels) {
        string $jobContext = `mayaUSDListJobContexts -jobContext $contextLabel`;
        if ($jobContext == "")
            continue;
        if (mayaUsdTranslatorExport_isContextOptionsEnabledByUser($jobContext) == 0)
            continue;
        stringArrayInsertAtIndex(255, $enabledJobContexts, $jobContext);
    }

    if (size($enabledJobContexts) > 0) {
        $currentOptions = $currentOptions + ";" + $jobContextOptionName + "=[" + stringArrayToString($enabledJobContexts, ",") + "]";
    }

    return $currentOptions;
}

global proc mayaUsdTranslatorExport_contextOptionsCheckBoxCB(string $jobContext)
{
    // Callback for the checkbox of each of the plugin context configuration.

    // Note: for now, the design requires that the associated button be enabled.

    string $cbName = mayaUsdTranslatorExport_getContextOptionsCheckBoxName($jobContext);
    string $currentToggle = `iconTextButton -query -image1 $cbName`;
    if ($currentToggle == "toggle_on")
        $currentToggle = "toggle_off";
    else
        $currentToggle = "toggle_on";
    iconTextButton -edit -image1 $currentToggle $cbName;

    mayaUsdTranslatorExport_fillOptionsUIForcedByContextOptions();
}

global proc mayaUsdTranslatorExport_contextOptionsShowExportUI(string $optionsString)
{
    global string $_mayaUsdTranslatorExport_parent;
    global string $_mayaUsdTranslatorExport_sections;
    global string $_mayaUsdTranslatorExport_contextLabel;

    string $newSettings = `mayaUSDListJobContexts -showExportUI
        $_mayaUsdTranslatorExport_contextLabel $_mayaUsdTranslatorExport_parent $optionsString`;

    string $jobContext = `mayaUSDListJobContexts -jobContext $_mayaUsdTranslatorExport_contextLabel`;
    if ($jobContext == "")
        return;

    if (!mayaUsdTranslatorExport_isContextOptionsEnabledByUser($jobContext))
        return;

    // Fill the settings UI with the options from the export options UI.
    mayaUsdTranslatorExport_fillOptionsUIForcedByContextOptions();
}

global proc mayaUsdTranslatorExport_contextOptionsButtonCB(string $contextLabel)
{
    // Callback for the "options" button of each of the plugin context configuration.
    // Show the options dialog for the export plugin.
    global string $_mayaUsdTranslatorExport_parent;
    global string $_mayaUsdTranslatorExport_sections;
    global string $_mayaUsdTranslatorExport_contextLabel;

    $_mayaUsdTranslatorExport_contextLabel = $contextLabel;

    // To show the opitons UI, we need to pass it the current set of options,
    // so we call the main entry-point in "query" mode with a callback that
    // will receive the settings and will show the UI.
    mayaUsdTranslatorExport(
        $_mayaUsdTranslatorExport_parent,
        "query=" + $_mayaUsdTranslatorExport_sections,
        "",
        "mayaUsdTranslatorExport_contextOptionsShowExportUI");
}

// Callback called when the animation frame layout is expanded.
// Set the animOptsCol layout visibility status based on the
// animationCheckBox checkbox value. By default, maya look
// to set all childs widget of frameLayout visible when the
// frameLayout is expanded.
global proc mayaUsdTranslatorExport_AnimationFrameLayoutExpandCB() {
    if (`checkBoxGrp -exists animationCheckBox` == 0)
        return;

    columnLayout -e -visible (`checkBoxGrp -q -v1 animationCheckBox`) animOptsCol;
}

global proc mayaUsdTranslatorExport_AnimationRangeCB() {
    if (`intFieldGrp -exists frameRangeFields` == 0)
        return;

    int $startTime = `playbackOptions -q -animationStartTime`;
    int $endTime = `playbackOptions -q -animationEndTime`;
    intFieldGrp -e -v1 $startTime -v2 $endTime frameRangeFields;
}

proc int mayaUsdTranslatorExport_HasFilteredPrimitive(string $arg, string $primType) {
    if (startsWith($arg, "[") && endsWith($arg, "]")) {
        if (size($arg) > 2) {
            $arg = substring($arg, 2, size($arg) - 1);
        }
    }
    string $filteredTypes[] = stringToStringArray($arg, ",");
    return stringArrayFind($primType, 0, $filteredTypes) != -1;
}

proc mayaUsdTranslatorExport_SetConvertMaterialsToCheckboxes(string $arg, int $enable, int $processJobContext) {
    if (startsWith($arg, "[") && endsWith($arg, "]")) {
        if (size($arg) > 2) {
            $arg = substring($arg, 2, size($arg) - 1);
        } else {
            $arg = "";
        }
    }
    string $enabledConversions[] = stringToStringArray($arg, ",");
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";

        if (`checkBoxGrp -exists $widget` == 0)
            continue;

        if(stringArrayFind($opt, 0, $enabledConversions) != -1) {
            checkBoxGrp -e -v1 true -en $enable $widget;
        } else {
            if ($processJobContext == 0) {
                // A job context will not turn off selected options.
                checkBoxGrp -e -v1 false $widget;
            }
        }
    }
}

proc mayaUsdTranslatorExport_DisableConvertMaterialsToCheckboxes() {
    // If we are using a legacy material export mode, then disable the checkboxes
    // since this material export mode is not compatible with multi-material export.
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";
        checkBoxGrp -e -v1 false -en false $widget;
    }
}

proc string mayaUsdTranslatorExport_AppendConvertMaterialsTo(string $currentOptions, string $arg) {
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    string $enabledConversions[];
    int $allDisabled = 1;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";
        if (`checkBoxGrp -exists $widget` == 0)
            continue;
        if (`checkBoxGrp -q -en $widget` == 1) {
            $allDisabled = 0;
        }
        if (`checkBoxGrp -q -v1 $widget` == 1) {
            stringArrayInsertAtIndex(255, $enabledConversions, $opt);
        }
    }
    if ($allDisabled == 0) {
        return $currentOptions + ";shadingMode=useRegistry;" + $arg + "=[" + stringArrayToString($enabledConversions, ",") + "]";
    }
    return $currentOptions + ";shadingMode=none";    
}

global proc mayaUsdTranslatorExport_EnableAllControls() {
    global string $gMayaUsdTranslatorExport_SectionNames[];
    string $sectionNames[] = $gMayaUsdTranslatorExport_SectionNames;
    
    // Restore all controls to fully interactive:
    if (stringArrayContains("geometry", $sectionNames)) {
        checkBoxGrp -e -en 1 exportMeshesCheckBox;
        optionMenuGrp -e -en 1 defaultMeshSchemePopup;
        checkBoxGrp -e -en 1 exportUVsCheckBox;
        optionMenuGrp -e -en 1 skelsPopup;
        optionMenuGrp -e -en 1 skinClustersPopup;
        checkBoxGrp -e -en 1 exportBlendShapesCheckBox;
        checkBoxGrp -e -en 1 exportDisplayColorCheckBox;
        checkBoxGrp -e -en 1 exportComponentTagsCheckBox;
        checkBoxGrp -e -en 1 exportCurvesCheckBox;
        checkBoxGrp -e -en 1 exportColorSetsCheckBox;
    }

    if (stringArrayContains("animation", $sectionNames)) {
        if (stringArrayContains("animation-data", $sectionNames)) {
            checkBoxGrp -e -en 1 animationCheckBox;
        }
        checkBoxGrp -e -en 1 eulerFilterCheckBox;
        checkBoxGrp -e -en 1 staticSingleSampleCheckBox;
        intFieldGrp -e -en1 1 -en2 1 frameRangeFields;
        floatFieldGrp -e -en1 1 frameStrideField;
        textFieldGrp -e -en 1 frameSampleField;
    }

    if (stringArrayContains("output", $sectionNames)) {
        optionMenuGrp -e -en 1 defaultUSDFormatPopup;
        if (stringArrayContains("output-RootPrim", $sectionNames)) {
            textFieldGrp -e -en 1 rootPrimField;
            optionMenuGrp -e -en 1 rootPrimTypePopup;
        }
        optionMenuGrp -e -en -1 exportDefaultPrim;
    }

    if (stringArrayContains("materials", $sectionNames)) {
        string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
        for ($conversion in $conversions) {
            string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
            string $widgetName = $opt + "_ConvertMaterialsToCheckBox";
            checkBoxGrp -e -en 1 $widgetName;
        }
        optionMenuGrp -e -en 1 exportRelativeTexturesPopup;
    }

    if (stringArrayContains("advanced", $sectionNames)) {
        checkBoxGrp -e -en 1 exportCamerasCheckBox;
        checkBoxGrp -e -en 1 exportLightsCheckBox;
        optionMenuGrp -e -en 1 exportInstancesPopup;
        checkBoxGrp -e -en 1 exportVisibilityCheckBox;
        checkBoxGrp -e -en 1 mergeTransformAndShapeCheckBox;
        checkBoxGrp -e -en 1 includeNamespacesCheckBox;
        checkBoxGrp -e -en 1 worldspaceCheckBox;
    }
    
    if (stringArrayContains("context", $sectionNames)) {
        mayaUsdTranslatorExport_enableContextOptions();        
    }
}

global proc mayaUsdTranslatorExport_SetFromOptions(string $currentOptions, int $enable, int $processJobContext) {
    string $optionList[];
    string $optionBreakDown[];
    string $listOfJobContexts = "";
    int $index;

    if (size($currentOptions) > 0) {
        // No job context means we don't process job context.
        if (gmatch($currentOptions, "*jobContext=*") == 0) {
            $processJobContext = 0;
        }

        tokenize($currentOptions, ";", $optionList);
        int $supportsMultiExport = 1;
        int $exportNurbsCurves = 1;
        int $contextForcesFilterTypes = $enable;
        int $contextForcesExcludeTypes = $enable;

        int $exportMeshes = 1;
        int $exportCameras = 1;
        int $exportLights = 1;

        int $hasRootPrim = 0;

        string $excludeTypes;
        for ($index = 0; $index < size($optionList); $index++) {
            tokenize($optionList[$index], "=", $optionBreakDown);
            if ($optionBreakDown[0] == "exportUVs") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportUVsCheckBox");
            } else if ($optionBreakDown[0] == "exportRelativeTextures") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "exportRelativeTexturesPopup");
            } else if ($optionBreakDown[0] == "exportSkels") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "skelsPopup");
            } else if ($optionBreakDown[0] == "exportSkin") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "skinClustersPopup");
            } else if ($optionBreakDown[0] == "exportBlendShapes") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportBlendShapesCheckBox");
            } else if ($optionBreakDown[0] == "filterTypes") {
                $contextForcesFilterTypes = 1;
                // Negative filter. See if nurbsCurve is in the list:
                if (mayaUsdTranslatorExport_HasFilteredPrimitive($optionBreakDown[1], "nurbsCurve")) {
                    $exportNurbsCurves = 0;
                }
            } else if($optionBreakDown[0] == "excludeExportTypes"){
                $contextForcesExcludeTypes = 1;
                if(mayaUsdTranslatorExport_HasFilteredPrimitive($optionBreakDown[1], "Meshes")){
                    $exportMeshes = 0;
                }
                if(mayaUsdTranslatorExport_HasFilteredPrimitive($optionBreakDown[1], "Cameras")){
                    $exportCameras = 0;
                }
                if(mayaUsdTranslatorExport_HasFilteredPrimitive($optionBreakDown[1], "Lights")){
                    $exportLights = 0;
                }
            } else if ($optionBreakDown[0] == "exportColorSets") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportColorSetsCheckBox");
            } else if ($optionBreakDown[0] == "exportComponentTags") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportComponentTagsCheckBox");
            } else if ($optionBreakDown[0] == "jobContext" && $processJobContext == 1) {
                // Must be kept last, and only done on main options:
                $listOfJobContexts = $optionBreakDown[1];
            } else if ($optionBreakDown[0] == "defaultMeshScheme") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "defaultMeshSchemePopup");
            } else if ($optionBreakDown[0] == "defaultUSDFormat") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "defaultUSDFormatPopup");
            } else if ($optionBreakDown[0] == "animation") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "animationCheckBox");
            } else if ($optionBreakDown[0] == "eulerFilter") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "eulerFilterCheckBox");
            } else if ($optionBreakDown[0] == "staticSingleSample") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "staticSingleSampleCheckBox");
            } else if ($optionBreakDown[0] == "startTime") {
                int $startTime = (int)$optionBreakDown[1];
                intFieldGrp -e -v1 $startTime -en1 $enable frameRangeFields;
            } else if ($optionBreakDown[0] == "endTime") {
                int $endTime = (int)$optionBreakDown[1];
                intFieldGrp -e -v2 $endTime -en2 $enable frameRangeFields;
            } else if ($optionBreakDown[0] == "frameStride") {
                float $frameStride = (float)$optionBreakDown[1];
                floatFieldGrp -e -v1 $frameStride -en1 $enable frameStrideField;
            } else if ($optionBreakDown[0] == "frameSample") {
                mayaUsdTranslatorExport_SetTextField($optionBreakDown[1], $enable, "frameSampleField");
            } else if ($optionBreakDown[0] == "rootPrim") {
                mayaUsdTranslatorExport_SetTextField($optionBreakDown[1], $enable, "rootPrimField");
                $hasRootPrim = 1;
            } else if ($optionBreakDown[0] == "rootPrimType") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "rootPrimTypePopup");
            } else if ($optionBreakDown[0] == "convertMaterialsTo") {
                mayaUsdTranslatorExport_SetConvertMaterialsToCheckboxes($optionBreakDown[1], $enable, $processJobContext);
            } else if ($optionBreakDown[0] == "shadingMode" && $optionBreakDown[1] != "useRegistry") {
                $supportsMultiExport = 0;
            } else if ($optionBreakDown[0] == "exportDisplayColor") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportDisplayColorCheckBox");
            } else if ($optionBreakDown[0] == "exportInstances") {
                mayaUsdTranslatorExport_SetOptionMenuByBool($optionBreakDown[1], $enable, "exportInstancesPopup");
            } else if ($optionBreakDown[0] == "exportVisibility") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportVisibilityCheckBox");
            } else if ($optionBreakDown[0] == "mergeTransformAndShape") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "mergeTransformAndShapeCheckBox");
            } else if ($optionBreakDown[0] == "stripNamespaces") {
                mayaUsdTranslatorExport_SetOppositeCheckbox($optionBreakDown[1], $enable, "includeNamespacesCheckBox");
            } else if ($optionBreakDown[0] == "worldspace") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "worldspaceCheckBox");
            }
        }

        // We now know if we export nurbs curves or not and if forced by the job context:
        if ($contextForcesFilterTypes == 1) {
            checkBoxGrp -e -v1 $exportNurbsCurves -en $enable exportCurvesCheckBox;
        }
        if($contextForcesExcludeTypes == 1){
            checkBoxGrp -e -v1 $exportMeshes -en $enable exportMeshesCheckBox;
            checkBoxGrp -e -v1 $exportCameras -en $enable exportCamerasCheckBox;
            checkBoxGrp -e -v1 $exportLights -en $enable exportLightsCheckBox;
            mayaUsdTranslatorExport_MeshCB();
        }

        if ($listOfJobContexts != "" && $processJobContext == 1) {
            mayaUsdTranslatorExport_fillContextOptionsUI($listOfJobContexts);
        } else {
            // Note: this is necessary to correctly hide the export option button
            //       if not supported by the plugin.
            mayaUsdTranslatorExport_updateAllContextOptionButtons();
        }

        if ($processJobContext == 0 && $supportsMultiExport == 0) {
            mayaUsdTranslatorExport_DisableConvertMaterialsToCheckboxes();
        }
        if ($hasRootPrim == 1){
            mayaUsdTranslatorExport_RootPrimCB();
        }
    }

    // Set visibility for anim widgets (but do not update the start/end time to playback range
    // as they will be set by the caller).
    mayaUsdTranslatorExport_AnimationCB();
}

proc string[] parseActionSectionNames(string $sections, string $out_expandedSections[], string $out_collapsedSections[])
{
    global string $gMayaUsdTranslatorExport_SectionNames[];

    string $allSections[] = { "context", "output", "output-RootPrim", "geometry", "materials", "animation", "animation-data", "advanced" };

    string $sectionList[];
    tokenize($sections, ";", $sectionList);

    // Build the section names array, supporting the "all" and "!" special tokens.
    // By default we start with all sections.
    string $sectionNames[] = $allSections;

    string $name;
    for ($name in $sectionList) {
        if ($name == "all") {
            $sectionNames = $allSections;
        } else if ($name == "none") {
            $sectionNames = {};
        } else if (startsWith($name, "!")) {
            $name = stringRemovePrefix($name, "!");
            string $removed[] = { $name };
            $sectionNames = stringArrayRemove($removed, $sectionNames);
        } else {
            if (endsWith($name, ":expanded")) {
                $name = stringRemoveSuffix($name, ":expanded");
                stringArrayInsertAtIndex(255, $out_expandedSections, $name);
            }
            else if (endsWith($name, ":collapsed")) {
                $name = stringRemoveSuffix($name, ":collapsed");
                stringArrayInsertAtIndex(255, $out_collapsedSections, $name);
            }
            stringArrayInsertAtIndex(255, $sectionNames, $name);
        }
    }

    $gMayaUsdTranslatorExport_SectionNames = $sectionNames;
    return $sectionNames;
}

global proc int mayaUsdTranslatorExport (string $parent,
                                     string $actionAndSections,
                                     string $initialSettings,
                                     string $resultCallback )
//
//  Description:
//    This script posts the USD Export file translator options.
//    The optionsString is of the form:
//    varName1=value1;varName2=value2;...
//
//  Parameters:
//    $parent - the elf parent layout for this options layout. It is
//            always a scrollLayout.
//    $actionAndSections - the action that is to be performed with this invocation of this proc.
//        Valid options are:
//            "query" - construct the options string and pass it to the resultCallback.
//            "post" - post all the elf controls.
//            "fill" - refill all the elf controls with the data.
//
//        In addition to the action, the list of UI sections that are desired can be added
//        with the syntax "action=section1;section2;..." where the section names can be:
//            context, output, output-RootPrim, geometry, materials, animation, animation-data, advanced
//
//            An optional tag (":expanded" or ":collapsed") can be added to each of these sections to
//            specify the default state (expanded or collapsed) of the frameLayout (if one exists for
//            that section). Example:
//                "action=section1:expanded;section2:collapsed"
//
//        The section name can also be "all", "none" or prefixed with "!":
//            - When "all" is used, all sections are included.
//            - When "none" is used, all sections are removed.
//            - When a "!" prefix is used, the sectionis removed instead of added.
//
//    $initialSettings - the current options string in effect at the time this script is invoked.
//    $resultCallback - This is the proc to be called with the result string.
//            resultCallback ( string $optionsString )
//
//    Returns:
//        1 if successful.
//        0 otherwise.
//
{
    // check for Export All or Export Selection
    // check for export option box window first, if it doesn't exist means user opened the main export window
    global string $gOptionBox;
    global int $exportAll;
    if (`window -exists $gOptionBox`) {
        string $title = `window -query -title $gOptionBox`;
        if ($title == `uiRes("m_fileOptions.kExportAllOptions")`) {
            $exportAll = 1;
        } else if ($title == `uiRes("m_fileOptions.kExportSelectionOptions")`) {
            $exportAll = 0;
        }
    } else{
        global string $gOperationMode;
        if ($gOperationMode == "ExportAll"){
            $exportAll = 1;
        } else{
            $exportAll = 0;
        }
    }

    int $bResult;
    string $currentOptions;

    string $action;
    string $sections;
    {
        string $actionSections[];
        tokenize($actionAndSections, "=", $actionSections);
        if (size($actionSections)) {
            $action = $actionSections[0];
            $sections = $actionSections[1];
        } else {
            $action = $actionAndSections;
            $sections = "";
        }
    }

    if ($action == "post") {
        string $expandedSections[];
        string $collapsedSections[];
        string $sectionNames[] = parseActionSectionNames($sections, $expandedSections, $collapsedSections);
            
        setParent $parent;

        columnLayout -adj true usdOptsCol;

        if (stringArrayContains("context", $sectionNames)) {
            mayaUsdTranslatorExport_createContextOptions($parent, $sections, $collapsedSections);
        }

        if (stringArrayContains("output", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("output", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameOutputLbl")` -collapsable true -collapse $collapse outputFrameLayout;
                separator -style "none";

                optionMenuGrp -l `getMayaUsdString("kExportDefaultFormatLbl")` -annotation `getMayaUsdString("kExportDefaultFormatAnn")` -statusBarMessage `getMayaUsdString("kExportDefaultFormatStatus")` defaultUSDFormatPopup;
                    menuItem -l `getMayaUsdString("kExportDefaultFormatBinLbl")` -ann "usdc";
                    menuItem -l `getMayaUsdString("kExportDefaultFormatAscLbl")` -ann "usda";

                if (stringArrayContains("output-RootPrim", $sectionNames)) {
                    //separator -style "none";

                    textFieldGrp -l `getMayaUsdString("kExportRootPrimLbl")` -placeholderText `getMayaUsdString("kExportRootPrimPht")`
                        -annotation `getMayaUsdString("kExportRootPrimAnn")` -textChangedCommand "mayaUsdTranslatorExport_RootPrimCB" rootPrimField;
                    
                    optionMenuGrp -l `getMayaUsdString("kExportRootPrimTypeLbl")` rootPrimTypePopup;
                        menuItem -l `getMayaUsdString("kExportScopeLbl")` -ann `getMayaUsdString("kExportScopeAnn")`;
                        menuItem -l `getMayaUsdString("kExportXformLbl")` -ann `getMayaUsdString("kExportXformAnn")`;
                }

                optionMenuGrp -l `getMayaUsdString("kExportDefaultPrimLbl")` -annotation `getMayaUsdString("kExportDefaultPrimAnn")` exportDefaultPrim;

                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("geometry", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("geometry", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameGeometryLbl")` -collapsable true -collapse $collapse geometryFrameLayout;
                separator -style "none";
                // if export Meshes
                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportMeshesLbl")` -annotation `getMayaUsdString("kExportMeshesAnn")` -cc ("mayaUsdTranslatorExport_MeshCB") exportMeshesCheckBox;

                columnLayout -width 100 meshExportOptsCol;
                    optionMenuGrp -l `getMayaUsdString("kExportSubdMethodLbl")` -annotation `getMayaUsdString("kExportSubdMethodAnn")` defaultMeshSchemePopup;
                        menuItem -l `getMayaUsdString("kExportSubdMethodCCLbl")` -ann "catmullClark";
                        menuItem -l `getMayaUsdString("kExportSubdMethodBiLbl")` -ann "bilinear";
                        menuItem -l `getMayaUsdString("kExportSubdMethodLoLbl")` -ann "loop";
                        menuItem -l `getMayaUsdString("kExportSubdMethodNoLbl")` -ann "none";

                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportColorSetsLbl")` -annotation `getMayaUsdString("kExportColorSetsAnn")` exportColorSetsCheckBox;

                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportComponentTagsLbl")` -annotation `getMayaUsdString("kExportComponentTagsAnn")` exportComponentTagsCheckBox;

                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportUVSetsLbl")` -annotation `getMayaUsdString("kExportUVSetsAnn")` exportUVsCheckBox;

                setParent ..;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportCurvesLbl")` -annotation `getMayaUsdString("kExportCurvesAnn")` exportCurvesCheckBox;

                optionMenuGrp -l `getMayaUsdString("kExportSkelsLbl")` -annotation `getMayaUsdString("kExportSkelsAnn")` skelsPopup;
                    menuItem -l `getMayaUsdString("kExportSkelsNoneLbl")` -ann "none";
                    menuItem -l `getMayaUsdString("kExportSkelsAllLbl")` -ann "auto";
                    menuItem -l `getMayaUsdString("kExportSkelsRootLbl")` -ann "explicit";

                optionMenuGrp -l `getMayaUsdString("kExportSkinClustersLbl")` -annotation `getMayaUsdString("kExportSkinClustersAnn")` skinClustersPopup;
                    menuItem -l `getMayaUsdString("kExportSkelsNoneLbl")` -ann "none";
                    menuItem -l `getMayaUsdString("kExportSkelsAllLbl")` -ann "auto";
                    menuItem -l `getMayaUsdString("kExportSkelsRootLbl")` -ann "explicit";

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportBlendShapesLbl")` -annotation `getMayaUsdString("kExportBlendShapesAnn")` exportBlendShapesCheckBox;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportDisplayColorLbl")` -annotation `getMayaUsdString("kExportDisplayColorAnn")` exportDisplayColorCheckBox;

                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("materials", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("materials", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameMaterialsLbl")` -collapsable true -collapse $collapse -ann `getMayaUsdString("kExportMaterialsAnn")` materialsFrameLayout;
                separator -style "none";
                columnLayout -width 100 materialOptsCol;
                    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
                    for ($conversion in $conversions) {
                        string $ann = `mayaUSDListShadingModes -ea $conversion -useRegistryOnly`;
                        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
                        string $widgetName = $opt + "_ConvertMaterialsToCheckBox";

                        checkBoxGrp -cw 2 240 -numberOfCheckBoxes 1
                            -label "" -label1 $conversion -annotation $ann
                            $widgetName;
                    }

                    optionMenuGrp -l `getMayaUsdString("kExportRelativeTexturesLbl")` -annotation `getMayaUsdString("kExportRelativeTexturesAnn")` exportRelativeTexturesPopup;
                        // The annotation will be used to assign value to token exportRelativeTextures, so lower case is used
                        menuItem -l `getMayaUsdString("kExportRelativeTexturesAutomaticLbl")` -ann "automatic";
                        menuItem -l `getMayaUsdString("kExportRelativeTexturesAbsoluteLbl")` -ann "absolute";
                        menuItem -l `getMayaUsdString("kExportRelativeTexturesRelativeLbl")` -ann "relative";

                    separator -style "none";
                setParent ..;
            setParent ..;
        }

        if (stringArrayContains("animation", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("animation", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameAnimationLbl")` -collapsable true -collapse $collapse 
                        -expandCommand("mayaUsdTranslatorExport_AnimationFrameLayoutExpandCB") animationFrameLayout;
                separator -style "none";

                if (stringArrayContains("animation-data", $sectionNames)) {
                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportAnimDataLbl")` -cc ("mayaUsdTranslatorExport_AnimationCB")
                        -annotation `getMayaUsdString("kExportAnimDataAnn")` animationCheckBox;
                }

                columnLayout -width 100 animOptsCol;
                    rowLayout -numberOfColumns 2 -columnAttach 2 "left" 20;
                        intFieldGrp -l `getMayaUsdString("kExportFrameRangeLbl")` -numberOfFields 2 -v1 1 -v2 200 frameRangeFields;
                        button -l `getMayaUsdString("kExportFrameRangeBtn")` -command ("mayaUsdTranslatorExport_AnimationRangeCB") animRangeButton;
                    setParent ..;

                    floatFieldGrp -l `getMayaUsdString("kExportFrameStepLbl")` -v1 1 -annotation `getMayaUsdString("kExportFrameStepAnn")` frameStrideField;

                    textFieldGrp -l `getMayaUsdString("kExportFrameSamplesLbl")` -annotation `getMayaUsdString("kExportFrameSamplesAnn")` frameSampleField;

                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportEulerFilterLbl")` -annotation `getMayaUsdString("kExportEulerFilterAnn")` eulerFilterCheckBox;

                    checkBoxGrp -label "" -label1 `getMayaUsdString("kExportStaticSingleSampleLbl")` -annotation `getMayaUsdString("kExportStaticSingleSampleAnn")` -v1 0 staticSingleSampleCheckBox;

                setParent ..;
                
                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("advanced", $sectionNames)) {
            // The default state for this frame is collapsed, unless the caller explictly wants it expanded.
            int $collapse = stringArrayContains("advanced", $expandedSections) ? false : true;
            frameLayout -label `getMayaUsdString("kExportFrameAdvancedLbl")` -collapsable true -collapse $collapse advancedFrameLayout;
                separator -style "none";

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportCamerasLbl")` -annotation `getMayaUsdString("kExportCamerasAnn")` -cc ("mayaUsdTranslatorExport_updateDefaultPrimList") exportCamerasCheckBox;
                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportLightsLbl")` -annotation `getMayaUsdString("kExportLightsAnn")` -cc ("mayaUsdTranslatorExport_updateDefaultPrimList") exportLightsCheckBox;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportVisibilityLbl")` -annotation `getMayaUsdString("kExportVisibilityAnn")` exportVisibilityCheckBox;

                optionMenuGrp -l `getMayaUsdString("kExportInstancesLbl")` -annotation `getMayaUsdString("kExportInstancesAnn")` exportInstancesPopup;
                    menuItem -l `getMayaUsdString("kExportInstancesFlatLbl")`;
                    menuItem -l `getMayaUsdString("kExportInstancesRefLbl")`;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportMergeShapesLbl")`
                    -annotation `getMayaUsdString("kExportMergeShapesAnn")` mergeTransformAndShapeCheckBox;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportNamespacesLbl")` -annotation `getMayaUsdString("kExportNamespacesAnn")` includeNamespacesCheckBox;

                checkBoxGrp -label "" -label1 `getMayaUsdString("kExportWorldspaceLbl")` -annotation `getMayaUsdString("kExportWorldspaceAnn")` worldspaceCheckBox;

                separator -style "none";
            setParent ..;
        }

        $bResult = 1;

    } else if ($action == "query") {
        string $expandedSections[];
        string $collapsedSections[];
        string $sectionNames[] = parseActionSectionNames($sections, $expandedSections, $collapsedSections);
        // collect all exclude types before append to option list
        string $excludeExportTypes = "";
            
        if (stringArrayContains("geometry", $sectionNames)) {
            $excludeExportTypes = mayaUsdTranslatorExport_SetSuboptionsFromCheckBox($excludeExportTypes, "", "Meshes", "exportMeshesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportUVs", "exportUVsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "exportSkels", "skelsPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "exportSkin", "skinClustersPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportBlendShapes", "exportBlendShapesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportDisplayColor", "exportDisplayColorCheckBox");
            // We currently have only one type to filter. In the future, we might need to build the array separately as more types are added.
            $currentOptions = mayaUsdTranslatorExport_SetFromCheckbox($currentOptions, "", "filterTypes=nurbsCurve", "exportCurvesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportColorSets", "exportColorSetsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportComponentTags", "exportComponentTagsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "defaultMeshScheme", "defaultMeshSchemePopup");
        }

        if (stringArrayContains("animation", $sectionNames)) {
            if (stringArrayContains("animation-data", $sectionNames)) {
                $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "animation", "animationCheckBox");
            }
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "eulerFilter", "eulerFilterCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "staticSingleSample", "staticSingleSampleCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFrameRange($currentOptions);
            $currentOptions = mayaUsdTranslatorExport_AppendFromFloatField($currentOptions, "frameStride", "frameStrideField");
            $currentOptions = mayaUsdTranslatorExport_AppendFromTextField($currentOptions, "frameSample", "frameSampleField");
        }

        if (stringArrayContains("output", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "defaultUSDFormat", "defaultUSDFormatPopup");
            if (stringArrayContains("output-RootPrim", $sectionNames)) {
                $currentOptions = mayaUsdTranslatorExport_AppendFromTextField($currentOptions, "rootPrim", "rootPrimField");
                $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "rootPrimType", "rootPrimTypePopup");
            }
            $currentOptions = mayaUsdTranslatorExport_AppendDefaultPrim($currentOptions, "defaultPrim");
        }

        if (stringArrayContains("materials", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendConvertMaterialsTo($currentOptions, "convertMaterialsTo");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "exportRelativeTextures", "exportRelativeTexturesPopup");
        }

        if (stringArrayContains("advanced", $sectionNames)) {
            $excludeExportTypes = mayaUsdTranslatorExport_SetSuboptionsFromCheckBox($excludeExportTypes, "", "Cameras", "exportCamerasCheckBox");
            $excludeExportTypes = mayaUsdTranslatorExport_SetSuboptionsFromCheckBox($excludeExportTypes, "", "Lights", "exportLightsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromBoolPopup($currentOptions, "exportInstances", "exportInstancesPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportVisibility", "exportVisibilityCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "mergeTransformAndShape", "mergeTransformAndShapeCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendOppositeFromCheckbox($currentOptions, "stripNamespaces", "includeNamespacesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "worldspace", "worldspaceCheckBox");
        }

        if (stringArrayContains("context", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_queryContextOptionsUI($currentOptions, "jobContext");
        }

        // Append the final excludeExportTypes options to the options list
        $currentOptions = $currentOptions + ";" + "excludeExportTypes=[" + $excludeExportTypes + "]";

        eval($resultCallback+" \""+$currentOptions+"\"");
        $bResult = 1;

    } else {
        $bResult = 0;
    }

    if ($action == "post" || $action == "fill") {
        setParent $parent;

        // Now set to current settings.
        $currentOptions = $initialSettings;

        mayaUsdTranslatorExport_EnableAllControls();
        mayaUsdTranslatorExport_SetFromOptions($currentOptions, 1, 1);

        $bResult = 1;
    }

    return $bResult;
}
