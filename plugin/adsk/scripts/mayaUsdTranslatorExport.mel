// Copyright 2019 Autodesk
//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

global string $gMayaUsdTranslatorExport_SectionNames[];

proc string stringRemoveSuffix(string $object, string $suffix)
{
    if (endsWith($object, $suffix)) {
        int $objectLen = size($object);
        int $suffixLen = size($suffix);
        string $newObject = substring($object, 1, ($objectLen - $suffixLen));
        return $newObject;
    }
    return $object;
}

proc mayaUsdTranslatorExport_SetCheckbox(string $arg, int $enable, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return;

    if ($arg == "0") {
        checkBoxGrp -e -v1 false -en $enable $widget;
    } else {
        checkBoxGrp -e -v1 true -en $enable $widget;
    }
}

proc mayaUsdTranslatorExport_SetOppositeCheckbox(string $arg, int $enable, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return;

    if ($arg == "0") {
        checkBoxGrp -e -v1 true -en $enable $widget;
    } else {
        checkBoxGrp -e -v1 false -en $enable $widget;
    }
}

proc mayaUsdTranslatorExport_SetJobContextDropdown(string $arg) {
    if (`optionMenuGrp -exists jobContextPopup` == 0)
        return;

    if (startsWith($arg, "[") && endsWith($arg, "]")) {
        if (size($arg) > 2) {
            $arg = substring($arg, 2, size($arg) - 1);
        } else {
            $arg = "";
        }
    }
    string $enabledContexts[] = stringToStringArray($arg, ",");
    if (size($enabledContexts) > 0) {
        // Pick first element (in case we find many...)
        string $enabledContext = $enabledContexts[0];
        string $niceNames[] = `mayaUSDListJobContexts -export`;
        for ($niceName in $niceNames) {
            string $jobContext = `mayaUSDListJobContexts -jc $niceName`;
            if ($jobContext == $enabledContext) {
                optionMenuGrp -e -value $niceName jobContextPopup;
                return;
            }
        }
    }

    // None is the default.
    optionMenuGrp -e -select 1 jobContextPopup;
}

proc mayaUsdTranslatorExport_SetTextField(string $arg, int $enable, string $widget) {
    if (`textFieldGrp -exists $widget` == 0)
        return;

    textFieldGrp -e -text $arg -en $enable $widget;
}

proc mayaUsdTranslatorExport_SetOptionMenuByAnnotation(
        string $ann, int $enable, string $widget) {

    if (`optionMenuGrp -exists $widget` == 0)
        return;

    int $index = 1; // 1-based indexing.
    for ($i in `optionMenuGrp -q -itemListLong $widget`) {
        if (`menuItem -q -ann $i` == $ann) {
            optionMenuGrp -e -select $index -en $enable $widget;
            return;
        }

        $index++;
    }
}

proc mayaUsdTranslatorExport_SetOptionMenuByBool (
        string $ann, int $enable, string $widget) {

    if (`optionMenuGrp -exists $widget` == 0)
        return;

    // Mapping between a boolean option and an option menu with two choices.
    // False maps to the first menu item, which is index 1.
    // True maps to the second menu item, which is index 2.
    int $optionAsBool = 1;
    if ("1" == $ann)
    {
        $optionAsBool = 2;
    }
    optionMenuGrp -e -select $optionAsBool -en $enable $widget;
}

proc string mayaUsdTranslatorExport_AppendOppositeFromCheckbox(string $currentOptions, string $arg, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=0";
    } else {
        return $currentOptions + ";" + $arg + "=1";
    }
}

proc string mayaUsdTranslatorExport_AppendFromCheckbox(string $currentOptions, string $arg, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=1";
    } else {
        return $currentOptions + ";" + $arg + "=0";
    }
}

proc string mayaUsdTranslatorExport_SetFromCheckbox(string $currentOptions, string $trueValue, string $falseValue, string $widget) {
    if (`checkBoxGrp -exists $widget` == 0)
        return $currentOptions;

    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $trueValue;
    } else {
        return $currentOptions + ";" + $falseValue;
    }
}

proc string mayaUsdTranslatorExport_AppendJobContexts(string $currentOptions, string $arg) {
    if (`optionMenuGrp -exists jobContextPopup` == 0)
        return $currentOptions;

    string $niceName = `optionMenuGrp -q -value jobContextPopup`;
    if ($niceName != `getMayaUsdString("kExportJobContextNoneLbl")`) {
        string $jobContext = `mayaUSDListJobContexts -jc $niceName`;
        if ($jobContext != "") {
            return $currentOptions + ";" + $arg + "=[" + $jobContext + "]";
        }
    }
    return $currentOptions;
}

proc string mayaUsdTranslatorExport_AppendFromPopup(string $currentOptions, string $arg, string $widget) {
    if (`optionMenuGrp -exists $widget` == 0)
        return $currentOptions;

    int $index = `optionMenuGrp -q -select $widget` - 1;
    string $allItems[] = `optionMenuGrp -q -itemListLong $widget`;
    string $item = $allItems[$index];
    string $annotation = `menuItem -q -ann $item`;
    return $currentOptions + ";" + $arg + "=" + $annotation;
}

proc string mayaUsdTranslatorExport_AppendFromBoolPopup(string $currentOptions, string $arg, string $widget) {
    if (`optionMenuGrp -exists $widget` == 0)
        return $currentOptions;

    int $index = `optionMenuGrp -q -select $widget` - 1;
    return $currentOptions + ";" + $arg + "=" + $index;
}

proc string mayaUsdTranslatorExport_AppendFrameRange(string $currentOptions) {
    if (`intFieldGrp -exists frameRangeFields` == 0)
        return $currentOptions;

    int $start = `intFieldGrp -q -value1 frameRangeFields`;
    int $end = `intFieldGrp -q -value2 frameRangeFields`;
    return $currentOptions + ";startTime=" + $start + ";endTime=" + $end;
}

proc string mayaUsdTranslatorExport_AppendFromIntField(string $currentOptions, string $arg, string $widget) {
    if (`intFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `intFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

proc string mayaUsdTranslatorExport_AppendFromFloatField(string $currentOptions, string $arg, string $widget) {
    if (`floatFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `floatFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

proc string mayaUsdTranslatorExport_AppendFromTextField(string $currentOptions, string $arg, string $widget) {
    if (`textFieldGrp -exists $widget` == 0)
        return $currentOptions;

    string $value = `textFieldGrp -q -text $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc mayaUsdTranslatorExport_AnimationCB() {
    if (`checkBoxGrp -exists animationCheckBox` == 0)
        return;

    columnLayout -e -visible (`checkBoxGrp -q -v1 animationCheckBox`) animOptsCol;
}

// Callback called when the animation frame layout is expanded.
// Set the animOptsCol layout visibility status based on the
// animationCheckBox checkbox value. By default, maya look
// to set all childs widget of frameLayout visible when the
// frameLayout is expanded.
global proc mayaUsdTranslatorExport_AnimationFrameLayoutExpandCB() {
    if (`checkBoxGrp -exists animationCheckBox` == 0)
        return;

    columnLayout -e -visible (`checkBoxGrp -q -v1 animationCheckBox`) animOptsCol;
}

global proc mayaUsdTranslatorExport_AnimationRangeCB() {
    if (`intFieldGrp -exists frameRangeFields` == 0)
        return;

    int $startTime = `playbackOptions -q -animationStartTime`;
    int $endTime = `playbackOptions -q -animationEndTime`;
    intFieldGrp -e -v1 $startTime -v2 $endTime frameRangeFields;
}

proc int mayaUsdTranslatorExport_HasFilteredPrimitive(string $arg, string $primType) {
    string $filteredTypes[] = stringToStringArray($arg, ",");
    return stringArrayFind($primType, 0, $filteredTypes) != -1;
}

proc mayaUsdTranslatorExport_SetConvertMaterialsToCheckboxes(string $arg, int $enable, int $processJobContext) {
    if (startsWith($arg, "[") && endsWith($arg, "]")) {
        if (size($arg) > 2) {
            $arg = substring($arg, 2, size($arg) - 1);
        } else {
            $arg = "";
        }
    }
    string $enabledConversions[] = stringToStringArray($arg, ",");
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";

        if (`checkBoxGrp -exists $widget` == 0)
            continue;

        if(stringArrayFind($opt, 0, $enabledConversions) != -1) {
            checkBoxGrp -e -v1 true -en $enable $widget;
        } else {
            if ($processJobContext == 0) {
                // A job context will not turn off selected options.
                checkBoxGrp -e -v1 false $widget;
            }
        }
    }
}

proc mayaUsdTranslatorExport_DisableConvertMaterialsToCheckboxes() {
    // If we are using a legacy material export mode, then disable the checkboxes
    // since this material export mode is not compatible with multi-material export.
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";
        checkBoxGrp -e -v1 false -en false $widget;
    }
}

proc string mayaUsdTranslatorExport_AppendConvertMaterialsTo(string $currentOptions, string $arg) {
    string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
    string $enabledConversions[];
    int $allDisabled = 1;
    for ($conversion in $conversions) {
        string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
        string $widget = $opt + "_ConvertMaterialsToCheckBox";
        if (`checkBoxGrp -exists $widget` == 0)
            continue;
        if (`checkBoxGrp -q -en $widget` == 1) {
            $allDisabled = 0;
        }
        if (`checkBoxGrp -q -v1 $widget` == 1) {
            stringArrayInsertAtIndex(255, $enabledConversions, $opt);
        }
    }
    if ($allDisabled == 0) {
        return $currentOptions + ";shadingMode=useRegistry;" + $arg + "=[" + stringArrayToString($enabledConversions, ",") + "]";
    }
    return $currentOptions + ";shadingMode=none";    
}

global proc mayaUsdTranslatorExport_EnableAllControls() {
    global string $gMayaUsdTranslatorExport_SectionNames[];
    string $sectionNames[] = $gMayaUsdTranslatorExport_SectionNames;
    
    // Restore all controls to fully interactive:
    if (stringArrayContains("geometry", $sectionNames)) {
        optionMenuGrp -e -en 1 defaultMeshSchemePopup;
        checkBoxGrp -e -en 1 exportUVsCheckBox;
        optionMenuGrp -e -en 1 skelsPopup;
        optionMenuGrp -e -en 1 skinClustersPopup;
        checkBoxGrp -e -en 1 exportBlendShapesCheckBox;
        checkBoxGrp -e -en 1 exportDisplayColorCheckBox;
        checkBoxGrp -e -en 1 exportComponentTagsCheckBox;
        checkBoxGrp -e -en 1 exportCurvesCheckBox;
        checkBoxGrp -e -en 1 exportColorSetsCheckBox;
    }

    if (stringArrayContains("animation", $sectionNames)) {
        if (stringArrayContains("animation-data", $sectionNames)) {
            checkBoxGrp -e -en 1 animationCheckBox;
        }
        checkBoxGrp -e -en 1 eulerFilterCheckBox;
        checkBoxGrp -e -en 1 staticSingleSampleCheckBox;
        intFieldGrp -e -en1 1 -en2 1 frameRangeFields;
        floatFieldGrp -e -en1 1 frameStrideField;
        textFieldGrp -e -en 1 frameSampleField;
    }

    if (stringArrayContains("output", $sectionNames)) {
        optionMenuGrp -e -en 1 defaultUSDFormatPopup;
        if (stringArrayContains("output-parentscope", $sectionNames)) {
            textFieldGrp -e -en 1 parentScopeField;
        }
    }

    if (stringArrayContains("materials", $sectionNames)) {
        string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
        for ($conversion in $conversions) {
            string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
            string $widgetName = $opt + "_ConvertMaterialsToCheckBox";
            checkBoxGrp -e -en 1 $widgetName;
        }
    }

    if (stringArrayContains("advanced", $sectionNames)) {
        optionMenuGrp -e -en 1 exportInstancesPopup;
        checkBoxGrp -e -en 1 exportVisibilityCheckBox;
        checkBoxGrp -e -en 1 mergeTransformAndShapeCheckBox;
        checkBoxGrp -e -en 1 includeNamespacesCheckBox;
        checkBoxGrp -e -en 1 worldspaceCheckBox;
    }
    
    if (stringArrayContains("context", $sectionNames)) {
        optionMenuGrp -e -en 1 jobContextPopup;
    }
}

global proc mayaUsdTranslatorExport_SetFromOptions(string $currentOptions, int $enable, int $processJobContext) {
    string $optionList[];
    string $optionBreakDown[];
    string $jobContext = "";
    int $index;

    if (size($currentOptions) > 0) {
        // No job context means we don't process job context.
        if (gmatch($currentOptions, "*jobContext=*") == 0) {
            $processJobContext = 0;
        }

        tokenize($currentOptions, ";", $optionList);
        int $supportsMultiExport = 1;
        int $exportNurbsCurves = 1;
        int $contextForcesFilterTypes = $enable;
        for ($index = 0; $index < size($optionList); $index++) {
            tokenize($optionList[$index], "=", $optionBreakDown);
            if ($optionBreakDown[0] == "exportUVs") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportUVsCheckBox");
            } else if ($optionBreakDown[0] == "exportSkels") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "skelsPopup");
            } else if ($optionBreakDown[0] == "exportSkin") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "skinClustersPopup");
            } else if ($optionBreakDown[0] == "exportBlendShapes") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportBlendShapesCheckBox");
            } else if ($optionBreakDown[0] == "filterTypes") {
                $contextForcesFilterTypes = 1;
                // Negative filter. See if nurbsCurve is in the list:
                if (mayaUsdTranslatorExport_HasFilteredPrimitive($optionBreakDown[1], "nurbsCurve")) {
                    $exportNurbsCurves = 0;
                }
            } else if ($optionBreakDown[0] == "exportColorSets") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportColorSetsCheckBox");
            } else if ($optionBreakDown[0] == "exportComponentTags") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportComponentTagsCheckBox");
            } else if ($optionBreakDown[0] == "jobContext" && $processJobContext == 1) {
                // Must be kept last, and only done on main options:
                $jobContext = $optionBreakDown[1];
            } else if ($optionBreakDown[0] == "defaultMeshScheme") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "defaultMeshSchemePopup");
            } else if ($optionBreakDown[0] == "defaultUSDFormat") {
                mayaUsdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], $enable, "defaultUSDFormatPopup");
            } else if ($optionBreakDown[0] == "animation") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "animationCheckBox");
                mayaUsdTranslatorExport_AnimationCB();
            } else if ($optionBreakDown[0] == "eulerFilter") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "eulerFilterCheckBox");
            } else if ($optionBreakDown[0] == "staticSingleSample") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "staticSingleSampleCheckBox");
            } else if ($optionBreakDown[0] == "startTime") {
                int $startTime=$optionBreakDown[1];
                intFieldGrp -e -v1 $startTime -en1 $enable frameRangeFields;
            } else if ($optionBreakDown[0] == "endTime") {
                int $endTime; $endTime=$optionBreakDown[1];
                intFieldGrp -e -v2 $endTime -en2 $enable frameRangeFields;
            } else if ($optionBreakDown[0] == "frameStride") {
                float $frameStride = $optionBreakDown[1];
                floatFieldGrp -e -v1 $frameStride -en1 $enable frameStrideField;
            } else if ($optionBreakDown[0] == "frameSample") {
                mayaUsdTranslatorExport_SetTextField($optionBreakDown[1], $enable, "frameSampleField");
            } else if ($optionBreakDown[0] == "parentScope") {
                mayaUsdTranslatorExport_SetTextField($optionBreakDown[1], $enable, "parentScopeField");
            } else if ($optionBreakDown[0] == "convertMaterialsTo") {
                mayaUsdTranslatorExport_SetConvertMaterialsToCheckboxes($optionBreakDown[1], $enable, $processJobContext);
            } else if ($optionBreakDown[0] == "shadingMode" && $optionBreakDown[1] != "useRegistry") {
                $supportsMultiExport = 0;
            } else if ($optionBreakDown[0] == "exportDisplayColor") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportDisplayColorCheckBox");
            } else if ($optionBreakDown[0] == "exportInstances") {
                mayaUsdTranslatorExport_SetOptionMenuByBool($optionBreakDown[1], $enable, "exportInstancesPopup");
            } else if ($optionBreakDown[0] == "exportVisibility") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "exportVisibilityCheckBox");
            } else if ($optionBreakDown[0] == "mergeTransformAndShape") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "mergeTransformAndShapeCheckBox");
            } else if ($optionBreakDown[0] == "stripNamespaces") {
                mayaUsdTranslatorExport_SetOppositeCheckbox($optionBreakDown[1], $enable, "includeNamespacesCheckBox");
            } else if ($optionBreakDown[0] == "worldspace") {
                mayaUsdTranslatorExport_SetCheckbox($optionBreakDown[1], $enable, "worldspaceCheckBox");
            }
        }

        // We now know if we export nurbs curves or not and if forced by the job context:
        if ($contextForcesFilterTypes == 1) {
            checkBoxGrp -e -v1 $exportNurbsCurves -en $enable exportCurvesCheckBox;
        }

        if ($jobContext != "" && $processJobContext == 1) {
            mayaUsdTranslatorExport_SetJobContextDropdown($jobContext);
            mayaUsdTranslatorExport_JobContextCB();
        }
        if ($processJobContext == 0 && $supportsMultiExport == 0) {
            mayaUsdTranslatorExport_DisableConvertMaterialsToCheckboxes();
        }
    }
}

global proc mayaUsdTranslatorExport_JobContextCB() {
    mayaUsdTranslatorExport_EnableAllControls();

    string $niceName = `optionMenuGrp -q -value jobContextPopup`;
    if ($niceName != `getMayaUsdString("kExportJobContextNoneLbl")`) {
        string $affectedOptions = `mayaUSDListJobContexts -eg $niceName`;
        if ($affectedOptions != "") {
            mayaUsdTranslatorExport_SetFromOptions($affectedOptions, 0, 0);
        }
    }
}

proc string[] parseActionSectionNames(string $sections, string $out_expandedSections[], string $out_collapsedSections[])
{
    global string $gMayaUsdTranslatorExport_SectionNames[];

    string $allSections[] = { "context", "output", "output-parentscope", "geometry", "materials", "animation", "animation-data", "advanced" };

    string $sectionList[];
    tokenize($sections, ";", $sectionList);

    // Build the section names array, supporting the "all" and "!" special tokens.
    // By default we start with all sections.
    string $sectionNames[] = $allSections;

    string $name;
    for ($name in $sectionList) {
        if ($name == "all") {
            $sectionNames = $allSections;
        } else if ($name == "none") {
            $sectionNames = {};
        } else if (startsWith($name, "!")) {
            $name = stringRemovePrefix($name, "!");
            string $removed[] = { $name };
            $sectionNames = stringArrayRemove($removed, $sectionNames);
        } else {
            if (endsWith($name, ":expanded")) {
                $name = stringRemoveSuffix($name, ":expanded");
                stringArrayInsertAtIndex(255, $out_expandedSections, $name);
            }
            else if (endsWith($name, ":collapsed")) {
                $name = stringRemoveSuffix($name, ":collapsed");
                stringArrayInsertAtIndex(255, $out_collapsedSections, $name);
            }
            stringArrayInsertAtIndex(255, $sectionNames, $name);
        }
    }

    $gMayaUsdTranslatorExport_SectionNames = $sectionNames;
    return $sectionNames;
}

global proc int mayaUsdTranslatorExport (string $parent,
                                     string $actionAndSections,
                                     string $initialSettings,
                                     string $resultCallback )
//
//  Description:
//    This script posts the USD Export file translator options.
//    The optionsString is of the form:
//    varName1=value1;varName2=value2;...
//
//  Parameters:
//    $parent - the elf parent layout for this options layout. It is
//            always a scrollLayout.
//    $actionAndSections - the action that is to be performed with this invocation of this proc.
//        Valid options are:
//            "query" - construct the options string and pass it to the resultCallback.
//            "post" - post all the elf controls.
//            "fill" - refill all the elf controls with the data.
//
//        In addition to the action, the list of UI sections that are desired can be added
//        with the syntax "action=section1;section2;..." where the section names can be:
//            context, output, output-parentscope, geometry, materials, animation, animation-data, advanced
//
//            An optional tag (":expanded" or ":collapsed") can be added to each of these sections to
//            specify the default state (expanded or collapsed) of the frameLayout (if one exists for
//            that section). Example:
//                "action=section1:expanded;section2:collapsed"
//
//        The section name can also be "all", "none" or prefixed with "!":
//            - When "all" is used, all sections are included.
//            - When "none" is used, all sections are removed.
//            - When a "!" prefix is used, the sectionis removed instead of added.
//
//    $initialSettings - the current options string in effect at the time this script is invoked.
//    $resultCallback - This is the proc to be called with the result string.
//            resultCallback ( string $optionsString )
//
//    Returns:
//        1 if successful.
//        0 otherwise.
//
{
    int $bResult;
    string $currentOptions;

    string $action;
    string $sections;
    {
        string $actionSections[];
        tokenize($actionAndSections, "=", $actionSections);
        if (size($actionSections)) {
            $action = $actionSections[0];
            $sections = $actionSections[1];
        } else {
            $action = $actionAndSections;
            $sections = "";
        }
    }

    if ($action == "post") {
        string $expandedSections[];
        string $collapsedSections[];
        string $sectionNames[] = parseActionSectionNames($sections, $expandedSections, $collapsedSections);
            
        setParent $parent;

        columnLayout -adj true usdOptsCol;

        if (stringArrayContains("context", $sectionNames)) {
            optionMenuGrp -l `getMayaUsdString("kExportJobContextLbl")` -annotation `getMayaUsdString("kExportJobContextAnn")` -cc ("mayaUsdTranslatorExport_JobContextCB") jobContextPopup;
                menuItem -l `getMayaUsdString("kExportJobContextNoneLbl")` -ann "None";
                string $contexts[] = `mayaUSDListJobContexts -export`;
                for ($context in $contexts) {
                    string $ann = `mayaUSDListJobContexts -ea $context`;
                    menuItem -l $context -ann $ann;
                }
                if (size($contexts) == 0)
                {
                    optionMenuGrp -e -vis 0 jobContextPopup;
                }
        }

        if (stringArrayContains("output", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("output", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameOutputLbl")` -collapsable true -collapse $collapse outputFrameLayout;
                separator -style "none";

                optionMenuGrp -l `getMayaUsdString("kExportDefaultFormatLbl")` -annotation `getMayaUsdString("kExportDefaultFormatAnn")` -statusBarMessage `getMayaUsdString("kExportDefaultFormatStatus")` defaultUSDFormatPopup;
                    menuItem -l `getMayaUsdString("kExportDefaultFormatBinLbl")` -ann "usdc";
                    menuItem -l `getMayaUsdString("kExportDefaultFormatAscLbl")` -ann "usda";

                if (stringArrayContains("output-parentscope", $sectionNames)) {
                    separator -style "none";

                    textFieldGrp -l `getMayaUsdString("kExportParentScopeLbl")` -placeholderText `getMayaUsdString("kExportParentScopePht")`
                        -annotation `getMayaUsdString("kExportParentScopeAnn")` parentScopeField;
                }

                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("geometry", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("geometry", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameGeometryLbl")` -collapsable true -collapse $collapse geometryFrameLayout;
                separator -style "none";
                optionMenuGrp -l `getMayaUsdString("kExportSubdMethodLbl")` -annotation `getMayaUsdString("kExportSubdMethodAnn")` defaultMeshSchemePopup;
                    menuItem -l `getMayaUsdString("kExportSubdMethodCCLbl")` -ann "catmullClark";
                    menuItem -l `getMayaUsdString("kExportSubdMethodBiLbl")` -ann "bilinear";
                    menuItem -l `getMayaUsdString("kExportSubdMethodLoLbl")` -ann "loop";
                    menuItem -l `getMayaUsdString("kExportSubdMethodNoLbl")` -ann "none";

                checkBoxGrp -l `getMayaUsdString("kExportComponentTagsLbl")` -annotation `getMayaUsdString("kExportComponentTagsAnn")` exportComponentTagsCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportCurvesLbl")` -annotation `getMayaUsdString("kExportCurvesAnn")` exportCurvesCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportColorSetsLbl")` -annotation `getMayaUsdString("kExportColorSetsAnn")` exportColorSetsCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportUVSetsLbl")` -annotation `getMayaUsdString("kExportUVSetsAnn")` exportUVsCheckBox;

                optionMenuGrp -l `getMayaUsdString("kExportSkelsLbl")` -annotation `getMayaUsdString("kExportSkelsAnn")` skelsPopup;
                    menuItem -l `getMayaUsdString("kExportSkelsNoneLbl")` -ann "none";
                    menuItem -l `getMayaUsdString("kExportSkelsAllLbl")` -ann "auto";
                    menuItem -l `getMayaUsdString("kExportSkelsRootLbl")` -ann "explicit";

                optionMenuGrp -l `getMayaUsdString("kExportSkinClustersLbl")` -annotation `getMayaUsdString("kExportSkinClustersAnn")` skinClustersPopup;
                    menuItem -l `getMayaUsdString("kExportSkelsNoneLbl")` -ann "none";
                    menuItem -l `getMayaUsdString("kExportSkelsAllLbl")` -ann "auto";
                    menuItem -l `getMayaUsdString("kExportSkelsRootLbl")` -ann "explicit";

                checkBoxGrp -l `getMayaUsdString("kExportBlendShapesLbl")` -annotation `getMayaUsdString("kExportBlendShapesAnn")` exportBlendShapesCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportDisplayColorLbl")` -annotation `getMayaUsdString("kExportDisplayColorAnn")` exportDisplayColorCheckBox;

                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("materials", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("materials", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameMaterialsLbl")` -collapsable true -collapse $collapse -ann `getMayaUsdString("kExportMaterialsAnn")` materialsFrameLayout;
                separator -style "none";
                string $conversions[] = `mayaUSDListShadingModes -export -useRegistryOnly`;
                for ($conversion in $conversions) {
                    string $ann = `mayaUSDListShadingModes -ea $conversion -useRegistryOnly`;
                    string $opt = `mayaUSDListShadingModes -eo $conversion -useRegistryOnly`;
                    string $widgetName = $opt + "_ConvertMaterialsToCheckBox";

                    checkBoxGrp -cw 2 240 -numberOfCheckBoxes 1
                        -label "" -label1 $conversion -annotation $ann
                        $widgetName;
                }
                
                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("animation", $sectionNames)) {
            // The default state for this frame is expanded, unless the caller explictly wants it collapsed.
            int $collapse = stringArrayContains("animation", $collapsedSections) ? true : false;
            frameLayout -label `getMayaUsdString("kExportFrameAnimationLbl")` -collapsable true -collapse $collapse 
                        -expandCommand("mayaUsdTranslatorExport_AnimationFrameLayoutExpandCB") animationFrameLayout;
                separator -style "none";

                if (stringArrayContains("animation-data", $sectionNames)) {
                    checkBoxGrp -l `getMayaUsdString("kExportAnimDataLbl")` -cc ("mayaUsdTranslatorExport_AnimationCB")
                        -annotation `getMayaUsdString("kExportAnimDataAnn")` animationCheckBox;
                }

                columnLayout -width 100 animOptsCol;
                    rowLayout -numberOfColumns 2 -columnAttach 2 "left" 20;
                        intFieldGrp -l `getMayaUsdString("kExportFrameRangeLbl")` -numberOfFields 2 -v1 1 -v2 200 -cw 1 175 frameRangeFields;
                        button -l `getMayaUsdString("kExportFrameRangeBtn")` -command ("mayaUsdTranslatorExport_AnimationRangeCB") animRangeButton;
                    setParent ..;

                    floatFieldGrp -l `getMayaUsdString("kExportFrameStepLbl")` -v1 1 -cw 1 175 -annotation `getMayaUsdString("kExportFrameStepAnn")` frameStrideField;

                    textFieldGrp -l `getMayaUsdString("kExportFrameSamplesLbl")` -cw 1 175 -annotation `getMayaUsdString("kExportFrameSamplesAnn")` frameSampleField;

                    checkBoxGrp -l `getMayaUsdString("kExportEulerFilterLbl")` -cw 1 175
                        -annotation `getMayaUsdString("kExportEulerFilterAnn")` eulerFilterCheckBox;

                    checkBoxGrp -l `getMayaUsdString("kExportStaticSingleSampleLbl")` -annotation `getMayaUsdString("kExportStaticSingleSampleAnn")` -v1 0 staticSingleSampleCheckBox;

                setParent ..;
                
                separator -style "none";
            setParent ..;
        }

        if (stringArrayContains("advanced", $sectionNames)) {
            // The default state for this frame is collapsed, unless the caller explictly wants it expanded.
            int $collapse = stringArrayContains("advanced", $expandedSections) ? false : true;
            frameLayout -label `getMayaUsdString("kExportFrameAdvancedLbl")` -collapsable true -collapse $collapse advancedFrameLayout;
                separator -style "none";

                checkBoxGrp -l `getMayaUsdString("kExportVisibilityLbl")` -annotation `getMayaUsdString("kExportVisibilityAnn")` exportVisibilityCheckBox;

                optionMenuGrp -l `getMayaUsdString("kExportInstancesLbl")` -annotation `getMayaUsdString("kExportInstancesAnn")` exportInstancesPopup;
                    menuItem -l `getMayaUsdString("kExportInstancesFlatLbl")`;
                    menuItem -l `getMayaUsdString("kExportInstancesRefLbl")`;

                checkBoxGrp -l `getMayaUsdString("kExportMergeShapesLbl")`
                    -annotation `getMayaUsdString("kExportMergeShapesAnn")` mergeTransformAndShapeCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportNamespacesLbl")` -annotation `getMayaUsdString("kExportNamespacesAnn")` includeNamespacesCheckBox;

                checkBoxGrp -l `getMayaUsdString("kExportWorldspaceLbl")` -annotation `getMayaUsdString("kExportWorldspaceAnn")` worldspaceCheckBox;

                separator -style "none";
            setParent ..;
        }

        $bResult = 1;

    } else if ($action == "query") {
        string $expandedSections[];
        string $collapsedSections[];
        string $sectionNames[] = parseActionSectionNames($sections, $expandedSections, $collapsedSections);
            
        if (stringArrayContains("geometry", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportUVs", "exportUVsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "exportSkels", "skelsPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "exportSkin", "skinClustersPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportBlendShapes", "exportBlendShapesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportDisplayColor", "exportDisplayColorCheckBox");
            // We currently have only one type to filter. In the future, we might need to build the array separately as more types are added.
            $currentOptions = mayaUsdTranslatorExport_SetFromCheckbox($currentOptions, "", "filterTypes=nurbsCurve", "exportCurvesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportColorSets", "exportColorSetsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportComponentTags", "exportComponentTagsCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "defaultMeshScheme", "defaultMeshSchemePopup");
        }

        if (stringArrayContains("animation", $sectionNames)) {
            if (stringArrayContains("animation-data", $sectionNames)) {
                $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "animation", "animationCheckBox");
            }
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "eulerFilter", "eulerFilterCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "staticSingleSample", "staticSingleSampleCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFrameRange($currentOptions);
            $currentOptions = mayaUsdTranslatorExport_AppendFromFloatField($currentOptions, "frameStride", "frameStrideField");
            $currentOptions = mayaUsdTranslatorExport_AppendFromTextField($currentOptions, "frameSample", "frameSampleField");
        }

        if (stringArrayContains("output", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendFromPopup($currentOptions, "defaultUSDFormat", "defaultUSDFormatPopup");
            if (stringArrayContains("output-parentscope", $sectionNames)) {
                $currentOptions = mayaUsdTranslatorExport_AppendFromTextField($currentOptions, "parentScope", "parentScopeField");
            }
        }

        if (stringArrayContains("materials", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendConvertMaterialsTo($currentOptions, "convertMaterialsTo");
        }

        if (stringArrayContains("advanced", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendFromBoolPopup($currentOptions, "exportInstances", "exportInstancesPopup");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "exportVisibility", "exportVisibilityCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "mergeTransformAndShape", "mergeTransformAndShapeCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendOppositeFromCheckbox($currentOptions, "stripNamespaces", "includeNamespacesCheckBox");
            $currentOptions = mayaUsdTranslatorExport_AppendFromCheckbox($currentOptions, "worldspace", "worldspaceCheckBox");
        }

        if (stringArrayContains("context", $sectionNames)) {
            $currentOptions = mayaUsdTranslatorExport_AppendJobContexts($currentOptions, "jobContext");
        }

        eval($resultCallback+" \""+$currentOptions+"\"");
        $bResult = 1;

    } else {
        $bResult = 0;
    }

    if ($action == "post" || $action == "fill") {
        setParent $parent;

        // Now set to current settings.
        $currentOptions = $initialSettings;

        mayaUsdTranslatorExport_EnableAllControls();
        mayaUsdTranslatorExport_SetFromOptions($currentOptions, 1, 1);

        // Set visibility for anim widgets (but do not update the start/end time to playback range
        // as they will be set by the caller).
        mayaUsdTranslatorExport_AnimationCB();

        $bResult = 1;
    }

    return $bResult;
}
