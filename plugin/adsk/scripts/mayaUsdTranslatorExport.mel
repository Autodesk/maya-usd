// Copyright 2019 Autodesk
//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

global proc mayausdTranslatorExport_AnimationCB() {
    columnLayout -e -visible (`checkBoxGrp -q -v1 animationCheckBox`) animOptsCol;
}

global proc mayausdTranslatorExport_AnimationRangeCB() {
    int $startTime = `playbackOptions -q -animationStartTime`;
    int $endTime = `playbackOptions -q -animationEndTime`;
    intFieldGrp -e -v1 $startTime -v2 $endTime framRangeFields;
}

global proc mayausdTranslatorExport_SetCheckbox(string $arg, string $widget) {
    if ($arg == "0") {
        checkBoxGrp -e -v1 false $widget;
    } else {
        checkBoxGrp -e -v1 true $widget;
    }
}

global proc mayausdTranslatorExport_SetTextField(string $arg, string $widget) {
    textFieldGrp -e -text $arg $widget;
}

global proc mayausdTranslatorExport_SetOptionMenuByAnnotation(
        string $ann, string $widget) {
    int $index = 1; // 1-based indexing.
    for ($i in `optionMenuGrp -q -itemListLong $widget`) {
        if (`menuItem -q -ann $i` == $ann) {
            optionMenuGrp -e -select $index $widget;
            return;
        }

        $index++;
    }
}

global proc string mayausdTranslatorExport_AppendFromCheckbox(string $currentOptions, string $arg, string $widget) {
    if (`checkBoxGrp -q -v1 $widget` == 1) {
        return $currentOptions + ";" + $arg + "=1";
    } else {
        return $currentOptions + ";" + $arg + "=0";
    }
}

global proc string mayausdTranslatorExport_AppendFromPopup(string $currentOptions, string $arg, string $widget) {
    int $index = `optionMenuGrp -q -select $widget` - 1;
    string $allItems[] = `optionMenuGrp -q -itemListLong $widget`;
    string $item = $allItems[$index];
    string $annotation = `menuItem -q -ann $item`;
    return $currentOptions + ";" + $arg + "=" + $annotation;
}

proc string mayausdTranslatorExport_AppendFrameRange(string $currentOptions) {
    int $start = `intFieldGrp -q -value1 framRangeFields`;
    int $end = `intFieldGrp -q -value2 framRangeFields`;
    return $currentOptions + ";startTime=" + $start + ";endTime=" + $end;
}

global proc string mayausdTranslatorExport_AppendFromIntField(string $currentOptions, string $arg, string $widget) {
    string $value = `intFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc string mayausdTranslatorExport_AppendFromFloatField(string $currentOptions, string $arg, string $widget) {
    string $value = `floatFieldGrp -q -value1 $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc string mayausdTranslatorExport_AppendFromTextField(string $currentOptions, string $arg, string $widget) {
    string $value = `textFieldGrp -q -text $widget`;
    return $currentOptions + ";" + $arg + "=" + $value;
}

global proc int mayaUsdTranslatorExport (string $parent,
                                     string $action,
                                     string $initialSettings,
                                     string $resultCallback )
//
//  Description:
//    This script posts the USD Export file translator options.
//    The optionsString is of the form:
//    varName1=value1;varName2=value2;...
//
//  Parameters:
//    $parent - the elf parent layout for this options layout. It is
//            always a scrollLayout.
//    $action - the action that is to be performed with this invokation of this proc.
//        Valid options are:
//        "query" - construct the options string and pass it to the resultCallback.
//        "post" - post all the elf controls.
//    $initialSettings - the current options string in effect at the time this script is invoked.
//    $resultCallback - This is the proc to be called with the result string.
//            resultCallback ( string $optionsString )
//
//    Returns:
//        1 if successfull.
//        0 otherwise.
//
{
    int $bResult;
    string $currentOptions;
    string $optionList[];
    string $optionBreakDown[];
    int $index;

    if ($action == "post") {
        setParent $parent;

        columnLayout -adj true usdOptsCol;

        frameLayout -label "Output" -collapsable true -collapse false;
            separator -style "none";

            textFieldGrp -l "Create USD Parent Scope:" -placeholderText "USD Prim Name" parentScopeField;

            separator -style "none";
        setParent ..;

        frameLayout -label "Geometry" -collapsable true -collapse false;
            separator -style "none";
            optionMenuGrp -l "Default Mesh Scheme:" defaultMeshSchemePopup;
                menuItem -l "Catmull-Clark" -ann "catmullClark";
                menuItem -l "Bilinear" -ann "bilinear";
                menuItem -l "Loop" -ann "loop";
                menuItem -l "Polygonal Mesh" -ann "none";

            checkBoxGrp -l "Color Sets:" exportColorSetsCheckBox;

            checkBoxGrp -l "UV Sets:" exportUVsCheckBox;
            
            separator -style "none";
        setParent ..;
        
        frameLayout -label "Animation" -collapsable true -collapse false;
            separator -style "none";

            checkBoxGrp -l "Animation Data: " -cc ("mayausdTranslatorExport_AnimationCB") animationCheckBox;

            columnLayout -width 100 animOptsCol;
                rowLayout -numberOfColumns 2 -columnAttach 2 "left" 20;
                    intFieldGrp -l "Frame Range Start/End:" -numberOfFields 2 -v1 1 -v2 200 -cw 1 175 framRangeFields;
                    button -l "Use Animation Range" -command ("mayausdTranslatorExport_AnimationRangeCB") animRangeButton;
                setParent ..;

                floatFieldGrp -l "Frame Step:" -v1 1 -cw 1 175 frameStrideField;

                checkBoxGrp -l "Euler Filter:" -cw 1 175 eulerFilterCheckBox;
            setParent ..;

            separator -style "none";
        setParent ..;

        frameLayout -label "Advanced" -collapsable true -collapse true;
            separator -style "none";

            checkBoxGrp -l "Visibility:" exportVisibilityCheckBox;

            checkBoxGrp -l "Export Instances:" exportInstancesCheckBox;

            checkBoxGrp -l "Merge Transform and Shapes:" mergeTransformAndShapeCheckBox;

            checkBoxGrp -l "Strip Namespaces:" stripNamespacesCheckBox;

            separator -style "none";
        setParent ..;

        setParent $parent;

        // Now set to current settings.
        $currentOptions = $initialSettings;
        if (size($currentOptions) > 0) {
            tokenize($currentOptions, ";", $optionList);
            for ($index = 0; $index < size($optionList); $index++) {
                tokenize($optionList[$index], "=", $optionBreakDown);
                if ($optionBreakDown[0] == "exportUVs") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "exportUVsCheckBox");
                } else if ($optionBreakDown[0] == "exportColorSets") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "exportColorSetsCheckBox");
                } else if ($optionBreakDown[0] == "defaultMeshScheme") {
                    mayausdTranslatorExport_SetOptionMenuByAnnotation($optionBreakDown[1], "defaultMeshSchemePopup");
                } else if ($optionBreakDown[0] == "animation") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "animationCheckBox");
                } else if ($optionBreakDown[0] == "eulerFilter") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "eulerFilterCheckBox");
                } else if ($optionBreakDown[0] == "startTime") {
                    int $startTime=$optionBreakDown[1];
                    intFieldGrp -e -v1 $startTime framRangeFields;
                } else if ($optionBreakDown[0] == "endTime") {
                    int $endTime; $endTime=$optionBreakDown[1];
                    intFieldGrp -e -v2 $endTime framRangeFields;
                } else if ($optionBreakDown[0] == "frameStride") {
                    float $frameStride = $optionBreakDown[1];
                    floatFieldGrp -e -v1 $frameStride frameStrideField;
                } else if ($optionBreakDown[0] == "parentScope") {
                    mayausdTranslatorExport_SetTextField($optionBreakDown[1], "parentScopeField");
                } else if ($optionBreakDown[0] == "exportInstances") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "exportInstancesCheckBox");                    
                } else if ($optionBreakDown[0] == "exportVisibility") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "exportVisibilityCheckBox");
                } else if ($optionBreakDown[0] == "mergeTransformAndShape") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "mergeTransformAndShapeCheckBox");                    
                } else if ($optionBreakDown[0] == "stripNamespaces") {
                    mayausdTranslatorExport_SetCheckbox($optionBreakDown[1], "stripNamespacesCheckBox");                    
                }
            }
        }
        // Set visibility for anim widgets
        mayausdTranslatorExport_AnimationCB();

        $bResult = 1;

    } else if ($action == "query") {
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "exportUVs", "exportUVsCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "exportColorSets", "exportColorSetsCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromPopup($currentOptions, "defaultMeshScheme", "defaultMeshSchemePopup");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "animation", "animationCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "eulerFilter", "eulerFilterCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFrameRange($currentOptions);
        $currentOptions = mayausdTranslatorExport_AppendFromFloatField($currentOptions, "frameStride", "frameStrideField");
        $currentOptions = mayausdTranslatorExport_AppendFromTextField($currentOptions, "parentScope", "parentScopeField");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "exportInstances", "exportInstancesCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "exportVisibility", "exportVisibilityCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "mergeTransformAndShape", "mergeTransformAndShapeCheckBox");
        $currentOptions = mayausdTranslatorExport_AppendFromCheckbox($currentOptions, "stripNamespaces", "stripNamespacesCheckBox");

        eval($resultCallback+" \""+$currentOptions+"\"");
        $bResult = 1;

    } else {
        $bResult = 0;
    }

    return $bResult;
}
