#usda 1.0

def Mesh "pPlatonic1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.8944273, -0.8506508, -1), (0.8944273, 0.8506509, 1)]
    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    int[] faceVertexIndices = [0, 2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 1, 5, 1, 2, 7, 2, 3, 8, 3, 4, 9, 4, 5, 10, 5, 1, 6, 1, 7, 6, 2, 8, 7, 3, 9, 8, 4, 10, 9, 5, 6, 10, 6, 7, 11, 7, 8, 11, 8, 9, 11, 9, 10, 11, 10, 6, 11]
    rel material:binding = </mtl/standard_surface1>
    normal3f[] normals = [(0.1875926, 0.5773502, -0.7946545), (0.18759261, 0.5773502, -0.79465455), (0.1875926, 0.5773502, -0.7946545), (-0.4911235, 0.35682198, -0.7946544), (-0.4911235, 0.35682198, -0.7946545), (-0.49112347, 0.35682198, -0.7946545), (-0.49112338, -0.35682216, -0.7946545), (-0.49112338, -0.35682213, -0.7946545), (-0.49112338, -0.35682213, -0.7946545), (0.18759239, -0.5773504, -0.7946544), (0.18759239, -0.5773504, -0.7946544), (0.18759239, -0.5773504, -0.7946545), (0.60706216, -3.1126632e-8, -0.79465437), (0.60706216, -3.1126632e-8, -0.7946544), (0.60706216, -3.1126632e-8, -0.79465437), (0.30353108, 0.93417233, -0.18759252), (0.30353105, 0.93417233, -0.18759252), (0.30353108, 0.93417233, -0.18759252), (-0.79465455, 0.5773502, -0.18759245), (-0.7946545, 0.5773502, -0.18759246), (-0.7946545, 0.5773502, -0.18759246), (-0.79465437, -0.5773504, -0.1875924), (-0.79465437, -0.5773504, -0.1875924), (-0.79465437, -0.5773504, -0.1875924), (0.30353093, -0.93417245, -0.18759254), (0.30353087, -0.93417233, -0.18759252), (0.3035309, -0.93417245, -0.18759254), (0.9822469, 0, -0.18759258), (0.9822469, 0, -0.18759258), (0.9822469, 0, -0.1875926), (0.7946544, 0.5773503, 0.18759239), (0.7946545, 0.5773503, 0.18759239), (0.7946544, 0.5773503, 0.18759239), (-0.30353096, 0.93417233, 0.18759276), (-0.30353096, 0.93417233, 0.18759276), (-0.30353096, 0.93417233, 0.18759276), (-0.9822469, 0, 0.18759255), (-0.9822469, 0, 0.18759255), (-0.9822469, 0, 0.18759255), (-0.30353087, -0.9341724, 0.18759245), (-0.30353087, -0.93417233, 0.18759245), (-0.30353087, -0.9341724, 0.18759245), (0.79465455, -0.5773503, 0.18759233), (0.79465455, -0.5773503, 0.18759233), (0.79465455, -0.5773502, 0.18759233), (0.4911234, 0.35682216, 0.7946545), (0.4911234, 0.35682216, 0.7946545), (0.49112344, 0.35682213, 0.79465455), (-0.18759249, 0.5773503, 0.7946544), (-0.18759252, 0.5773503, 0.7946545), (-0.18759252, 0.5773503, 0.7946545), (-0.6070619, -1.2450651e-7, 0.7946545), (-0.607062, -1.2450651e-7, 0.79465455), (-0.6070619, -1.2450651e-7, 0.7946545), (-0.18759243, -0.57735026, 0.7946545), (-0.18759242, -0.5773503, 0.7946545), (-0.18759243, -0.57735026, 0.7946545), (0.4911234, -0.35682207, 0.7946545), (0.4911234, -0.35682207, 0.7946545), (0.4911234, -0.35682204, 0.79465455)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(0, 0, -1), (0.7236068, 0.5257311, -0.4472136), (-0.27639326, 0.8506509, -0.44721365), (-0.8944273, -7.819332e-8, -0.44721365), (-0.2763933, -0.8506508, -0.4472136), (0.72360677, -0.52573115, -0.4472136), (0.8944273, 0, 0.44721365), (0.27639318, 0.85065085, 0.4472136), (-0.7236069, 0.5257311, 0.44721365), (-0.72360677, -0.5257312, 0.4472136), (0.27639332, -0.8506508, 0.4472136), (0, 0, 1)]
    color3f[] primvars:displayColor = [(0.13320851, 0.13320851, 0.13320851)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(1, 0.5), (0.83810407, 0.67620814), (0.088104114, 0.8237918), (0.1762082, 0.5), (0.088104114, 0.17620823), (0.8381041, 0.32379177), (0.6762082, 0.5), (0.58810407, 0.82379186), (0.3381041, 0.67620814), (0.3381041, 0.32379177), (0.5881041, 0.17620823), (0.5, 0.5), (1.0881041, 0.8237918), (1.1762083, 0.5), (1.0881041, 0.17620823)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 12, 1, 0, 13, 12, 0, 14, 13, 0, 5, 14, 0, 1, 5, 1, 12, 7, 2, 3, 8, 3, 4, 9, 14, 5, 10, 5, 1, 6, 1, 7, 6, 2, 8, 7, 3, 9, 8, 4, 10, 9, 5, 6, 10, 6, 7, 11, 7, 8, 11, 8, 9, 11, 9, 10, 11, 10, 6, 11]
    uniform token subdivisionScheme = "none"
    float3 xformOp:scale = (10, 10, 10)
    uniform token[] xformOpOrder = ["xformOp:scale"]
}

def Scope "mtl"
{
    def Material "standard_surface1" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        token outputs:mtlx:surface.connect = </mtl/standard_surface1/standard_surface1.outputs:out>
        uniform float2 ui:nodegraph:node:pos = (0.055555556, 0.055555556)

        def Shader "standard_surface1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            float inputs:base = 0.48295453
            color3f inputs:base_color.connect = </mtl/standard_surface1/ifequal1.outputs:out>
            color3f inputs:specular_color = (1, 0, 0)
            token outputs:out
            uniform float2 ui:nodegraph:node:pos = (5.2444444, 0.13333334)
        }

        def Shader "image1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @textures/RGB.png@
            string inputs:filtertype = "closest"
            float2 inputs:texcoord.connect = </mtl/standard_surface1/place2d1.outputs:out>
            color3f outputs:out
            uniform float2 ui:nodegraph:node:pos = (2.85, 0.1)
        }

        def Shader "place2d1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_place2d_vector2"
            float2 inputs:scale = (0.2, 0.2)
            float2 inputs:texcoord.connect = </mtl/standard_surface1/geompropvalue1.outputs:out>
            float2 outputs:out
            uniform float2 ui:nodegraph:node:pos = (1.3055556, 0.23888889)
        }

        def Shader "geompropvalue1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_geompropvalue_vector2"
            string inputs:geomprop = "st"
            float2 outputs:out
            uniform float2 ui:nodegraph:node:pos = (-0.13333334, 0.033333335)
        }

        def Shader "image2" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @textures/Mono.png@
            string inputs:filtertype = "closest"
            float2 inputs:texcoord.connect = </mtl/standard_surface1/place2d2.outputs:out>
            color3f outputs:out
            uniform float2 ui:nodegraph:node:pos = (2.7944446, 2.55)
        }

        def Shader "ifequal1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_ifequal_color3B"
            color3f inputs:in1.connect = </mtl/standard_surface1/image1.outputs:out>
            color3f inputs:in2.connect = </mtl/standard_surface1/image2.outputs:out>
            bool inputs:value1 = 1
            color3f outputs:out
            uniform float2 ui:nodegraph:node:pos = (4.0666666, 1.5944444)
        }

        def Shader "place2d2" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_place2d_vector2"
            float2 inputs:scale = (0.5, 0.5)
            float2 inputs:texcoord.connect = </mtl/standard_surface1/geompropvalue1.outputs:out>
            float2 outputs:out
            uniform float2 ui:nodegraph:node:pos = (1.3611112, 2.2722223)
        }
    }
}

