#usda 1.0
(
    defaultPrim = "pPlane1"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Mesh "pPlane1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </mtl/ss3SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
}

def Mesh "pPlane2" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </pPlane2/mtl/ss2SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (-1.5, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    def Scope "mtl" {
        def Material "ss2SG" (
            kind = "assembly"
        )
        {
            string inputs:file2:varname = "st"
            token outputs:mtlx:surface.connect = </pPlane2/mtl/ss2SG/ss2.outputs:out>

            def Shader "ss2"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base = 1
                color3f inputs:base_color.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG.outputs:baseColor>
                float inputs:specular = 1
                float inputs:specular_roughness = 0.2
                token outputs:out
            }

            def NodeGraph "MayaNG_ss2SG"
            {
                string inputs:file2:varname.connect = </pPlane2/mtl/ss2SG.inputs:file2:varname>
                color3f outputs:baseColor.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG/MayaConvert_file2_MayafileTexture.outputs:out>

                def Shader "file2"
                {
                    uniform token info:id = "ND_image_color4"
                    asset inputs:file = @textures/normalSpiralA.png@
                    string inputs:filtertype = "cubic"
                    float2 inputs:texcoord.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG/place2dTexture2.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    color4f outputs:out
                }

                def Shader "file2_MayafileTexture"
                {
                    uniform token info:id = "MayaND_fileTexture_color4"
                    color4f inputs:defaultColor = (0.5, 0.5, 0.5, 1)
                    color4f inputs:inColor.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG/file2.outputs:out>
                    color4f inputs:uvCoord.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG/place2dTexture2.outputs:out>
                    color4f outputs:outColor
                }

                def Shader "MayaConvert_file2_MayafileTexture"
                {
                    uniform token info:id = "ND_convert_color4_color3"
                    color4f inputs:in.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG/file2_MayafileTexture.outputs:outColor>
                    color3f outputs:out
                }

                def Shader "place2dTexture2"
                {
                    uniform token info:id = "ND_geompropvalue_vector2"
                    string inputs:geomprop.connect = </pPlane2/mtl/ss2SG/MayaNG_ss2SG.inputs:file2:varname>
                    float2 outputs:out
                }
            }
        }
    }
}

def Mesh "pPlane3" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </mtl/ss4SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (1.5, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Mesh "pPlane4" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </pPlane2/mtl/ss2SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (-1.5, 0, 1.5)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Mesh "pPlane5" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </mtl/ss3SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (0, 0, 1.5)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Mesh "pPlane6" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </mtl/ss4SG>
    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    color3f[] primvars:displayColor = [(0, 0, 0)] (
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (1.5, 0, 1.5)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Scope "mtl" {
	def Material "ss3SG" (
		kind = "assembly"
	)
	{
		string inputs:file3:varname = "st"
		token outputs:mtlx:surface.connect = </mtl/ss3SG/ss3.outputs:out>

		def Shader "ss3"
		{
			uniform token info:id = "ND_standard_surface_surfaceshader"
			float inputs:base = 1
			color3f inputs:base_color.connect = </mtl/ss3SG/MayaNG_ss3SG.outputs:baseColor>
			float inputs:specular = 1
			float inputs:specular_roughness = 0.2
			token outputs:out
		}

		def NodeGraph "MayaNG_ss3SG"
		{
			string inputs:file3:varname.connect = </mtl/ss3SG.inputs:file3:varname>
			color3f outputs:baseColor.connect = </mtl/ss3SG/MayaNG_ss3SG/file3_MayafileTexture.outputs:outColor>

			def Shader "file3"
			{
				uniform token info:id = "ND_image_color3"
				asset inputs:file = @textures/Brazilian_rosewood_pxr128.png@
				string inputs:filtertype = "cubic"
				float2 inputs:texcoord.connect = </mtl/ss3SG/MayaNG_ss3SG/place2dTexture3.outputs:out>
				string inputs:uaddressmode = "periodic"
				string inputs:vaddressmode = "periodic"
				color3f outputs:out
			}

			def Shader "file3_MayafileTexture"
			{
				uniform token info:id = "MayaND_fileTexture_color3"
				color3f inputs:defaultColor = (0.5, 0.5, 0.5)
				color3f inputs:inColor.connect = </mtl/ss3SG/MayaNG_ss3SG/file3.outputs:out>
				color3f inputs:uvCoord.connect = </mtl/ss3SG/MayaNG_ss3SG/place2dTexture3.outputs:out>
				color3f outputs:outColor
			}

			def Shader "place2dTexture3"
			{
				uniform token info:id = "ND_geompropvalue_vector2"
				string inputs:geomprop.connect = </mtl/ss3SG/MayaNG_ss3SG.inputs:file3:varname>
				float2 outputs:out
			}
		}
	}

	def Material "ss4SG" (
		kind = "assembly"
	)
	{
		string inputs:file4:varname = "st"
		token outputs:mtlx:surface.connect = </mtl/ss4SG/ss4.outputs:out>

		def Shader "ss4"
		{
			uniform token info:id = "ND_standard_surface_surfaceshader"
			float inputs:base = 1
			color3f inputs:base_color.connect = </mtl/ss4SG/MayaNG_ss4SG.outputs:baseColor>
			float inputs:specular = 1
			float inputs:specular_roughness = 0.2
			token outputs:out
		}

		def NodeGraph "MayaNG_ss4SG"
		{
			string inputs:file4:varname.connect = </mtl/ss4SG.inputs:file4:varname>
			color3f outputs:baseColor.connect = </mtl/ss4SG/MayaNG_ss4SG/MayaConvert_file4_MayafileTexture.outputs:out>

			def Shader "file4"
			{
				uniform token info:id = "ND_image_color4"
				asset inputs:file = @textures/grid.png@
				string inputs:filtertype = "cubic"
				float2 inputs:texcoord.connect = </mtl/ss4SG/MayaNG_ss4SG/place2dTexture4.outputs:out>
				string inputs:uaddressmode = "periodic"
				string inputs:vaddressmode = "periodic"
				color4f outputs:out
			}

			def Shader "file4_MayafileTexture"
			{
				uniform token info:id = "MayaND_fileTexture_color4"
				color4f inputs:defaultColor = (0.5, 0.5, 0.5, 1)
				color4f inputs:inColor.connect = </mtl/ss4SG/MayaNG_ss4SG/file4.outputs:out>
				color4f inputs:uvCoord.connect = </mtl/ss4SG/MayaNG_ss4SG/place2dTexture4.outputs:out>
				color4f outputs:outColor
			}

			def Shader "MayaConvert_file4_MayafileTexture"
			{
				uniform token info:id = "ND_convert_color4_color3"
				color4f inputs:in.connect = </mtl/ss4SG/MayaNG_ss4SG/file4_MayafileTexture.outputs:outColor>
				color3f outputs:out
			}

			def Shader "place2dTexture4"
			{
				uniform token info:id = "ND_geompropvalue_vector2"
				string inputs:geomprop.connect = </mtl/ss4SG/MayaNG_ss4SG.inputs:file4:varname>
				float2 outputs:out
			}
		}
	}
}
