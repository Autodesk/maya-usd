#usda 1.0
(
    defaultPrim = "root"
)

def Xform "root"
{

    def Scope "MATERIAL"
    {
        def Material "proxy_red_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/proxy_red_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/proxy_red_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/proxy_red_material/proxy_red_tex_r.outputs:r>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/proxy_red_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/proxy_red_material/proxy_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/proxy_red_material/blue_tex_rgb.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/proxy_red_material/proxy_red_tex_r.outputs:r>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_red.png@
                float2 inputs:st.connect = </root/MATERIAL/proxy_red_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "blue_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @blue.png@
                vector3f outputs:rgb
            }

            def Shader "proxy_red_tex_r"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_red.png@
                vector3f outputs:r
            }

            def Shader "proxy_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_green.png@
                vector3f outputs:rgb
            }
        }

        def Material "proxy_green_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/proxy_green_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/proxy_green_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/proxy_green_material/proxy_red_tex_r.outputs:r>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/proxy_green_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/proxy_green_material/proxy_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/proxy_green_material/blue_tex_rgb.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/proxy_green_material/proxy_red_tex_r.outputs:r>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_green.png@
                float2 inputs:st.connect = </root/MATERIAL/proxy_green_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "blue_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @blue.png@
                vector3f outputs:rgb
            }

            def Shader "proxy_red_tex_r"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_red.png@
                vector3f outputs:r
            }

            def Shader "proxy_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_green.png@
                vector3f outputs:rgb
            }
        }

        def Material "proxy_blue_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/proxy_blue_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/proxy_blue_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/proxy_blue_material/proxy_red_tex_r.outputs:r>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/proxy_blue_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/proxy_blue_material/proxy_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/proxy_blue_material/non_exist_with_fallback.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/proxy_blue_material/proxy_red_tex_r.outputs:r>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @/dummy/path/to/non_exist_texture.png@
                float4 inputs:fallback = (0, 0, 1, 0)
                float2 inputs:st.connect = </root/MATERIAL/proxy_blue_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "non_exist_with_fallback"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @/dummy/path/to/non_exist_texture.png@
                float4 inputs:fallback = (1, 1, 0, 0)
                vector3f outputs:rgb
            }

            def Shader "proxy_red_tex_r"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_red.png@
                vector3f outputs:r
            }

            def Shader "proxy_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @proxy_green.png@
                vector3f outputs:rgb
            }
        }

        def Material "render_red_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/render_red_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/render_red_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/render_red_material/render_green_tex_g.outputs:g>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/render_red_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/render_red_material/render_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/render_red_material/blue_tex_rgb.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/render_red_material/render_green_tex_g.outputs:g>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_red.png@
                float2 inputs:st.connect = </root/MATERIAL/render_red_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "blue_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @blue.png@
                vector3f outputs:rgb
            }

            def Shader "render_green_tex_g"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:g
            }

            def Shader "render_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:rgb
            }
        }

        def Material "render_green_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/render_green_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/render_green_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/render_green_material/render_green_tex_g.outputs:g>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/render_green_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/render_green_material/render_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/render_green_material/blue_tex_rgb.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/render_green_material/render_green_tex_g.outputs:g>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                float2 inputs:st.connect = </root/MATERIAL/render_green_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "blue_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @blue.png@
                vector3f outputs:rgb
            }

            def Shader "render_green_tex_g"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:g
            }

            def Shader "render_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:rgb
            }
        }

        def Material "render_blue_material"
        {
            token outputs:displacement.connect = </root/MATERIAL/render_blue_material/surface_shader.outputs:displacement>
            token outputs:surface.connect = </root/MATERIAL/render_blue_material/surface_shader.outputs:surface>

            def Shader "surface_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:displacement.connect = </root/MATERIAL/render_blue_material/render_green_tex_g.outputs:g>
                color3f inputs:diffuseColor.connect = </root/MATERIAL/render_blue_material/base_tex.outputs:rgb>
                normal3f inputs:normal.connect = </root/MATERIAL/render_blue_material/render_green_tex_rgb.outputs:rgb>
                int inputs:useSpecularWorkflow = 1
                color3f inputs:specularColor.connect = </root/MATERIAL/render_blue_material/non_exist_with_fallback.outputs:rgb>
                float inputs:roughness.connect = </root/MATERIAL/render_blue_material/render_green_tex_g.outputs:g>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "base_tex"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @/dummy/path/to/non_exist_texture.png@
                float4 inputs:fallback = (0, 0, 1, 0)
                float2 inputs:st.connect = </root/MATERIAL/render_blue_material/uv_reader.outputs:result>
                custom token inputs:wrapS = "repeat"
                custom token inputs:wrapT = "repeat"
                vector3f outputs:rgb
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "non_exist_with_fallback"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @/dummy/path/to/non_exist_texture.png@
                float4 inputs:fallback = (1, 1, 0, 0)
                vector3f outputs:rgb
            }

            def Shader "render_green_tex_g"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:g
            }

            def Shader "render_green_tex_rgb"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @render_green.png@
                vector3f outputs:rgb
            }
        }
    }

    def Xform "geo"
    {
        def Xform "GEO_RENDER"
        {
            rel proxyPrim = </root/GEO_PROXY>
            uniform token purpose = "render"

            def Xform "red"
            {
                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 2, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 4, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }

            def Xform "green"
            {
                double3 xformOp:translate = (2, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 2, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 4, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }

            def Xform "blue"
            {
                double3 xformOp:translate = (4, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 2, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 4, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/render_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }
        }

        def Xform "GEO_PROXY"
        {
            uniform token purpose = "proxy"

            def Xform "red"
            {
                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (2, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (4, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_red_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }

            def Xform "green"
            {
                double3 xformOp:translate = (0, 2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (2, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (4, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_green_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }

            def Xform "blue"
            {
                double3 xformOp:translate = (0, 4, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "plane_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (2, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }

                def Mesh "plane_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    kind = "component"
                )
                {
                    double3 xformOp:translate = (4, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                    rel material:binding = </root/MATERIAL/proxy_blue_material>

                    uniform bool doubleSided = 1
                    float3[] extent = [(-1, -1, 0), (1, 1, 0)]
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 3, 2]
                    point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
                    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 3, 2]
                }
            }
        }
    }
}

