#usda 1.0
(
    defaultPrim = "Root"
    endTimeCode = 100
    framesPerSecond = 60
    metersPerUnit = 0.01
    startTimeCode = 1
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def SkelRoot "Root" (
    kind = "component"
)
{
    def Mesh "Mesh" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </Root/Looks/initialShadingGroup>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        texCoord2f[] primvars:map1 = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:map1:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate.timeSamples = {
            1: (0, 0, 0),
            20: (1.5980701403722433, 4.643729607962522, -0.5855283680443151),
        }
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "Skin" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent.timeSamples = {
            1: [(-0.9995248, -1.8898486, -0.9357536), (0.99803704, 1.4922572, 2.3230896)],
            20: [(-1.0000002, -1.45, -1.0000005), (1, 1.45, 1.0000001)],
        }
        int[] faceVertexCounts.timeSamples = {
            1: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        }
        int[] faceVertexIndices.timeSamples = {
            1: [0, 1, 21, 20, 1, 2, 22, 21, 2, 3, 23, 22, 3, 4, 24, 23, 4, 5, 25, 24, 5, 6, 26, 25, 6, 7, 27, 26, 7, 8, 28, 27, 8, 9, 29, 28, 9, 10, 30, 29, 10, 11, 31, 30, 11, 12, 32, 31, 12, 13, 33, 32, 13, 14, 34, 33, 14, 15, 35, 34, 15, 16, 36, 35, 16, 17, 37, 36, 17, 18, 38, 37, 18, 19, 39, 38, 19, 0, 20, 39, 20, 21, 41, 40, 21, 22, 42, 41, 22, 23, 43, 42, 23, 24, 44, 43, 24, 25, 45, 44, 25, 26, 46, 45, 26, 27, 47, 46, 27, 28, 48, 47, 28, 29, 49, 48, 29, 30, 50, 49, 30, 31, 51, 50, 31, 32, 52, 51, 32, 33, 53, 52, 33, 34, 54, 53, 34, 35, 55, 54, 35, 36, 56, 55, 36, 37, 57, 56, 37, 38, 58, 57, 38, 39, 59, 58, 39, 20, 40, 59, 40, 41, 61, 60, 41, 42, 62, 61, 42, 43, 63, 62, 43, 44, 64, 63, 44, 45, 65, 64, 45, 46, 66, 65, 46, 47, 67, 66, 47, 48, 68, 67, 48, 49, 69, 68, 49, 50, 70, 69, 50, 51, 71, 70, 51, 52, 72, 71, 52, 53, 73, 72, 53, 54, 74, 73, 54, 55, 75, 74, 55, 56, 76, 75, 56, 57, 77, 76, 57, 58, 78, 77, 58, 59, 79, 78, 59, 40, 60, 79, 60, 61, 81, 80, 61, 62, 82, 81, 62, 63, 83, 82, 63, 64, 84, 83, 64, 65, 85, 84, 65, 66, 86, 85, 66, 67, 87, 86, 67, 68, 88, 87, 68, 69, 89, 88, 69, 70, 90, 89, 70, 71, 91, 90, 71, 72, 92, 91, 72, 73, 93, 92, 73, 74, 94, 93, 74, 75, 95, 94, 75, 76, 96, 95, 76, 77, 97, 96, 77, 78, 98, 97, 78, 79, 99, 98, 79, 60, 80, 99, 1, 0, 100, 2, 1, 100, 3, 2, 100, 4, 3, 100, 5, 4, 100, 6, 5, 100, 7, 6, 100, 8, 7, 100, 9, 8, 100, 10, 9, 100, 11, 10, 100, 12, 11, 100, 13, 12, 100, 14, 13, 100, 15, 14, 100, 16, 15, 100, 17, 16, 100, 18, 17, 100, 19, 18, 100, 0, 19, 100, 80, 81, 101, 81, 82, 101, 82, 83, 101, 83, 84, 101, 84, 85, 101, 85, 86, 101, 86, 87, 101, 87, 88, 101, 88, 89, 101, 89, 90, 101, 90, 91, 101, 91, 92, 101, 92, 93, 101, 93, 94, 101, 94, 95, 101, 95, 96, 101, 96, 97, 101, 97, 98, 101, 98, 99, 101, 99, 80, 101],
        }
        rel material:binding = </Root/Looks/initialShadingGroup>
        point3f[] points.timeSamples = {
            1: [(0.95121205, -1.2827566, -0.33868772), (0.8109708, -1.1556907, -0.57971567), (0.5909718, -1.0573795, -0.7712517), (0.31279483, -0.99726266, -0.89416695), (0.0038060471, -0.98050004, -0.9357536), (-0.30557916, -1.0077474, -0.89121836), (-0.58494, -1.0755004, -0.7644283), (-0.8068743, -1.1767787, -0.5677242), (-0.94969255, -1.3019316, -0.32074493), (-0.9995248, -1.439457, -0.04836974), (-0.95164293, -1.5768348, 0.22197643), (-0.810876, -1.7014002, 0.46330944), (-0.5910869, -1.8012894, 0.65195215), (-0.3137774, -1.8664747, 0.7698841), (-0.0059798006, -1.8898486, 0.80631685), (0.3023493, -1.8682077, 0.7584328), (0.58119243, -1.8029126, 0.63136667), (0.8033411, -1.700026, 0.43755013), (0.94702154, -1.5698286, 0.19552164), (0.99803704, -1.4257369, -0.071713924), (0.9513702, -0.59505, -0.034316454), (0.81301236, -0.44570804, -0.26182428), (0.594404, -0.32906672, -0.4439194), (0.31700712, -0.25669068, -0.56235063), (0.008205583, -0.23504949, -0.60471), (-0.30146912, -0.26498678, -0.5658776), (-0.5814453, -0.3421074, -0.4489018), (-0.80419874, -0.45791635, -0.26510227), (-0.9479837, -0.60121, -0.033139773), (-0.99893546, -0.75916094, 0.22306152), (-0.95235324, -0.9179386, 0.47725797), (-0.8130597, -1.0632299, 0.70403814), (-0.5948305, -1.1811414, 0.8815112), (-0.31898606, -1.2595876, 0.99321), (-0.012313621, -1.2898511, 1.0292447), (0.29547366, -1.2678747, 0.9868592), (0.57452494, -1.1949925, 0.87047964), (0.7976638, -1.0779865, 0.6912638), (0.942994, -0.92847985, 0.46614143), (0.99606407, -0.7617455, 0.21636978), (0.951784, -0.0004124162, 0.38286403), (0.81838083, 0.17196903, 0.16715276), (0.6034724, 0.3108376, -0.0065465886), (0.3281802, 0.40220046, -0.12075875), (0.01990182, 0.43696702, -0.16383636), (-0.29053625, 0.41190833, -0.13128743), (-0.57215434, 0.32991064, -0.026331449), (-0.7970911, 0.19952027, 0.14042671), (-0.9434451, 0.033900715, 0.3521676), (-0.9973693, -0.15060961, 0.5876969), (-0.9542424, -0.3361441, 0.8236995), (-0.81886774, -0.50498354, 1.0371237), (-0.60477304, -0.6411186, 1.2074214), (-0.33277562, -0.7316102, 1.3184222), (-0.029006967, -0.7677041, 1.3597142), (0.2774405, -0.7456575, 1.3274878), (0.55711126, -0.6671976, 1.2248309), (0.7828756, -0.53952134, 1.0614636), (0.9325087, -0.37476528, 0.8529157), (0.9909189, -0.18894213, 0.61917126), (0.9538355, 0.4591557, 0.9535357), (0.8464653, 0.65810746, 0.75189996), (0.6543427, 0.8262871, 0.585177), (0.3961656, 0.946698, 0.47008887), (0.097468615, 1.0066881, 0.4180448), (-0.2118607, 0.99946165, 0.43388078), (-0.5006992, 0.925191, 0.51537776), (-0.7401489, 0.79140663, 0.65371484), (-0.9067899, 0.6122742, 0.834778), (-0.9850478, 0.40666747, 1.0409192), (-0.9682997, 0.1955539, 1.2526674), (-0.8589224, -0.00047048926, 1.4502103), (-0.6677338, -0.1630171, 1.6148396), (-0.4130203, -0.2771943, 1.7305505), (-0.11905555, -0.33261362, 1.7856858), (0.18598585, -0.32419583, 1.7743031), (0.47261977, -0.2526685, 1.6969799), (0.71288854, -0.12460869, 1.5609043), (0.8831197, 0.048049252, 1.3792408), (0.96630263, 0.24902812, 1.1698549), (0.9559311, 0.844115, 1.6122084), (0.8757925, 1.0630534, 1.4218118), (0.7090706, 1.253635, 1.2584662), (0.47204223, 1.3972597, 1.1378459), (0.18769544, 1.4796348, 1.0712991), (-0.116440274, 1.4922572, 1.0649198), (-0.41086754, 1.4334162, 1.1191248), (-0.66689986, 1.3085489, 1.2286958), (-0.8594195, 1.1298344, 1.3832488), (-0.9693599, 0.91501826, 1.5681118), (-0.9856558, 0.68558097, 1.7655869), (-0.90644145, 0.4644615, 1.9565346), (-0.73933953, 0.27362055, 2.1221752), (-0.5007685, 0.13176288, 2.2459602), (-0.21430954, 0.052501507, 2.3153243), (0.09169504, 0.043142, 2.3230896), (0.3870342, 0.10414814, 2.2683136), (0.6426793, 0.22926371, 2.1564426), (0.83366406, 0.40622053, 1.9987419), (0.9415041, 0.61793965, 1.811077), (-1.0931747e-7, -1.4693322, -0.008169735), (-0.015418277, 0.7425677, 1.7173107)],
            20: [(0.95105714, -1.45, -0.30901718), (0.80901754, -1.45, -0.5877856), (0.5877856, -1.45, -0.8090175), (0.30901715, -1.45, -0.951057), (1.3422307e-19, -1.45, -1.0000005), (-0.30901715, -1.45, -0.95105696), (-0.5877855, -1.45, -0.8090173), (-0.80901724, -1.45, -0.5877854), (-0.9510568, -1.45, -0.30901706), (-1.0000002, -1.45, 6.887075e-18), (-0.9510568, -1.45, 0.30901706), (-0.8090172, -1.45, 0.58778536), (-0.58778536, -1.45, 0.8090171), (-0.30901706, -1.45, 0.95105666), (-2.9802322e-8, -1.45, 1.0000001), (0.30901697, -1.45, 0.9510566), (0.58778524, -1.45, 0.80901706), (0.809017, -1.45, 0.5877853), (0.95105654, -1.45, 0.309017), (1, -1.45, 6.830225e-18), (0.95105714, -0.725, -0.30901718), (0.80901754, -0.725, -0.5877856), (0.5877856, -0.725, -0.8090175), (0.30901715, -0.725, -0.951057), (2.8937595e-19, -0.725, -1.0000005), (-0.30901715, -0.725, -0.95105696), (-0.5877855, -0.725, -0.8090173), (-0.80901724, -0.725, -0.5877854), (-0.9510568, -0.725, -0.30901706), (-1.0000002, -0.725, 6.8228463e-18), (-0.9510568, -0.725, 0.30901706), (-0.8090172, -0.725, 0.58778536), (-0.58778536, -0.725, 0.8090171), (-0.30901706, -0.725, 0.95105666), (-2.9802322e-8, -0.725, 1.0000001), (0.30901697, -0.725, 0.9510566), (0.58778524, -0.725, 0.80901706), (0.809017, -0.725, 0.5877853), (0.95105654, -0.725, 0.309017), (1, -0.725, 6.7210054e-18), (0.95105714, -1.0329599e-16, -0.30901718), (0.80901754, -1.0373147e-16, -0.5877856), (0.5877856, -1.0426817e-16, -0.8090175), (0.30901715, -1.0485592e-16, -0.951057), (7.018524e-19, -1.05436226e-16, -1.0000005), (-0.30901715, -1.05948846e-16, -0.95105696), (-0.5877855, -1.0633995e-16, -0.8090173), (-0.80901724, -1.06569126e-16, -0.5877854), (-0.9510568, -1.0661339e-16, -0.30901706), (-1.0000002, -1.0646838e-16, 6.652159e-18), (-0.9510568, -1.0614848e-16, 0.30901706), (-0.8090172, -1.0568629e-16, 0.58778536), (-0.58778536, -1.0513014e-16, 0.8090171), (-0.30901706, -1.04538285e-16, 0.95105666), (-2.9802322e-8, -1.03971005e-16, 1.0000001), (0.30901697, -1.03482995e-16, 0.9510566), (0.58778524, -1.0311813e-16, 0.80901706), (0.809017, -1.0290702e-16, 0.5877853), (0.95105654, -1.0286646e-16, 0.309017), (1, -1.029996e-16, 6.4361736e-18), (0.95105714, 0.725, -0.30901718), (0.80901754, 0.725, -0.5877856), (0.5877856, 0.725, -0.8090175), (0.30901715, 0.725, -0.951057), (3.437303e-18, 0.725, -1.0000005), (-0.30901715, 0.725, -0.95105696), (-0.5877855, 0.725, -0.8090173), (-0.80901724, 0.725, -0.5877854), (-0.9510568, 0.725, -0.30901706), (-1.0000002, 0.725, 5.309284e-18), (-0.9510568, 0.725, 0.30901706), (-0.8090172, 0.725, 0.58778536), (-0.58778536, 0.725, 0.8090171), (-0.30901706, 0.725, 0.95105666), (-2.9802322e-8, 0.725, 1.0000001), (0.30901697, 0.725, 0.9510566), (0.58778524, 0.725, 0.80901706), (0.809017, 0.725, 0.5877853), (0.95105654, 0.725, 0.309017), (1, 0.725, 5.073443e-18), (0.95105714, 1.45, -0.30901718), (0.80901754, 1.45, -0.5877856), (0.5877856, 1.45, -0.8090175), (0.30901715, 1.45, -0.951057), (6.6192188e-18, 1.45, -1.0000005), (-0.30901715, 1.45, -0.95105696), (-0.5877855, 1.45, -0.8090173), (-0.80901724, 1.45, -0.5877854), (-0.9510568, 1.45, -0.30901706), (-1.0000002, 1.45, 3.5995145e-18), (-0.9510568, 1.45, 0.30901706), (-0.8090172, 1.45, 0.58778536), (-0.58778536, 1.45, 0.8090171), (-0.30901706, 1.45, 0.95105666), (-2.9802322e-8, 1.45, 1.0000001), (0.30901697, 1.45, 0.9510566), (0.58778524, 1.45, 0.80901706), (0.809017, 1.45, 0.5877853), (0.95105654, 1.45, 0.309017), (1, 1.45, 3.7006224e-18), (4.919527e-23, -1.45, 6.9388695e-18), (6.9385643e-18, 1.45, 3.4696116e-18)],
        }
        texCoord2f[] primvars:map1 (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:map1.timeSamples = {
            1: [(0.375, 0.3125), (0.3875, 0.3125), (0.3875, 0.40648496), (0.375, 0.40648496), (0.39999998, 0.3125), (0.39999998, 0.40648496), (0.41249996, 0.3125), (0.41249996, 0.40648496), (0.42499995, 0.3125), (0.42499995, 0.40648496), (0.43749994, 0.3125), (0.43749994, 0.40648496), (0.44999993, 0.3125), (0.44999993, 0.40648496), (0.46249992, 0.3125), (0.46249992, 0.40648496), (0.4749999, 0.3125), (0.4749999, 0.40648496), (0.4874999, 0.3125), (0.4874999, 0.40648496), (0.49999988, 0.3125), (0.49999988, 0.40648496), (0.51249987, 0.3125), (0.51249987, 0.40648496), (0.52499986, 0.3125), (0.52499986, 0.40648496), (0.53749985, 0.3125), (0.53749985, 0.40648496), (0.54999983, 0.3125), (0.54999983, 0.40648496), (0.5624998, 0.3125), (0.5624998, 0.40648496), (0.5749998, 0.3125), (0.5749998, 0.40648496), (0.5874998, 0.3125), (0.5874998, 0.40648496), (0.5999998, 0.3125), (0.5999998, 0.40648496), (0.6124998, 0.3125), (0.6124998, 0.40648496), (0.62499976, 0.3125), (0.62499976, 0.40648496), (0.3875, 0.5004699), (0.375, 0.5004699), (0.39999998, 0.5004699), (0.41249996, 0.5004699), (0.42499995, 0.5004699), (0.43749994, 0.5004699), (0.44999993, 0.5004699), (0.46249992, 0.5004699), (0.4749999, 0.5004699), (0.4874999, 0.5004699), (0.49999988, 0.5004699), (0.51249987, 0.5004699), (0.52499986, 0.5004699), (0.53749985, 0.5004699), (0.54999983, 0.5004699), (0.5624998, 0.5004699), (0.5749998, 0.5004699), (0.5874998, 0.5004699), (0.5999998, 0.5004699), (0.6124998, 0.5004699), (0.62499976, 0.5004699), (0.3875, 0.5944549), (0.375, 0.5944549), (0.39999998, 0.5944549), (0.41249996, 0.5944549), (0.42499995, 0.5944549), (0.43749994, 0.5944549), (0.44999993, 0.5944549), (0.46249992, 0.5944549), (0.4749999, 0.5944549), (0.4874999, 0.5944549), (0.49999988, 0.5944549), (0.51249987, 0.5944549), (0.52499986, 0.5944549), (0.53749985, 0.5944549), (0.54999983, 0.5944549), (0.5624998, 0.5944549), (0.5749998, 0.5944549), (0.5874998, 0.5944549), (0.5999998, 0.5944549), (0.6124998, 0.5944549), (0.62499976, 0.5944549), (0.3875, 0.68843985), (0.375, 0.68843985), (0.39999998, 0.68843985), (0.41249996, 0.68843985), (0.42499995, 0.68843985), (0.43749994, 0.68843985), (0.44999993, 0.68843985), (0.46249992, 0.68843985), (0.4749999, 0.68843985), (0.4874999, 0.68843985), (0.49999988, 0.68843985), (0.51249987, 0.68843985), (0.52499986, 0.68843985), (0.53749985, 0.68843985), (0.54999983, 0.68843985), (0.5624998, 0.68843985), (0.5749998, 0.68843985), (0.5874998, 0.68843985), (0.5999998, 0.68843985), (0.6124998, 0.68843985), (0.62499976, 0.68843985), (0.626409, 0.064408496), (0.64860266, 0.10796607), (0.5, 0.15), (0.5918415, 0.02984102), (0.54828393, 0.0076473355), (0.5, -7.4505806e-8), (0.45171607, 0.0076473504), (0.4081585, 0.02984105), (0.37359107, 0.064408526), (0.3513974, 0.1079661), (0.34374997, 0.15625), (0.3513974, 0.2045339), (0.37359107, 0.24809146), (0.40815854, 0.28265893), (0.4517161, 0.3048526), (0.5, 0.3125), (0.5482839, 0.3048526), (0.59184146, 0.28265893), (0.62640893, 0.24809146), (0.6486026, 0.2045339), (0.65625, 0.15625), (0.6486026, 0.89203393), (0.62640893, 0.93559146), (0.5, 0.8375), (0.59184146, 0.97015893), (0.5482839, 0.9923526), (0.5, 1), (0.4517161, 0.9923526), (0.40815854, 0.97015893), (0.37359107, 0.93559146), (0.3513974, 0.89203393), (0.34374997, 0.84375), (0.3513974, 0.79546607), (0.37359107, 0.75190854), (0.4081585, 0.71734107), (0.45171607, 0.69514734), (0.5, 0.68749994), (0.54828393, 0.69514734), (0.5918415, 0.717341), (0.626409, 0.7519085), (0.64860266, 0.79546607), (0.65625, 0.84375)],
        }
        int[] primvars:map1:indices.timeSamples = {
            1: [0, 1, 2, 3, 1, 4, 5, 2, 4, 6, 7, 5, 6, 8, 9, 7, 8, 10, 11, 9, 10, 12, 13, 11, 12, 14, 15, 13, 14, 16, 17, 15, 16, 18, 19, 17, 18, 20, 21, 19, 20, 22, 23, 21, 22, 24, 25, 23, 24, 26, 27, 25, 26, 28, 29, 27, 28, 30, 31, 29, 30, 32, 33, 31, 32, 34, 35, 33, 34, 36, 37, 35, 36, 38, 39, 37, 38, 40, 41, 39, 3, 2, 42, 43, 2, 5, 44, 42, 5, 7, 45, 44, 7, 9, 46, 45, 9, 11, 47, 46, 11, 13, 48, 47, 13, 15, 49, 48, 15, 17, 50, 49, 17, 19, 51, 50, 19, 21, 52, 51, 21, 23, 53, 52, 23, 25, 54, 53, 25, 27, 55, 54, 27, 29, 56, 55, 29, 31, 57, 56, 31, 33, 58, 57, 33, 35, 59, 58, 35, 37, 60, 59, 37, 39, 61, 60, 39, 41, 62, 61, 43, 42, 63, 64, 42, 44, 65, 63, 44, 45, 66, 65, 45, 46, 67, 66, 46, 47, 68, 67, 47, 48, 69, 68, 48, 49, 70, 69, 49, 50, 71, 70, 50, 51, 72, 71, 51, 52, 73, 72, 52, 53, 74, 73, 53, 54, 75, 74, 54, 55, 76, 75, 55, 56, 77, 76, 56, 57, 78, 77, 57, 58, 79, 78, 58, 59, 80, 79, 59, 60, 81, 80, 60, 61, 82, 81, 61, 62, 83, 82, 64, 63, 84, 85, 63, 65, 86, 84, 65, 66, 87, 86, 66, 67, 88, 87, 67, 68, 89, 88, 68, 69, 90, 89, 69, 70, 91, 90, 70, 71, 92, 91, 71, 72, 93, 92, 72, 73, 94, 93, 73, 74, 95, 94, 74, 75, 96, 95, 75, 76, 97, 96, 76, 77, 98, 97, 77, 78, 99, 98, 78, 79, 100, 99, 79, 80, 101, 100, 80, 81, 102, 101, 81, 82, 103, 102, 82, 83, 104, 103, 105, 106, 107, 108, 105, 107, 109, 108, 107, 110, 109, 107, 111, 110, 107, 112, 111, 107, 113, 112, 107, 114, 113, 107, 115, 114, 107, 116, 115, 107, 117, 116, 107, 118, 117, 107, 119, 118, 107, 120, 119, 107, 121, 120, 107, 122, 121, 107, 123, 122, 107, 124, 123, 107, 125, 124, 107, 106, 125, 107, 126, 127, 128, 127, 129, 128, 129, 130, 128, 130, 131, 128, 131, 132, 128, 132, 133, 128, 133, 134, 128, 134, 135, 128, 135, 136, 128, 136, 137, 128, 137, 138, 128, 138, 139, 128, 139, 140, 128, 140, 141, 128, 141, 142, 128, 142, 143, 128, 143, 144, 128, 144, 145, 128, 145, 146, 128, 146, 126, 128],
        }
    }

    def Skeleton "joint1" (
        prepend apiSchemas = ["SkelBindingAPI"]
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    {
        uniform matrix4d[] bindTransforms = [( (2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.11293683886508588, -1.4413938753959858, -0.04751847940888014, 1) ), ( (2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.11293683886508588, 0.015839493136218685, -0.04751847940888014, 1) ), ( (1.0000000000000004, 0, 0, 0), (0, 1.0000000000000004, 0, 0), (0, 0, 1, 0), (-0.11293683886508588, 1.3780359028511082, -0.04751847940888014, 1) )]
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
        uniform matrix4d[] restTransforms = [( (2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.11293683886508588, -1.4413938753959858, -0.04751847940888014, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.4572333685322043, 3.2357080759930576e-16, 0, 1) ), ( (2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (1.3621964097148893, 3.0246836362543863e-16, 0, 1) )]
        rel skel:animationSource = </Root/joint1/Animation>

        def SkelAnimation "Animation"
        {
            uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
            quatf[] rotations = [(0.70710677, 0, 0, 0.70710677), (1, 0, 0, 0), (0.70710677, 0, 0, -0.70710677)]
            quatf[] rotations.timeSamples = {
                1: [(0.69019824, 0.15370882, -0.15370882, 0.69019824), (0.9760877, 9.050139e-18, -0.21737708, 2.0154878e-18), (0.69019824, -0.15370882, -0.15370882, -0.69019824)],
                20: [(0.70710677, 0, 0, 0.70710677), (1, 0, 0, 0), (0.70710677, 0, 0, -0.70710677)],
            }
            half3[] scales = [(1, 1, 1), (1, 1, 1), (1, 1, 1)]
            float3[] translations = [(-0.11293684, -1.4413939, -0.04751848), (1.4572333, 3.1918912e-16, 0), (1.3621964, 3.0531133e-16, 0)]
        }
    }

    def Camera "Cam"
    {
        float2 clippingRange.timeSamples = {
            1: (0.1, 10000),
            20: (2, 1000),
        }
        float focalLength.timeSamples = {
            1: 35,
        }
        float focusDistance.timeSamples = {
            1: 5,
        }
        float fStop.timeSamples = {
            1: 5.6,
        }
        float horizontalAperture.timeSamples = {
            1: 35.999928,
        }
        float verticalAperture.timeSamples = {
            1: 23.999952,
        }
        float3 xformOp:rotateXYZ = (-36, -70.4, 9.481412e-15)
        double3 xformOp:translate.timeSamples = {
            1: (-8.724161577231872, 6.728331046365596, 3.3837117534027286),
            20: (-4.998428407709971, 4.922573886865677, 2.3579697180289685),
        }
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }

    def NurbsPatch "Nurbs" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent.timeSamples = {
            1: [(-0.5, -3.0416434, -0.5), (0.5, -3.0416434, 0.5)],
            20: [(-0.5, -3.061617e-17, -0.5), (0.5, 3.061617e-17, 0.5)],
        }
        rel material:binding = </Root/Looks/initialShadingGroup>
        point3f[] points.timeSamples = {
            1: [(-0.5, -3.0416434, 0.5), (-0.16666667, -3.0416434, 0.5), (0.16666667, -3.0416434, 0.5), (0.5, -3.0416434, 0.5), (-0.5, -3.0416434, 0.16666667), (-0.16666667, -3.0416434, 0.16666667), (0.16666667, -3.0416434, 0.16666667), (0.5, -3.0416434, 0.16666667), (-0.5, -3.0416434, -0.16666667), (-0.16666667, -3.0416434, -0.16666667), (0.16666667, -3.0416434, -0.16666667), (0.5, -3.0416434, -0.16666667), (-0.5, -3.0416434, -0.5), (-0.16666667, -3.0416434, -0.5), (0.16666667, -3.0416434, -0.5), (0.5, -3.0416434, -0.5)],
            20: [(-0.5, -3.061617e-17, 0.5), (-0.16666667, -3.061617e-17, 0.5), (0.16666667, -3.061617e-17, 0.5), (0.5, -3.061617e-17, 0.5), (-0.5, -1.020539e-17, 0.16666667), (-0.16666667, -1.020539e-17, 0.16666667), (0.16666667, -1.020539e-17, 0.16666667), (0.5, -1.020539e-17, 0.16666667), (-0.5, 1.020539e-17, -0.16666667), (-0.16666667, 1.020539e-17, -0.16666667), (0.16666667, 1.020539e-17, -0.16666667), (0.5, 1.020539e-17, -0.16666667), (-0.5, 3.061617e-17, -0.5), (-0.16666667, 3.061617e-17, -0.5), (0.16666667, 3.061617e-17, -0.5), (0.5, 3.061617e-17, -0.5)],
        }
        texCoord2f[] primvars:st = [(0, 0), (0.33333334, 0), (0.6666667, 0), (1, 0), (0, 0.33333334), (0.33333334, 0.33333334), (0.6666667, 0.33333334), (1, 0.33333334), (0, 0.6666667), (0.33333334, 0.6666667), (0.6666667, 0.6666667), (1, 0.6666667), (0, 1), (0.33333334, 1), (0.6666667, 1), (1, 1)] (
            interpolation = "vertex"
        )
        double[] uKnots = [0, 0, 0, 0, 1, 1, 1, 1]
        int uOrder = 4
        double2 uRange = (0, 1)
        int uVertexCount = 4
        double[] vKnots = [0, 0, 0, 0, 1, 1, 1, 1]
        int vOrder = 4
        double2 vRange = (0, 1)
        int vVertexCount = 4
        double3 xformOp:translate = (0, 0, 2.942409163995654)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Skeleton "joint4" (
        prepend apiSchemas = ["SkelBindingAPI"]
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.001663775311510074, 0, 2.9241075361563036, 1) )]
        uniform token[] joints = ["joint4"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.001663775311510074, 0, 2.9241075361563036, 1) )]
        rel skel:animationSource = </Root/joint4/Animation>

        def SkelAnimation "Animation"
        {
            uniform token[] joints = ["joint4"]
            quatf[] rotations = [(1, 0, 0, 0)]
            half3[] scales = [(1, 1, 1)]
            float3[] translations = [(0.0016637753, 0, 2.9241076)]
            float3[] translations.timeSamples = {
                1: [(0.0016637753, -3.0416434, 2.9241076)],
                20: [(0.0016637753, 0, 2.9241076)],
            }
        }
    }

    def NurbsCurves "Curve"
    {
        int[] curveVertexCounts = [6]
        float3[] extent.timeSamples = {
            1: [(-18.89628, -0.5, -8.25107), (11.195379, 0.5, 16.063616)],
            20: [(-18.89628, -5.3799567, -8.25107), (11.195379, -4.3799567, 16.063616)],
        }
        double[] knots = [0, 0, 0, 0, 1, 2, 3, 3, 3, 3]
        int[] order = [4]
        point3f[] points.timeSamples = {
            1: [(7.3439097, 0, -3.6761854), (0.96973777, 0, -5.0344806), (-11.778606, 0, -7.7510705), (-18.39628, 0, 12.4583645), (0.9981591, 0, 14.528532), (10.695379, 0, 15.563616)],
            20: [(7.3439097, -4.8799567, -3.6761854), (0.96973777, -4.8799567, -5.0344806), (-11.778606, -4.8799567, -7.7510705), (-18.39628, -4.8799567, 12.4583645), (0.9981591, -4.8799567, 14.528532), (10.695379, -4.8799567, 15.563616)],
        }
        double2[] ranges = [(0, 3)]
        float[] widths = [1] (
            interpolation = "constant"
        )
    }

    def Skeleton "joint5" (
        prepend apiSchemas = ["SkelBindingAPI"]
        customData = {
            dictionary Maya = {
                bool generated = 1
            }
        }
    )
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
        uniform token[] joints = ["joint5"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (5.766137682263384, 0, 5.187788877710354, 1) )]
        rel skel:animationSource = </Root/joint5/Animation>

        def SkelAnimation "Animation"
        {
            uniform token[] joints = ["joint5"]
            quatf[] rotations = [(1, 0, 0, 0)]
            half3[] scales = [(1, 1, 1)]
            float3[] translations = [(5.7661376, -4.8799567, 5.187789)]
            float3[] translations.timeSamples = {
                1: [(5.7661376, 0, 5.187789)],
                20: [(5.7661376, -4.8799567, 5.187789)],
            }
        }
    }

    def Scope "Looks"
    {
        def Material "initialShadingGroup"
        {
        }
    }
}

