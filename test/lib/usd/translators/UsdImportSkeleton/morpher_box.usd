#usda 1.0
(
    customLayerData = {
        string creator = "USD for Autodesk 3ds Max: v0.6.5.0"
    }
    defaultPrim = "root"
    endTimeCode = 10
    framesPerSecond = 30
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Z"
)

def SkelRoot "root"
{
    float3[] extent.timeSamples = {
        0: [(-5, -5, 0), (5, 25, 10)],
        1.0000000521540642: [(-5, -5, 0), (5, 25, 10)],
        2.0000001043081284: [(-5, -5, 0), (5, 25, 10)],
        3.0000000447034836: [(-5, -5, 0), (5, 25, 10)],
        4.000000208616257: [(-5, -5, 0), (5, 25, 10)],
        5.000000149011612: [(-5, -5, 0), (5, 25, 10)],
        6.000000089406967: [(-5, -5, 0), (5, 25, 10)],
        7.000000029802322: [(-5, -5, 0), (5, 25, 10)],
        8.000000417232513: [(-5, -5, 0), (5, 25, 10)],
        9.000000357627869: [(-5, -5, 0), (5, 25, 10)],
        10.000000298023224: [(-5, -5, 0), (5, 25, 10)],
    }

    def Mesh "b1" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        float3[] extent
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 2, 3, 1, 4, 5, 7, 6, 0, 1, 5, 4, 1, 3, 7, 5, 3, 2, 6, 7, 2, 0, 4, 6]
        point3f[] points = [(-5, -5, 0), (5, -5, 0), (-5, 5, 0), (5, 5, 0), (-5, -5, 10), (5, -5, 10), (-5, 5, 10), (5, 5, 10)]
        color3f[] primvars:displayColor = [(0.6509804, 0.8980392, 0.8980392)]
        float3[] primvars:normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
            interpolation = "faceVarying"
        )
        int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        texCoord2f[] primvars:st = [(1, 0), (1, 1), (0, 1), (0, 0), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token[] skel:blendShapes = ["_root_b1_Box0002"]
        rel skel:blendShapeTargets = </root/b1/Box0002>
        rel skel:skeleton = </root/Bones>
        uniform token subdivisionScheme = "none"
        uniform token subsetFamily:materialBind:familyType = "partition"
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            4: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            5: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def BlendShape "Box0002"
        {
          
            uniform point3f[] inbetweens:IBT_1 = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (5, 5, 0), (-5, 5, 0), (5, -5, 0), (-5, -5, 0)] (
                weight = -1
            )
            uniform vector3f[] offsets = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-5, -5, 0), (5, -5, 0), (-5, 5, 0), (5, 5, 0)]
        }
    }

    def Skeleton "Bones" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        rel skel:animationSource = </root/Bones/Animations>

        def SkelAnimation "Animations"
        {
            uniform token[] blendShapes = ["_root_b1_Box0002"]
            float[] blendShapeWeights = [-1]
            float[] blendShapeWeights.timeSamples = {
                0: [-1],
                1: [-0.75],
                2: [-0.5],
                3: [-0.25],
                5: [0, 0],
                7: [0.25],
                10: [1],
            }
        }
    }
}

