#usda 1.0
(
    endTimeCode = 30
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def SkelRoot "Root" (
    kind = "component"
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
    float3[] extent.timeSamples = {
        1: [(-8.881784e-16, -1, 0), (0, 1, 4.440892e-16)],
        2: [(-8.8548644e-16, -1, 0), (0, 0.99992824, 0.011980047)],
        3: [(-8.77966e-16, -1, 0), (0, 0.9990293, 0.04405114)],
        4: [(-8.6628537e-16, -1, 0), (0, 0.99590486, 0.0904073)],
        5: [(-8.512596e-16, -1, 0), (0, 0.98941684, 0.14510126)],
        6: [(-8.341171e-16, -1, 0), (0, 0.97935027, 0.20217088)],
        7: [(-8.1660954e-16, -1, 0), (0, 0.9667337, 0.25578493)],
        8: [(-8.0096155e-16, -1, 0), (0, 0.95381016, 0.3004101)],
        9: [(-7.8970147e-16, -1, 0), (0, 0.94367975, 0.3308602)],
        10: [(-7.8540797e-16, -1, 0), (0, 0.93965006, 0.34213713)],
        11: [(-0.008673679, -1, 0), (0, 0.9396149, 0.34212375)],
        12: [(-0.032211367, -1, 0), (0, 0.9391626, 0.34195903)],
        13: [(-0.06686227, -1, 0), (0, 0.93754745, 0.34137106)],
        14: [(-0.10882605, -1, 0), (0, 0.9340696, 0.34010422)],
        15: [(-0.15427072, -1, 0), (0, 0.9284015, 0.33804023)],
        16: [(-0.19939104, -1, 0), (0, 0.9207824, 0.33526555)],
        17: [(-0.24048574, -1, 0), (0, 0.91207445, 0.33209455)],
        18: [(-0.2740113, -1, 0), (0, 0.903687, 0.3290404)],
        19: [(-0.2965753, -1, 0), (0, 0.8973754, 0.32674214)],
        20: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        21: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        22: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        23: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
        24: [(-0.30484772, -1, 0), (0, 0.89492446, 0.32584974)],
        25: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        26: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        27: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        28: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        29: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        30: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
    }
    float3[] extentsHint.timeSamples = {
        1: [(-8.881784e-16, -1, 0), (0, 1, 4.440892e-16)],
        2: [(-8.8548644e-16, -1, 0), (0, 0.99992824, 0.011980047)],
        3: [(-8.77966e-16, -1, 0), (0, 0.9990293, 0.04405114)],
        4: [(-8.6628537e-16, -1, 0), (0, 0.99590486, 0.0904073)],
        5: [(-8.512596e-16, -1, 0), (0, 0.98941684, 0.14510126)],
        6: [(-8.341171e-16, -1, 0), (0, 0.97935027, 0.20217088)],
        7: [(-8.1660954e-16, -1, 0), (0, 0.9667337, 0.25578493)],
        8: [(-8.0096155e-16, -1, 0), (0, 0.95381016, 0.3004101)],
        9: [(-7.8970147e-16, -1, 0), (0, 0.94367975, 0.3308602)],
        10: [(-7.8540797e-16, -1, 0), (0, 0.93965006, 0.34213713)],
        11: [(-0.008673679, -1, 0), (0, 0.9396149, 0.34212375)],
        12: [(-0.032211367, -1, 0), (0, 0.9391626, 0.34195903)],
        13: [(-0.06686227, -1, 0), (0, 0.93754745, 0.34137106)],
        14: [(-0.10882605, -1, 0), (0, 0.9340696, 0.34010422)],
        15: [(-0.15427072, -1, 0), (0, 0.9284015, 0.33804023)],
        16: [(-0.19939104, -1, 0), (0, 0.9207824, 0.33526555)],
        17: [(-0.24048574, -1, 0), (0, 0.91207445, 0.33209455)],
        18: [(-0.2740113, -1, 0), (0, 0.903687, 0.3290404)],
        19: [(-0.2965753, -1, 0), (0, 0.8973754, 0.32674214)],
        20: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        21: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        22: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        23: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
        24: [(-0.30484772, -1, 0), (0, 0.89492446, 0.32584974)],
        25: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        26: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        27: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        28: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        29: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        30: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
    }
    rel skel:animationSource = </Root/Animation>
    rel skel:skeleton = </Root/Skeleton>

    def Skeleton "Skeleton"
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (2, 0, 0, 1) )]
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )]
    }

    def SkelAnimation "Animation"
    {
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
    }

    def Mesh "Cube" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
        point3f[] points = [(-0.5, -1, 0.5), (0.5, -1, 0.5), (0.5, 0, 0.5), (-0.5, 0, 0.5), (-0.5, 0, 0.5), (0.5, 0, 0.5), (0.5, 1, 0.5), (-0.5, 1, 0.5), (-0.5, 1, 0.5), (0.5, 1, 0.5), (0.5, 1, -0.5), (-0.5, 1, -0.5), (-0.5, 1, -0.5), (0.5, 1, -0.5), (0.5, 0, -0.5), (-0.5, 0, -0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5), (0.5, -1, -0.5), (-0.5, -1, -0.5), (-0.5, -1, -0.5), (0.5, -1, -0.5), (0.5, -1, 0.5), (-0.5, -1, 0.5), (0.5, -1, 0.5), (0.5, -1, -0.5), (0.5, 0, -0.5), (0.5, 0, 0.5), (0.5, 0, 0.5), (0.5, 0, -0.5), (0.5, 1, -0.5), (0.5, 1, 0.5), (-0.5, -1, -0.5), (-0.5, -1, 0.5), (-0.5, 0, 0.5), (-0.5, 0, -0.5), (-0.5, 0, -0.5), (-0.5, 0, 0.5), (-0.5, 1, 0.5), (-0.5, 1, -0.5)]
        matrix4d primvars:skel:geomBindTransform = ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )
        int[] primvars:skel:jointIndices = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0] (
            elementSize = 3
            interpolation = "vertex"
        )
        uniform token primvars:skel:skinningMethod = "dualQuaternion"
        float[] primvars:skel:jointWeights = [1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0] (
            elementSize = 3
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

