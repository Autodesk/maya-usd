#usda 1.0
(
    defaultPrim = "pPlane1"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "pPlane1" (
    kind = "component"
)
{
    float3 xformOp:rotateXYZ = (90, 0, 90)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]

    def Mesh "pPlaneShape1"
    {
        rel material:binding = </pPlane1/Looks/nestedSG>
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        color3f[] primvars:displayColor = [(0.13320851, 0.13320851, 0.13320851)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
    }

    def Mesh "pPlane2"
    {
        rel material:binding = </pPlane1/Looks/upOneLevelSG>
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        color3f[] primvars:displayColor = [(0.13320851, 0.13320851, 0.13320851)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        double3 xformOp:translate = (0, 0, 1.2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pPlane3"
    {
        rel material:binding = </pPlane1/Looks/upTwoLevelsSG>
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        color3f[] primvars:displayColor = [(0.13320851, 0.13320851, 0.13320851)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        double3 xformOp:translate = (0, 0, 2.4)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pPlane4" (
        kind = "component"
    )
    {
        rel material:binding = </pPlane1/Looks/unresolvableSG>
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        color3f[] primvars:displayColor = [(1, 1, 1)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        double3 xformOp:translate = (0, 0, 3.6)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    def Scope "Looks"
    {
        def Material "nestedSG"
        {
            token outputs:surface.connect = </pPlane1/Looks/nestedSG/nestedSurface.outputs:surface>

            def Shader "nestedSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </pPlane1/Looks/nestedSG/nestedFile.outputs:rgb>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "nestedFile"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:fallback = (0.5, 0.5, 0.5, 1)
                asset inputs:file = @textures/green_A.png@
                float2 inputs:st.connect = </pPlane1/Looks/nestedSG/nestedFile/TexCoordReader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }
            }
        }
        def Material "upOneLevelSG"
        {
            token outputs:surface.connect = </pPlane1/Looks/upOneLevelSG/upOneLevelSurface.outputs:surface>

            def Shader "upOneLevelSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </pPlane1/Looks/upOneLevelSG/upOneLevelFile.outputs:rgb>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "upOneLevelFile"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:fallback = (0.5, 0.5, 0.5, 1)
                asset inputs:file = @../textures/black_B.png@
                float2 inputs:st.connect = </pPlane1/Looks/upOneLevelSG/upOneLevelFile/TexCoordReader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }
            }
        }
        def Material "upTwoLevelsSG"
        {
            token outputs:surface.connect = </pPlane1/Looks/upTwoLevelsSG/upTwoLevelsSurface.outputs:surface>

            def Shader "upTwoLevelsSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </pPlane1/Looks/upTwoLevelsSG/upTwoLevelsFile.outputs:rgb>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "upTwoLevelsFile"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:fallback = (0.5, 0.5, 0.5, 1)
                asset inputs:file = @../../textures/red_C.png@
                float2 inputs:st.connect = </pPlane1/Looks/upTwoLevelsSG/upTwoLevelsFile/TexCoordReader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }
            }
        }
        def Material "unresolvableSG"
        {
            token outputs:surface.connect = </pPlane1/Looks/unresolvableSG/unresolvableSurface.outputs:surface>

            def Shader "unresolvableSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </pPlane1/Looks/unresolvableSG/unresolvableFile.outputs:rgb>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "unresolvableFile"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:fallback = (0.5, 0.5, 0.5, 1)
                asset inputs:file = @../textures/unresolvable.png@
                float2 inputs:st.connect = </pPlane1/Looks/unresolvableSG/unresolvableFile/TexCoordReader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }
            }
        }
    }
}
